{
  "extends": ["plugin:vue/vue3-recommended", "prettier"],
  "plugins": ["cypress", "@typescript-eslint"],
  "parserOptions": {
    "parser": "@typescript-eslint/parser"
  },
  "settings": {
    // https://github.com/meteorlxy/eslint-plugin-prettier-vue#eslint-config
    "SFCBlocks": {}
  },
  "rules": {
    // "prettier-vue/prettier": [
    //   "error",
    //   {
    //     "printWidth": 120,
    //     "singleQuote": false,
    //     "semi": true
    //   }
    // ],
    "vue/no-lone-template": "off",
    "vue/no-multiple-template-root": "off",
    "vue/no-vmodel-argument": "off",
    /**
     * turn this back on once the false warning for using string literals goes away;
     * for now, so long as we express an "emits" clause then TS should keep us honest
     * here rather than relying on lint rules.
     */
    "vue/require-explicit-emits": "off",
    "no-trailing-spaces": ["warn", { "skipBlankLines": true, "ignoreComments": true }],
    "no-console": "warn",
    "prefer-const": "error",

    "semi": "off",
    "quotes": ["warn", "double", { "avoidEscape": true, "allowTemplateLiterals": true }],
    "no-unused-vars": "off",
    "curly": ["warn", "multi-line"],
    "brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    // our use of `-spec` files for testing prevents us using this
    "unicorn/filename-case": "off",
    // reduce has been getting a bad rap lately; its true that often
    // a filter or map would be clearer and equally as effective but
    // there are still some legit cases to use reduce
    "unicorn/no-array-reduce": "off",
    "unicorn/prevent-abbreviations": "off",
    "unicorn/no-null": "off",
    "no-nested-ternary": "off",
    // doesn't play well with prettier
    "unicorn/no-nested-ternary": "off",
    // this is kind of nice sometimes
    "unicorn/no-array-callback-reference": "off",

    // we need exceptions to be only "warn" because
    // there are valid use cases for generic variables being
    // used before being defined
    "no-use-before-define": ["warn"],
    "@typescript-eslint/semi": ["error"],
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    // "cases" allows for graceful use of that variable
    // name in Typescript test cases
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "varsIgnorePattern": "cases|^_",
        "argsIgnorePattern": "^_"
      }
    ]
  }
}
