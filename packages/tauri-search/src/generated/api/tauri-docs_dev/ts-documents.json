[{"id":"ts_app_Namespace_app","name":"app","kind":"Namespace","module":"app","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.app` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module app","url":"https://tauri.studio/docs/api/js/modules/app#app"},{"id":"ts_app_Function_getName","name":"getName","kind":"Function","module":"app","language":"typescript","declaration":"function getName(getName: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/app#getName"},{"id":"ts_app_Function_getTauriVersion","name":"getTauriVersion","kind":"Function","module":"app","language":"typescript","declaration":"function getTauriVersion(getTauriVersion: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/app#getTauriVersion"},{"id":"ts_app_Function_getVersion","name":"getVersion","kind":"Function","module":"app","language":"typescript","declaration":"function getVersion(getVersion: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/app#getVersion"},{"id":"ts_cli_Namespace_cli","name":"cli","kind":"Namespace","module":"cli","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.cli` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module cli","url":"https://tauri.studio/docs/api/js/modules/cli#cli"},{"id":"ts_cli_Interface_ArgMatch","name":"ArgMatch","kind":"Interface","module":"cli","language":"typescript","declaration":"interface ArgMatch {\n\toccurrences,\n\tvalue\n}","url":"https://tauri.studio/docs/api/js/modules/cli#ArgMatch"},{"id":"ts_cli_Interface_CliMatches","name":"CliMatches","kind":"Interface","module":"cli","language":"typescript","declaration":"interface CliMatches {\n\targs,\n\tsubcommand\n}","url":"https://tauri.studio/docs/api/js/modules/cli#CliMatches"},{"id":"ts_cli_Interface_SubcommandMatch","name":"SubcommandMatch","kind":"Interface","module":"cli","language":"typescript","declaration":"interface SubcommandMatch {\n\tmatches,\n\tname\n}","url":"https://tauri.studio/docs/api/js/modules/cli#SubcommandMatch"},{"id":"ts_cli_Function_getMatches","name":"getMatches","kind":"Function","module":"cli","language":"typescript","declaration":"function getMatches(getMatches: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/cli#getMatches"},{"id":"ts_clipboard_Namespace_clipboard","name":"clipboard","kind":"Namespace","module":"clipboard","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.clipboard` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module clipboard","url":"https://tauri.studio/docs/api/js/modules/clipboard#clipboard"},{"id":"ts_clipboard_Function_readText","name":"readText","kind":"Function","module":"clipboard","language":"typescript","declaration":"function readText(readText: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/clipboard#readText"},{"id":"ts_clipboard_Function_writeText","name":"writeText","kind":"Function","module":"clipboard","language":"typescript","declaration":"function writeText(writeText: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/clipboard#writeText"},{"id":"ts_dialog_Namespace_dialog","name":"dialog","kind":"Namespace","module":"dialog","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.dialog` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"dialog\": {\n        \"all\": true, // enable all dialog APIs\n        \"open\": true, // enable file open API\n        \"save\": true // enable file save API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.","declaration":"Module dialog","url":"https://tauri.studio/docs/api/js/modules/dialog#dialog"},{"id":"ts_dialog_Interface_DialogFilter","name":"DialogFilter","kind":"Interface","module":"dialog","language":"typescript","declaration":"interface DialogFilter {\n\textensions,\n\tname\n}","url":"https://tauri.studio/docs/api/js/modules/dialog#DialogFilter"},{"id":"ts_dialog_Interface_OpenDialogOptions","name":"OpenDialogOptions","kind":"Interface","module":"dialog","language":"typescript","declaration":"interface OpenDialogOptions {\n\tdefaultPath,\n\tdirectory,\n\tfilters,\n\tmultiple,\n\ttitle\n}","url":"https://tauri.studio/docs/api/js/modules/dialog#OpenDialogOptions"},{"id":"ts_dialog_Interface_SaveDialogOptions","name":"SaveDialogOptions","kind":"Interface","module":"dialog","language":"typescript","declaration":"interface SaveDialogOptions {\n\tdefaultPath,\n\tfilters,\n\ttitle\n}","url":"https://tauri.studio/docs/api/js/modules/dialog#SaveDialogOptions"},{"id":"ts_dialog_Function_ask","name":"ask","kind":"Function","module":"dialog","language":"typescript","declaration":"function ask(ask: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/dialog#ask"},{"id":"ts_dialog_Function_confirm","name":"confirm","kind":"Function","module":"dialog","language":"typescript","declaration":"function confirm(confirm: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/dialog#confirm"},{"id":"ts_dialog_Function_message","name":"message","kind":"Function","module":"dialog","language":"typescript","declaration":"function message(message: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/dialog#message"},{"id":"ts_dialog_Function_open","name":"open","kind":"Function","module":"dialog","language":"typescript","declaration":"function open(open: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/dialog#open"},{"id":"ts_dialog_Function_save","name":"save","kind":"Function","module":"dialog","language":"typescript","declaration":"function save(save: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/dialog#save"},{"id":"ts_event_Namespace_event","name":"event","kind":"Namespace","module":"event","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.event` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module event","url":"https://tauri.studio/docs/api/js/modules/event#event"},{"id":"ts_event_Interface_Event","name":"Event","kind":"Interface","module":"event","language":"typescript","declaration":"interface Event {\n\tevent,\n\tid,\n\tpayload,\n\twindowLabel\n}","url":"https://tauri.studio/docs/api/js/modules/event#Event"},{"id":"ts_event_Type_alias_EventCallback","name":"EventCallback","kind":"Type alias","module":"event","language":"typescript","type":{"type":"reflection","declaration":{"id":69,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"helpers/event.ts","line":39,"character":31}],"signatures":[{"id":70,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":71,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":61,"typeArguments":[{"type":"reference","id":72,"name":"T"}],"name":"Event"}}],"type":{"type":"intrinsic","name":"void"}}]}},"declaration":"Type alias EventCallback","url":"https://tauri.studio/docs/api/js/modules/event#EventCallback"},{"id":"ts_event_Type_alias_EventName","name":"EventName","kind":"Type alias","module":"event","language":"typescript","type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"tauri://update"},{"type":"literal","value":"tauri://update-available"},{"type":"literal","value":"tauri://update-install"},{"type":"literal","value":"tauri://update-status"},{"type":"literal","value":"tauri://resize"},{"type":"literal","value":"tauri://move"},{"type":"literal","value":"tauri://close-requested"},{"type":"literal","value":"tauri://focus"},{"type":"literal","value":"tauri://blur"},{"type":"literal","value":"tauri://scale-change"},{"type":"literal","value":"tauri://menu"},{"type":"literal","value":"tauri://file-drop"},{"type":"literal","value":"tauri://file-drop-hover"},{"type":"literal","value":"tauri://file-drop-cancelled"}]},{"type":"intrinsic","name":"string"}],"qualifiedName":"LiteralUnion","package":"type-fest","name":"LiteralUnion"},"declaration":"Type alias EventName","url":"https://tauri.studio/docs/api/js/modules/event#EventName"},{"id":"ts_event_Type_alias_UnlistenFn","name":"UnlistenFn","kind":"Type alias","module":"event","language":"typescript","type":{"type":"reflection","declaration":{"id":74,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"helpers/event.ts","line":41,"character":25}],"signatures":[{"id":75,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}},"declaration":"Type alias UnlistenFn","url":"https://tauri.studio/docs/api/js/modules/event#UnlistenFn"},{"id":"ts_event_Function_emit","name":"emit","kind":"Function","module":"event","language":"typescript","declaration":"function emit(emit: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/event#emit"},{"id":"ts_event_Function_listen","name":"listen","kind":"Function","module":"event","language":"typescript","declaration":"function listen(listen: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/event#listen"},{"id":"ts_event_Function_once","name":"once","kind":"Function","module":"event","language":"typescript","declaration":"function once(once: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/event#once"},{"id":"ts_fs_Namespace_fs","name":"fs","kind":"Namespace","module":"fs","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.fs` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"fs\": {\n        \"all\": true, // enable all FS APIs\n        \"readFile\": true,\n        \"writeFile\": true,\n        \"readDir\": true,\n        \"copyFile\": true,\n        \"createDir\": true,\n        \"removeDir\": true,\n        \"removeFile\": true,\n        \"renameFile\": true\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis module prevents path traversal, not allowing absolute paths or parent dir components\n(i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\nPaths accessed with this API must be relative to one of the [[BaseDirectory | base directories]]\nso if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n\nThe API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n\nThe scope configuration is an array of glob patterns describing folder paths that are allowed.\nFor instance, this scope configuration only allows accessing files on the\n*databases* folder of the [[path.appDir | $APP directory]]:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"fs\": {\n        \"scope\": [\"$APP/databases/*\"]\n      }\n    }\n  }\n}\n```\n\nNotice the use of the `$APP` variable. The value is injected at runtime, resolving to the [[path.appDir | app directory]].\nThe available variables are:\n[[path.audioDir | `$AUDIO`]], [[path.cacheDir | `$CACHE`]], [[path.configDir | `$CONFIG`]], [[path.dataDir | `$DATA`]],\n[[path.localDataDir | `$LOCALDATA`]], [[path.desktopDir | `$DESKTOP`]], [[path.documentDir | `$DOCUMENT`]],\n[[path.downloadDir | `$DOWNLOAD`]], [[path.executableDir | `$EXE`]], [[path.fontDir | `$FONT`]], [[path.homeDir | `$HOME`]],\n[[path.pictureDir | `$PICTURE`]], [[path.publicDir | `$PUBLIC`]], [[path.runtimeDir | `$RUNTIME`]],\n[[path.templateDir | `$TEMPLATE`]], [[path.videoDir | `$VIDEO`]], [[path.resourceDir | `$RESOURCE`]], [[path.appDir | `$APP`]].\n\nTrying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n\nNote that this scope applies to **all** APIs on this module.\n","declaration":"Module fs","url":"https://tauri.studio/docs/api/js/modules/fs#fs"},{"id":"ts_fs_Reference_Dir","name":"Dir","kind":"Reference","module":"fs","language":"typescript","declaration":"type Dir = {\n\tundefined\n}","url":"https://tauri.studio/docs/api/js/modules/fs#Dir"},{"id":"ts_fs_Enumeration_BaseDirectory","name":"BaseDirectory","kind":"Enumeration","module":"fs","language":"typescript","declaration":"enum BaseDirectory {\n\tApp,\n\tAudio,\n\tCache,\n\tConfig,\n\tData,\n\tDesktop,\n\tDocument,\n\tDownload,\n\tExecutable,\n\tFont,\n\tHome,\n\tLocalData,\n\tLog,\n\tPicture,\n\tPublic,\n\tResource,\n\tRuntime,\n\tTemplate,\n\tVideo\n}","url":"https://tauri.studio/docs/api/js/modules/fs#BaseDirectory"},{"id":"ts_fs_Interface_FileEntry","name":"FileEntry","kind":"Interface","module":"fs","language":"typescript","declaration":"interface FileEntry {\n\tchildren,\n\tname,\n\tpath\n}","url":"https://tauri.studio/docs/api/js/modules/fs#FileEntry"},{"id":"ts_fs_Interface_FsBinaryFileOption","name":"FsBinaryFileOption","kind":"Interface","module":"fs","language":"typescript","declaration":"interface FsBinaryFileOption {\n\tcontents,\n\tpath\n}","url":"https://tauri.studio/docs/api/js/modules/fs#FsBinaryFileOption"},{"id":"ts_fs_Interface_FsDirOptions","name":"FsDirOptions","kind":"Interface","module":"fs","language":"typescript","declaration":"interface FsDirOptions {\n\tdir,\n\trecursive\n}","url":"https://tauri.studio/docs/api/js/modules/fs#FsDirOptions"},{"id":"ts_fs_Interface_FsOptions","name":"FsOptions","kind":"Interface","module":"fs","language":"typescript","declaration":"interface FsOptions {\n\tdir\n}","url":"https://tauri.studio/docs/api/js/modules/fs#FsOptions"},{"id":"ts_fs_Interface_FsTextFileOption","name":"FsTextFileOption","kind":"Interface","module":"fs","language":"typescript","declaration":"interface FsTextFileOption {\n\tcontents,\n\tpath\n}","url":"https://tauri.studio/docs/api/js/modules/fs#FsTextFileOption"},{"id":"ts_fs_Function_copyFile","name":"copyFile","kind":"Function","module":"fs","language":"typescript","declaration":"function copyFile(copyFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#copyFile"},{"id":"ts_fs_Function_createDir","name":"createDir","kind":"Function","module":"fs","language":"typescript","declaration":"function createDir(createDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#createDir"},{"id":"ts_fs_Function_readBinaryFile","name":"readBinaryFile","kind":"Function","module":"fs","language":"typescript","declaration":"function readBinaryFile(readBinaryFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#readBinaryFile"},{"id":"ts_fs_Function_readDir","name":"readDir","kind":"Function","module":"fs","language":"typescript","declaration":"function readDir(readDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#readDir"},{"id":"ts_fs_Function_readTextFile","name":"readTextFile","kind":"Function","module":"fs","language":"typescript","declaration":"function readTextFile(readTextFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#readTextFile"},{"id":"ts_fs_Function_removeDir","name":"removeDir","kind":"Function","module":"fs","language":"typescript","declaration":"function removeDir(removeDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#removeDir"},{"id":"ts_fs_Function_removeFile","name":"removeFile","kind":"Function","module":"fs","language":"typescript","declaration":"function removeFile(removeFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#removeFile"},{"id":"ts_fs_Function_renameFile","name":"renameFile","kind":"Function","module":"fs","language":"typescript","declaration":"function renameFile(renameFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#renameFile"},{"id":"ts_fs_Function_writeBinaryFile","name":"writeBinaryFile","kind":"Function","module":"fs","language":"typescript","declaration":"function writeBinaryFile(writeBinaryFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#writeBinaryFile"},{"id":"ts_fs_Function_writeFile","name":"writeFile","kind":"Function","module":"fs","language":"typescript","declaration":"function writeFile(writeFile: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/fs#writeFile"},{"id":"ts_globalShortcut_Namespace_globalShortcut","name":"globalShortcut","kind":"Namespace","module":"globalShortcut","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.globalShortcut` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"globalShortcut\": {\n        \"all\": true // enable all global shortcut APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.","declaration":"Module globalShortcut","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#globalShortcut"},{"id":"ts_globalShortcut_Type_alias_ShortcutHandler","name":"ShortcutHandler","kind":"Type alias","module":"globalShortcut","language":"typescript","type":{"type":"reflection","declaration":{"id":171,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"globalShortcut.ts","line":29,"character":30}],"signatures":[{"id":172,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":173,"name":"shortcut","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}},"declaration":"Type alias ShortcutHandler","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#ShortcutHandler"},{"id":"ts_globalShortcut_Function_isRegistered","name":"isRegistered","kind":"Function","module":"globalShortcut","language":"typescript","declaration":"function isRegistered(isRegistered: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#isRegistered"},{"id":"ts_globalShortcut_Function_register","name":"register","kind":"Function","module":"globalShortcut","language":"typescript","declaration":"function register(register: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#register"},{"id":"ts_globalShortcut_Function_registerAll","name":"registerAll","kind":"Function","module":"globalShortcut","language":"typescript","declaration":"function registerAll(registerAll: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#registerAll"},{"id":"ts_globalShortcut_Function_unregister","name":"unregister","kind":"Function","module":"globalShortcut","language":"typescript","declaration":"function unregister(unregister: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#unregister"},{"id":"ts_globalShortcut_Function_unregisterAll","name":"unregisterAll","kind":"Function","module":"globalShortcut","language":"typescript","declaration":"function unregisterAll(unregisterAll: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/globalShortcut#unregisterAll"},{"id":"ts_http_Namespace_http","name":"http","kind":"Namespace","module":"http","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.http` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"http\": {\n        \"all\": true, // enable all http APIs\n        \"request\": true // enable HTTP request API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis API has a scope configuration that forces you to restrict the URLs and paths that can be accessed using glob patterns.\n\nFor instance, this scope configuration only allows making HTTP requests to the GitHub API for the `tauri-apps` organization:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"http\": {\n        \"scope\": [\"https://api.github.com/repos/tauri-apps/*\"]\n      }\n    }\n  }\n}\n```\nTrying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n","declaration":"Module http","url":"https://tauri.studio/docs/api/js/modules/http#http"},{"id":"ts_http_Enumeration_ResponseType","name":"ResponseType","kind":"Enumeration","module":"http","language":"typescript","declaration":"enum ResponseType {\n\tBinary,\n\tJSON,\n\tText\n}","url":"https://tauri.studio/docs/api/js/modules/http#ResponseType"},{"id":"ts_http_Class_Body","name":"Body","kind":"Class","module":"http","language":"typescript","declaration":"Class Body {\n\tpayload,\n\ttype,\n\tbytes,\n\tform,\n\tjson,\n\ttext\n}","url":"https://tauri.studio/docs/api/js/classes/http.Body"},{"id":"ts_http_Class_Client","name":"Client","kind":"Class","module":"http","language":"typescript","declaration":"Class Client {\n\tid,\n\tdelete,\n\tdrop,\n\tget,\n\tpatch,\n\tpost,\n\tput,\n\trequest\n}","url":"https://tauri.studio/docs/api/js/classes/http.Client"},{"id":"ts_http_Class_Response","name":"Response","kind":"Class","module":"http","language":"typescript","declaration":"Class Response {\n\tdata,\n\theaders,\n\tok,\n\trawHeaders,\n\tstatus,\n\turl\n}","url":"https://tauri.studio/docs/api/js/classes/http.Response"},{"id":"ts_http_Interface_ClientOptions","name":"ClientOptions","kind":"Interface","module":"http","language":"typescript","declaration":"interface ClientOptions {\n\tconnectTimeout,\n\tmaxRedirections\n}","url":"https://tauri.studio/docs/api/js/modules/http#ClientOptions"},{"id":"ts_http_Interface_HttpOptions","name":"HttpOptions","kind":"Interface","module":"http","language":"typescript","declaration":"interface HttpOptions {\n\tbody,\n\theaders,\n\tmethod,\n\tquery,\n\tresponseType,\n\ttimeout,\n\turl\n}","url":"https://tauri.studio/docs/api/js/modules/http#HttpOptions"},{"id":"ts_http_Type_alias_FetchOptions","name":"FetchOptions","kind":"Type alias","module":"http","language":"typescript","type":{"type":"reference","typeArguments":[{"type":"reference","id":196,"name":"HttpOptions"},{"type":"literal","value":"url"}],"qualifiedName":"Omit","package":"typescript","name":"Omit"},"declaration":"Type alias FetchOptions","url":"https://tauri.studio/docs/api/js/modules/http#FetchOptions"},{"id":"ts_http_Type_alias_HttpVerb","name":"HttpVerb","kind":"Type alias","module":"http","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":"GET"},{"type":"literal","value":"POST"},{"type":"literal","value":"PUT"},{"type":"literal","value":"DELETE"},{"type":"literal","value":"PATCH"},{"type":"literal","value":"HEAD"},{"type":"literal","value":"OPTIONS"},{"type":"literal","value":"CONNECT"},{"type":"literal","value":"TRACE"}]},"declaration":"Type alias HttpVerb","url":"https://tauri.studio/docs/api/js/modules/http#HttpVerb"},{"id":"ts_http_Type_alias_Part","name":"Part","kind":"Type alias","module":"http","language":"typescript","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","qualifiedName":"Uint8Array","package":"typescript","name":"Uint8Array"}]},"declaration":"Type alias Part","url":"https://tauri.studio/docs/api/js/modules/http#Part"},{"id":"ts_http_Type_alias_RequestOptions","name":"RequestOptions","kind":"Type alias","module":"http","language":"typescript","type":{"type":"reference","typeArguments":[{"type":"reference","id":196,"name":"HttpOptions"},{"type":"union","types":[{"type":"literal","value":"method"},{"type":"literal","value":"url"}]}],"qualifiedName":"Omit","package":"typescript","name":"Omit"},"declaration":"Type alias RequestOptions","url":"https://tauri.studio/docs/api/js/modules/http#RequestOptions"},{"id":"ts_http_Function_fetch","name":"fetch","kind":"Function","module":"http","language":"typescript","declaration":"function fetch(fetch: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/http#fetch"},{"id":"ts_http_Function_getClient","name":"getClient","kind":"Function","module":"http","language":"typescript","declaration":"function getClient(getClient: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/http#getClient"},{"id":"ts_notification_Namespace_notification","name":"notification","kind":"Namespace","module":"notification","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.notification` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"notification\": {\n        \"all\": true // enable all notification APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.","declaration":"Module notification","url":"https://tauri.studio/docs/api/js/modules/notification#notification"},{"id":"ts_notification_Interface_Options","name":"Options","kind":"Interface","module":"notification","language":"typescript","declaration":"interface Options {\n\tbody,\n\ticon,\n\ttitle\n}","url":"https://tauri.studio/docs/api/js/modules/notification#Options"},{"id":"ts_notification_Type_alias_Permission","name":"Permission","kind":"Type alias","module":"notification","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":"granted"},{"type":"literal","value":"denied"},{"type":"literal","value":"default"}]},"declaration":"Type alias Permission","url":"https://tauri.studio/docs/api/js/modules/notification#Permission"},{"id":"ts_notification_Function_isPermissionGranted","name":"isPermissionGranted","kind":"Function","module":"notification","language":"typescript","declaration":"function isPermissionGranted(isPermissionGranted: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/notification#isPermissionGranted"},{"id":"ts_notification_Function_requestPermission","name":"requestPermission","kind":"Function","module":"notification","language":"typescript","declaration":"function requestPermission(requestPermission: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/notification#requestPermission"},{"id":"ts_notification_Function_sendNotification","name":"sendNotification","kind":"Function","module":"notification","language":"typescript","declaration":"function sendNotification(sendNotification: void) { ... }","url":"https://tauri.studio/docs/api/js/modules/notification#sendNotification"},{"id":"ts_os_Namespace_os","name":"os","kind":"Namespace","module":"os","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.os` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"os\": {\n        \"all\": true, // enable all Os APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.","declaration":"Module os","url":"https://tauri.studio/docs/api/js/modules/os#os"},{"id":"ts_os_Variable_EOL","name":"EOL","kind":"Variable","module":"os","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":"\r\n"},{"type":"literal","value":"\n"}]},"declaration":"Variable EOL","url":"https://tauri.studio/docs/api/js/modules/os#EOL"},{"id":"ts_os_Function_arch","name":"arch","kind":"Function","module":"os","language":"typescript","declaration":"function arch(arch: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/os#arch"},{"id":"ts_os_Function_platform","name":"platform","kind":"Function","module":"os","language":"typescript","declaration":"function platform(platform: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/os#platform"},{"id":"ts_os_Function_tempdir","name":"tempdir","kind":"Function","module":"os","language":"typescript","declaration":"function tempdir(tempdir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/os#tempdir"},{"id":"ts_os_Function_type","name":"type","kind":"Function","module":"os","language":"typescript","declaration":"function type(type: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/os#type"},{"id":"ts_os_Function_version","name":"version","kind":"Function","module":"os","language":"typescript","declaration":"function version(version: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/os#version"},{"id":"ts_path_Namespace_path","name":"path","kind":"Namespace","module":"path","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.path` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"path\": {\n        \"all\": true, // enable all Path APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.","declaration":"Module path","url":"https://tauri.studio/docs/api/js/modules/path#path"},{"id":"ts_path_Reference_BaseDirectory","name":"BaseDirectory","kind":"Reference","module":"path","language":"typescript","declaration":"type BaseDirectory = {\n\tundefined\n}","url":"https://tauri.studio/docs/api/js/modules/path#BaseDirectory"},{"id":"ts_path_Variable_delimiter","name":"delimiter","kind":"Variable","module":"path","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":";"},{"type":"literal","value":":"}]},"declaration":"Variable delimiter","url":"https://tauri.studio/docs/api/js/modules/path#delimiter"},{"id":"ts_path_Variable_sep","name":"sep","kind":"Variable","module":"path","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":"\\"},{"type":"literal","value":"/"}]},"declaration":"Variable sep","url":"https://tauri.studio/docs/api/js/modules/path#sep"},{"id":"ts_path_Function_appDir","name":"appDir","kind":"Function","module":"path","language":"typescript","declaration":"function appDir(appDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#appDir"},{"id":"ts_path_Function_audioDir","name":"audioDir","kind":"Function","module":"path","language":"typescript","declaration":"function audioDir(audioDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#audioDir"},{"id":"ts_path_Function_basename","name":"basename","kind":"Function","module":"path","language":"typescript","declaration":"function basename(basename: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#basename"},{"id":"ts_path_Function_cacheDir","name":"cacheDir","kind":"Function","module":"path","language":"typescript","declaration":"function cacheDir(cacheDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#cacheDir"},{"id":"ts_path_Function_configDir","name":"configDir","kind":"Function","module":"path","language":"typescript","declaration":"function configDir(configDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#configDir"},{"id":"ts_path_Function_dataDir","name":"dataDir","kind":"Function","module":"path","language":"typescript","declaration":"function dataDir(dataDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#dataDir"},{"id":"ts_path_Function_desktopDir","name":"desktopDir","kind":"Function","module":"path","language":"typescript","declaration":"function desktopDir(desktopDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#desktopDir"},{"id":"ts_path_Function_dirname","name":"dirname","kind":"Function","module":"path","language":"typescript","declaration":"function dirname(dirname: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#dirname"},{"id":"ts_path_Function_documentDir","name":"documentDir","kind":"Function","module":"path","language":"typescript","declaration":"function documentDir(documentDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#documentDir"},{"id":"ts_path_Function_downloadDir","name":"downloadDir","kind":"Function","module":"path","language":"typescript","declaration":"function downloadDir(downloadDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#downloadDir"},{"id":"ts_path_Function_executableDir","name":"executableDir","kind":"Function","module":"path","language":"typescript","declaration":"function executableDir(executableDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#executableDir"},{"id":"ts_path_Function_extname","name":"extname","kind":"Function","module":"path","language":"typescript","declaration":"function extname(extname: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#extname"},{"id":"ts_path_Function_fontDir","name":"fontDir","kind":"Function","module":"path","language":"typescript","declaration":"function fontDir(fontDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#fontDir"},{"id":"ts_path_Function_homeDir","name":"homeDir","kind":"Function","module":"path","language":"typescript","declaration":"function homeDir(homeDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#homeDir"},{"id":"ts_path_Function_isAbsolute","name":"isAbsolute","kind":"Function","module":"path","language":"typescript","declaration":"function isAbsolute(isAbsolute: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#isAbsolute"},{"id":"ts_path_Function_join","name":"join","kind":"Function","module":"path","language":"typescript","declaration":"function join(join: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#join"},{"id":"ts_path_Function_localDataDir","name":"localDataDir","kind":"Function","module":"path","language":"typescript","declaration":"function localDataDir(localDataDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#localDataDir"},{"id":"ts_path_Function_logDir","name":"logDir","kind":"Function","module":"path","language":"typescript","declaration":"function logDir(logDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#logDir"},{"id":"ts_path_Function_normalize","name":"normalize","kind":"Function","module":"path","language":"typescript","declaration":"function normalize(normalize: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#normalize"},{"id":"ts_path_Function_pictureDir","name":"pictureDir","kind":"Function","module":"path","language":"typescript","declaration":"function pictureDir(pictureDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#pictureDir"},{"id":"ts_path_Function_publicDir","name":"publicDir","kind":"Function","module":"path","language":"typescript","declaration":"function publicDir(publicDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#publicDir"},{"id":"ts_path_Function_resolve","name":"resolve","kind":"Function","module":"path","language":"typescript","declaration":"function resolve(resolve: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#resolve"},{"id":"ts_path_Function_resourceDir","name":"resourceDir","kind":"Function","module":"path","language":"typescript","declaration":"function resourceDir(resourceDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#resourceDir"},{"id":"ts_path_Function_runtimeDir","name":"runtimeDir","kind":"Function","module":"path","language":"typescript","declaration":"function runtimeDir(runtimeDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#runtimeDir"},{"id":"ts_path_Function_templateDir","name":"templateDir","kind":"Function","module":"path","language":"typescript","declaration":"function templateDir(templateDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#templateDir"},{"id":"ts_path_Function_videoDir","name":"videoDir","kind":"Function","module":"path","language":"typescript","declaration":"function videoDir(videoDir: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/path#videoDir"},{"id":"ts_process_Namespace_process","name":"process","kind":"Namespace","module":"process","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.process` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module process","url":"https://tauri.studio/docs/api/js/modules/process#process"},{"id":"ts_process_Function_exit","name":"exit","kind":"Function","module":"process","language":"typescript","declaration":"function exit(exit: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/process#exit"},{"id":"ts_process_Function_relaunch","name":"relaunch","kind":"Function","module":"process","language":"typescript","declaration":"function relaunch(relaunch: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/process#relaunch"},{"id":"ts_shell_Namespace_shell","name":"shell","kind":"Namespace","module":"shell","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.shell` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"shell\": {\n        \"all\": true, // enable all shell APIs\n        \"execute\": true, // enable process spawn APIs\n        \"sidecar\": true, // enable spawning sidecars\n        \"open\": true // enable opening files/URLs using the default program\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n## Security\n\nThis API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n\n### Restricting access to the [[`open`]] API\n\nOn the allowlist, `open: true` means that the [[open]] API can be used with any URL,\nas the argument is validated with the `^https?://` regex.\nYou can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n\n### Restricting access to the [[`Command`]] APIs\n\nThe `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\nEach CLI is a configuration object `{ name: string, command: string, sidecar?: bool, args?: boolean | Arg[] }`.\n\n- `name`: the unique identifier of the command, passed to the [[Command.constructor | Command constructor]].\nIf it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n- `command`: the program that is executed on this configuration. If it's a sidecar, it must be the same as `name`.\n- `sidecar`: whether the object configures a sidecar or a system program.\n- `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n  - `true` means that any argument list is allowed.\n  - `false` means that no arguments are allowed.\n  - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n    or a `{ validator: string }` that defines a regex validating the argument value.\n\n#### Example scope configuration\n\nCLI: `git commit -m \"the commit message\"`\n\nConfiguration:\n```json\n{\n  \"scope\": {\n    \"name\": \"run-git-commit\",\n    \"command\": \"git\",\n    \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n  }\n}\n```\nUsage:\n```typescript\nimport { Command } from '@tauri-apps/api/shell'\nnew Command('run-git-commit', ['commit', '-m', 'the commit message'])\n```\n\nTrying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n","declaration":"Module shell","url":"https://tauri.studio/docs/api/js/modules/shell#shell"},{"id":"ts_shell_Class_Child","name":"Child","kind":"Class","module":"shell","language":"typescript","declaration":"Class Child {\n\tconstructor,\n\tpid,\n\tkill,\n\twrite\n}","url":"https://tauri.studio/docs/api/js/classes/shell.Child"},{"id":"ts_shell_Class_Command","name":"Command","kind":"Class","module":"shell","language":"typescript","commentTags":[{"tag":"example","text":"\n```typescript\nconst command = new Command('node')\ncommand.on('close', data => {\n  console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n})\ncommand.on('error', error => console.error(`command error: \"${error}\"`))\ncommand.stdout.on('data', line => console.log(`command stdout: \"${line}\"`))\ncommand.stderr.on('data', line => console.log(`command stderr: \"${line}\"`))\n\nconst child = await command.spawn()\nconsole.log('pid:', child.pid)\n```\n"}],"declaration":"Class Command {\n\tconstructor,\n\tstderr,\n\tstdout,\n\texecute,\n\ton,\n\tspawn,\n\tsidecar\n}","url":"https://tauri.studio/docs/api/js/classes/shell.Command"},{"id":"ts_shell_Class_EventEmitter","name":"EventEmitter","kind":"Class","module":"shell","language":"typescript","declaration":"Class EventEmitter {\n\tconstructor,\n\ton\n}","url":"https://tauri.studio/docs/api/js/classes/shell.EventEmitter"},{"id":"ts_shell_Interface_ChildProcess","name":"ChildProcess","kind":"Interface","module":"shell","language":"typescript","declaration":"interface ChildProcess {\n\tcode,\n\tsignal,\n\tstderr,\n\tstdout\n}","url":"https://tauri.studio/docs/api/js/modules/shell#ChildProcess"},{"id":"ts_shell_Interface_SpawnOptions","name":"SpawnOptions","kind":"Interface","module":"shell","language":"typescript","declaration":"interface SpawnOptions {\n\tcwd,\n\tenv\n}","url":"https://tauri.studio/docs/api/js/modules/shell#SpawnOptions"},{"id":"ts_shell_Function_open","name":"open","kind":"Function","module":"shell","language":"typescript","declaration":"function open(open: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/shell#open"},{"id":"ts_tauri_Namespace_tauri","name":"tauri","kind":"Namespace","module":"tauri","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.tauri` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module tauri","url":"https://tauri.studio/docs/api/js/modules/tauri#tauri"},{"id":"ts_tauri_Interface_InvokeArgs","name":"InvokeArgs","kind":"Interface","module":"tauri","language":"typescript","declaration":"interface InvokeArgs {\n\tundefined\n}","url":"https://tauri.studio/docs/api/js/modules/tauri#InvokeArgs"},{"id":"ts_tauri_Function_convertFileSrc","name":"convertFileSrc","kind":"Function","module":"tauri","language":"typescript","declaration":"function convertFileSrc(convertFileSrc: string) { ... }","url":"https://tauri.studio/docs/api/js/modules/tauri#convertFileSrc"},{"id":"ts_tauri_Function_invoke","name":"invoke","kind":"Function","module":"tauri","language":"typescript","declaration":"function invoke(invoke: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/tauri#invoke"},{"id":"ts_tauri_Function_transformCallback","name":"transformCallback","kind":"Function","module":"tauri","language":"typescript","declaration":"function transformCallback(transformCallback: number) { ... }","url":"https://tauri.studio/docs/api/js/modules/tauri#transformCallback"},{"id":"ts_updater_Namespace_updater","name":"updater","kind":"Namespace","module":"updater","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.updater` when `tauri.conf.json > build > withGlobalTauri` is set to true.","declaration":"Module updater","url":"https://tauri.studio/docs/api/js/modules/updater#updater"},{"id":"ts_updater_Interface_UpdateManifest","name":"UpdateManifest","kind":"Interface","module":"updater","language":"typescript","declaration":"interface UpdateManifest {\n\tbody,\n\tdate,\n\tversion\n}","url":"https://tauri.studio/docs/api/js/modules/updater#UpdateManifest"},{"id":"ts_updater_Interface_UpdateResult","name":"UpdateResult","kind":"Interface","module":"updater","language":"typescript","declaration":"interface UpdateResult {\n\tmanifest,\n\tshouldUpdate\n}","url":"https://tauri.studio/docs/api/js/modules/updater#UpdateResult"},{"id":"ts_updater_Interface_UpdateStatusResult","name":"UpdateStatusResult","kind":"Interface","module":"updater","language":"typescript","declaration":"interface UpdateStatusResult {\n\terror,\n\tstatus\n}","url":"https://tauri.studio/docs/api/js/modules/updater#UpdateStatusResult"},{"id":"ts_updater_Type_alias_UpdateStatus","name":"UpdateStatus","kind":"Type alias","module":"updater","language":"typescript","type":{"type":"union","types":[{"type":"literal","value":"PENDING"},{"type":"literal","value":"ERROR"},{"type":"literal","value":"DONE"},{"type":"literal","value":"UPTODATE"}]},"declaration":"Type alias UpdateStatus","url":"https://tauri.studio/docs/api/js/modules/updater#UpdateStatus"},{"id":"ts_updater_Function_checkUpdate","name":"checkUpdate","kind":"Function","module":"updater","language":"typescript","declaration":"function checkUpdate(checkUpdate: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/updater#checkUpdate"},{"id":"ts_updater_Function_installUpdate","name":"installUpdate","kind":"Function","module":"updater","language":"typescript","declaration":"function installUpdate(installUpdate: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/updater#installUpdate"},{"id":"ts_window_Namespace_window","name":"window","kind":"Namespace","module":"window","language":"typescript","comment":"This package is also accessible with `window.__TAURI__.window` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"window\": {\n        \"all\": true, // enable all window APIs\n        \"create\": true, // enable window creation\n        \"center\": true,\n        \"requestUserAttention\": true,\n        \"setResizable\": true,\n        \"setTitle\": true,\n        \"maximize\": true,\n        \"unmaximize\": true,\n        \"minimize\": true,\n        \"unminimize\": true,\n        \"show\": true,\n        \"hide\": true,\n        \"close\": true,\n        \"setDecorations\": true,\n        \"setAlwaysOnTop\": true,\n        \"setSize\": true,\n        \"setMinSize\": true,\n        \"setMaxSize\": true,\n        \"setPosition\": true,\n        \"setFullscreen\": true,\n        \"setFocus\": true,\n        \"setIcon\": true,\n        \"setSkipTaskbar\": true,\n        \"startDragging\": true,\n        \"print\": true\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n# Window events\n\nEvents can be listened using `appWindow.listen`:\n```typescript\nimport { appWindow } from '@tauri-apps/api/window'\nappWindow.listen('tauri://move', ({ event, payload }) => {\n  const { x, y } = payload // payload here is a `PhysicalPosition`\n})\n```\n\nWindow-specific events emitted by the backend:\n\n#### 'tauri://resize'\nEmitted when the size of the window has changed.\n*EventPayload*:\n```typescript\ntype ResizePayload = PhysicalSize\n```\n\n#### 'tauri://move'\nEmitted when the position of the window has changed.\n*EventPayload*:\n```typescript\ntype MovePayload = PhysicalPosition\n```\n\n#### 'tauri://close-requested'\nEmitted when the user requests the window to be closed.\nIf a listener is registered for this event, Tauri won't close the window so you must call `appWindow.close()` manually.\n\n#### 'tauri://focus'\nEmitted when the window gains focus.\n\n#### 'tauri://blur'\nEmitted when the window loses focus.\n\n#### 'tauri://scale-change'\nEmitted when the window's scale factor has changed.\nThe following user actions can cause DPI changes:\n- Changing the display's resolution.\n- Changing the display's scale factor (e.g. in Control Panel on Windows).\n- Moving the window to a display with a different scale factor.\n*Event payload*:\n```typescript\ninterface ScaleFactorChanged {\n  scaleFactor: number\n  size: PhysicalSize\n}\n```\n\n#### 'tauri://menu'\nEmitted when a menu item is clicked.\n*EventPayload*:\n```typescript\ntype MenuClicked = string\n```\n","declaration":"Module window","url":"https://tauri.studio/docs/api/js/modules/window#window"},{"id":"ts_window_Enumeration_UserAttentionType","name":"UserAttentionType","kind":"Enumeration","module":"window","language":"typescript","declaration":"enum UserAttentionType {\n\tCritical,\n\tInformational\n}","url":"https://tauri.studio/docs/api/js/modules/window#UserAttentionType"},{"id":"ts_window_Class_LogicalPosition","name":"LogicalPosition","kind":"Class","module":"window","language":"typescript","declaration":"Class LogicalPosition {\n\tconstructor,\n\ttype,\n\tx,\n\ty\n}","url":"https://tauri.studio/docs/api/js/classes/window.LogicalPosition"},{"id":"ts_window_Class_LogicalSize","name":"LogicalSize","kind":"Class","module":"window","language":"typescript","declaration":"Class LogicalSize {\n\tconstructor,\n\theight,\n\ttype,\n\twidth\n}","url":"https://tauri.studio/docs/api/js/classes/window.LogicalSize"},{"id":"ts_window_Class_PhysicalPosition","name":"PhysicalPosition","kind":"Class","module":"window","language":"typescript","declaration":"Class PhysicalPosition {\n\tconstructor,\n\ttype,\n\tx,\n\ty,\n\ttoLogical\n}","url":"https://tauri.studio/docs/api/js/classes/window.PhysicalPosition"},{"id":"ts_window_Class_PhysicalSize","name":"PhysicalSize","kind":"Class","module":"window","language":"typescript","declaration":"Class PhysicalSize {\n\tconstructor,\n\theight,\n\ttype,\n\twidth,\n\ttoLogical\n}","url":"https://tauri.studio/docs/api/js/classes/window.PhysicalSize"},{"id":"ts_window_Class_WebviewWindow","name":"WebviewWindow","kind":"Class","module":"window","language":"typescript","commentTags":[{"tag":"example","text":"\n```typescript\n// loading embedded asset:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'path/to/page.html'\n})\n// alternatively, load a remote URL:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'https://github.com/tauri-apps/tauri'\n})\n\nwebview.once('tauri://created', function () {\n // webview window successfully created\n})\nwebview.once('tauri://error', function (e) {\n // an error happened creating the webview window\n})\n\n// emit an event to the backend\nawait webview.emit(\"some event\", \"data\")\n// listen to an event from the backend\nconst unlisten = await webview.listen(\"event name\", e => {})\nunlisten()\n```\n"}],"declaration":"Class WebviewWindow {\n\tconstructor,\n\tlabel,\n\tlisteners,\n\t_handleTauriEvent,\n\tcenter,\n\tclose,\n\temit,\n\thide,\n\tinnerPosition,\n\tinnerSize,\n\tisDecorated,\n\tisFullscreen,\n\tisMaximized,\n\tisResizable,\n\tisVisible,\n\tlisten,\n\tmaximize,\n\tminimize,\n\tonce,\n\touterPosition,\n\touterSize,\n\trequestUserAttention,\n\tscaleFactor,\n\tsetAlwaysOnTop,\n\tsetDecorations,\n\tsetFocus,\n\tsetFullscreen,\n\tsetIcon,\n\tsetMaxSize,\n\tsetMinSize,\n\tsetPosition,\n\tsetResizable,\n\tsetSize,\n\tsetSkipTaskbar,\n\tsetTitle,\n\tshow,\n\tstartDragging,\n\ttoggleMaximize,\n\tunmaximize,\n\tunminimize,\n\tgetByLabel\n}","url":"https://tauri.studio/docs/api/js/classes/window.WebviewWindow"},{"id":"ts_window_Class_WebviewWindowHandle","name":"WebviewWindowHandle","kind":"Class","module":"window","language":"typescript","declaration":"Class WebviewWindowHandle {\n\tconstructor,\n\tlabel,\n\tlisteners,\n\t_handleTauriEvent,\n\temit,\n\tlisten,\n\tonce\n}","url":"https://tauri.studio/docs/api/js/classes/window.WebviewWindowHandle"},{"id":"ts_window_Class_WindowManager","name":"WindowManager","kind":"Class","module":"window","language":"typescript","declaration":"Class WindowManager {\n\tconstructor,\n\tlabel,\n\tlisteners,\n\t_handleTauriEvent,\n\tcenter,\n\tclose,\n\temit,\n\thide,\n\tinnerPosition,\n\tinnerSize,\n\tisDecorated,\n\tisFullscreen,\n\tisMaximized,\n\tisResizable,\n\tisVisible,\n\tlisten,\n\tmaximize,\n\tminimize,\n\tonce,\n\touterPosition,\n\touterSize,\n\trequestUserAttention,\n\tscaleFactor,\n\tsetAlwaysOnTop,\n\tsetDecorations,\n\tsetFocus,\n\tsetFullscreen,\n\tsetIcon,\n\tsetMaxSize,\n\tsetMinSize,\n\tsetPosition,\n\tsetResizable,\n\tsetSize,\n\tsetSkipTaskbar,\n\tsetTitle,\n\tshow,\n\tstartDragging,\n\ttoggleMaximize,\n\tunmaximize,\n\tunminimize\n}","url":"https://tauri.studio/docs/api/js/classes/window.WindowManager"},{"id":"ts_window_Interface_Monitor","name":"Monitor","kind":"Interface","module":"window","language":"typescript","declaration":"interface Monitor {\n\tname,\n\tposition,\n\tscaleFactor,\n\tsize\n}","url":"https://tauri.studio/docs/api/js/modules/window#Monitor"},{"id":"ts_window_Interface_WindowOptions","name":"WindowOptions","kind":"Interface","module":"window","language":"typescript","declaration":"interface WindowOptions {\n\talwaysOnTop,\n\tcenter,\n\tdecorations,\n\tfileDropEnabled,\n\tfocus,\n\tfullscreen,\n\theight,\n\tmaxHeight,\n\tmaxWidth,\n\tmaximized,\n\tminHeight,\n\tminWidth,\n\tresizable,\n\tskipTaskbar,\n\ttitle,\n\ttransparent,\n\turl,\n\tvisible,\n\twidth,\n\tx,\n\ty\n}","url":"https://tauri.studio/docs/api/js/modules/window#WindowOptions"},{"id":"ts_window_Variable_appWindow","name":"appWindow","kind":"Variable","module":"window","language":"typescript","type":{"type":"reference","id":495,"name":"WebviewWindow"},"declaration":"Variable appWindow","url":"https://tauri.studio/docs/api/js/modules/window#appWindow"},{"id":"ts_window_Function_availableMonitors","name":"availableMonitors","kind":"Function","module":"window","language":"typescript","declaration":"function availableMonitors(availableMonitors: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/window#availableMonitors"},{"id":"ts_window_Function_currentMonitor","name":"currentMonitor","kind":"Function","module":"window","language":"typescript","declaration":"function currentMonitor(currentMonitor: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/window#currentMonitor"},{"id":"ts_window_Function_getAll","name":"getAll","kind":"Function","module":"window","language":"typescript","declaration":"function getAll(getAll: undefined) { ... }","url":"https://tauri.studio/docs/api/js/modules/window#getAll"},{"id":"ts_window_Function_getCurrent","name":"getCurrent","kind":"Function","module":"window","language":"typescript","declaration":"function getCurrent(getCurrent: WebviewWindow) { ... }","url":"https://tauri.studio/docs/api/js/modules/window#getCurrent"},{"id":"ts_window_Function_primaryMonitor","name":"primaryMonitor","kind":"Function","module":"window","language":"typescript","declaration":"function primaryMonitor(primaryMonitor: Promise) { ... }","url":"https://tauri.studio/docs/api/js/modules/window#primaryMonitor"}]