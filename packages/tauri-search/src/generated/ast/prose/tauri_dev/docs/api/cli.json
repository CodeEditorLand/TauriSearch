{"filename":"cli.md","filepath":"docs/api","hash":42,"frontmatter":{"id":"cli","title":"CLI"},"text":"\nimport Command from '@theme/Command'\nimport Alert from '@theme/Alert'\n\n\nThe tauri.js cli is composed in TypeScript and published as JavaScript. \n\n## `info`\n\n<Command name=\"info\" />\n\n```\n  Description\n    Returns the known state of tauri dependencies and configuration\n```\n\nIt shows a concise list of information about the environment, Rust, Node.js and their versions as well as some relevant configurations.\n\n<Alert title=\"Note\" icon=\"info-alt\">\nThis command is pretty helpful when you need to have a quick overview of your application. When requesting some help, it can be useful that you share this report with us.\n</Alert>\n\n## `init`\n\n<Command name=\"init\" />\n\n```\n  Description\n    Inits the Tauri template. If Tauri cannot find the src-tauri/tauri.conf.json\n    it will create one.\n  Usage\n    $ tauri init\n  Options\n    --help, -h        Displays this message\n    --force, -f       Force init to overwrite [conf|template|all]\n    --log, -l         Logging [boolean]\n    --directory, -d   Set target directory for init\n    --tauriPath, -t   Path of the Tauri project to use (relative to the cwd)\n```\n\n## `dev`\n\n<Command name=\"dev\" />\n\n```\n  Description\n    Tauri dev.\n  Usage\n    $ tauri dev\n  Options\n    --help, -h     Displays this message\n```\n\nThis command will open the WebView in development mode. It makes use of the `build.devPath` property from your `src-tauri/tauri.conf.json` file.\n\nIf you have entered a command to the `build.beforeDevCommand` property, this one will be executed before the `dev` command.\n\n<a href=\"/docs/api/config#build\">See more about the configuration.</a><br/><br/>\n\n<Alert title=\"Troubleshooting\" type=\"warning\" icon=\"alert\">\n\nIf you're not using `build.beforeDevCommand`, make sure your `build.devPath` is correct and, if using a development server, that it's started before using this command.\n</Alert>\n\n## `deps`\n\n<Command name=\"deps update\" />\n\n```sh\n  Description\n    Tauri dependency management script\n  Usage\n    $ tauri deps [install|update]\n```\n\n\n## `build`\n\n<Command name=\"build\" />\n\n```\n  Description\n    Tauri build.\n  Usage\n    $ tauri build\n  Options\n    --help, -h     Displays this message\n    --debug, -d    Build a tauri app with debugging\n```\n\nThis command will bundle your application, either in production mode or debug mode if you used the `--debug` flag. It makes use of the `build.distDir` property from your `src-tauri/tauri.conf.json` file.\n\nIf you have entered a command to the `build.beforeBuildCommand` property, this one will be executed before the `build` command.\n\n<a href=\"/docs/api/config#build\">See more about the configuration.</a>\n\n## `icon`\n\n<Command name=\"icon\" />\n\n```\n  Description\n    Create all the icons you need for your Tauri app.\n\n  Usage\n    $ tauri icon\n\n  Options\n    --help, -h          Displays this message\n    --log, -l            Logging [boolean]\n    --icon, -i           Source icon (png, 1240x1240 with transparency)\n    --target, -t         Target folder (default: 'src-tauri/icons')\n    --compression, -c    Compression type [pngquant|optipng|zopfli]\n```\n\nThis command will generate a set of icons, based on the source icon you've entered.\n\n## `version`\n\n<Command name=\"--version\" />\n\n```\n  Description\n    Returns the current version of tauri\n```\n\nThis command will show the current version of Tauri.\n\n## CLI usage\n\nSee more about the usage through this [complete guide](/docs/usage/development/integration).\n\n","h1":[],"h2":[{"content":"info","type":"inlineCode"},{"content":"init","type":"inlineCode"},{"content":"dev","type":"inlineCode"},{"content":"deps","type":"inlineCode"},{"content":"build","type":"inlineCode"},{"content":"icon","type":"inlineCode"},{"content":"version","type":"inlineCode"},{"content":"CLI usage","type":"text"}],"h3":[],"hasCodeBlock":true,"programmingLanguages":[null,"sh"],"otherSymbols":["text","inlineCode","link"]}