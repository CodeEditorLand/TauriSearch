{"filename":"setup-linux.md","filepath":"docs/getting-started","hash":42,"frontmatter":{"title":"Setup for Linux"},"text":"\nimport Alert from '@theme/Alert'\nimport Icon from '@theme/Icon'\nimport { Intro } from '@theme/SetupDocs'\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Intro />\n\n## 1. System Dependencies&nbsp;<Icon title=\"alert\" color=\"danger\"/>\n\n<Tabs\ndefaultValue=\"debian\"\nvalues={[\n{label: 'Debian', value: 'debian'},\n{label: 'Arch', value: 'arch'},\n{label: 'Fedora', value: 'fedora'},\n]}>\n<TabItem value=\"debian\">\n\n```sh\n$ sudo apt update && sudo apt install libwebkit2gtk-4.0-dev \\\n    build-essential \\\n    curl \\\n    wget \\\n    libssl-dev \\\n    libgtk-3-dev \\\n    libappindicator3-dev \\\n    patchelf \\\n    librsvg2-dev\n```\n\n</TabItem>\n<TabItem value=\"arch\">\n\n```sh\n$ sudo pacman -Syy && sudo pacman -S  webkit2gtk \\\n    base-devel \\\n    curl \\\n    wget \\\n    openssl \\\n    appmenu-gtk-module \\\n    gtk3 \\\n    libappindicator-gtk3 \\\n    patchelf \\\n    librsvg \\\n    libvips\n```\n\n</TabItem>\n<TabItem value=\"fedora\">\n\n```sh\n$ sudo dnf check-update && sudo dnf install webkit2gtk3-devel.x86_64 \\\n    openssl-devel \\\n    curl \\\n    wget \\\n    libappindicator-gtk3 \\ #\n    patchelf \\\n    librsvg2-devel \\\n    && sudo dnf group install \"C Development Tools and Libraries\"\n```\n\n</TabItem>\n</Tabs>\n\n### Optional dependencies:\n\n- `libappindicator`: needed to use the system tray feature.\n- `patchelf` and `librsvg`: needed to bundle `AppImage`.\n\n## 2. Node.js Runtime and Package Manager&nbsp;<Icon title=\"control-skip-forward\" color=\"warning\"/>\n\n### Node.js (npm included)\n\nWe recommend using nvm to manage your Node.js runtime. It allows you to easily switch versions and update Node.js.\n\n```sh\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n```\n\n<Alert title=\"Note\">\nWe have audited this bash script, and it does what it says it is supposed to do. Nevertheless, before blindly curl-bashing a script, it is always wise to look at it first. Here is the file as a mere <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh\" target=\"_blank\">download link</a>.\n</Alert>\n\nOnce nvm is installed, close and reopen your terminal, then install the latest version of Node.js and npm:\n\n```sh\n$ nvm install node --latest-npm\n$ nvm use node\n```\n\nIf you have any problems with nvm, please consult their <a href=\"https://github.com/nvm-sh/nvm\">project readme</a>.\n\n### Optional Node.js Package Manager\n\nYou may want to use an alternative to npm:\n\n- <a href=\"https://yarnpkg.com/getting-started\" target=\"_blank\">Yarn</a>, is preferred by Tauri's team\n- <a href=\"https://pnpm.js.org/en/installation\" target=\"_blank\">pnpm</a>\n\n## 3. Rustc and Cargo Package Manager&nbsp;<Icon title=\"control-skip-forward\" color=\"warning\"/>\n\nThe following command will install <a href=\"https://rustup.rs/\" target=\"_blank\">rustup</a>, the official installer for <a href=\"https://www.rust-lang.org/\" target=\"_blank\">Rust</a>.\n\n```bash\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n<Alert title=\"Note\">\nWe have audited this bash script, and it does what it says it is supposed to do. Nevertheless, before blindly curl-bashing a script, it is always wise to look at it first. Here is the file as a mere <a href=\"https://sh.rustup.rs\" target=\"_blank\">download link</a>.\n</Alert>\n\nTo make sure that Rust has been installed successfully, run the following command:\n\n```sh\n$ rustc --version\nlatest update on 2019-12-19, rust version 1.40.0\n```\n\nYou may need to restart your terminal if the command does not work.\n\n## 4. For Windows Subsystem for Linux (WSL) Users&nbsp;<Icon title=\"info-alt\" color=\"info\"/>\n\nIn order to run a graphical application with WSL, you need to download **one** of these X servers: Xming, Cygwin X, and vcXsrv.\nSince vcXsrv has been used internally, it's the one we recommend to install.\n\n### WSL Version 1\n\nOpen the X server and then run `export DISPLAY=:0` in the terminal. You should now be able to run any graphical application via the terminal.\n\n### WSL Version 2\n\nYou'll need to run a command that is slightly more complex than WSL 1: `export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0` and you need to add `-ac` to the X server as an argument. Note: if for some reason this command doesn't work you can use an alternative command such as: `export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | sed 's/.* //g'):0` or you can manually find the Address using `cat /etc/resolve.conf | grep nameserver`.\n\n<Alert type=\"info\" title=\"Note\">\n\nDon't forget that you'll have to use the \"export\" command anytime you want to use a graphical application, for each newly opened terminal.\n\nYou can download some examples to try with `sudo apt-get install x11-apps`. xeyes is always a good one. It can be handy when troubleshooting WSL issues.\n</Alert>\n\n## Continue\n\nNow that you have set up the Linux-specific dependencies for Tauri, learn how to [add Tauri to your project](/docs/usage/development/integration).\n","h1":[],"h2":[{"content":"1","type":"text"},{"content":"2","type":"text"},{"content":"3","type":"text"},{"content":"4","type":"text"},{"content":"Continue","type":"text"}],"h3":[{"content":"Optional dependencies","type":"text"},{"content":"Node","type":"text"},{"content":"Optional Node","type":"text"},{"content":"WSL Version 1","type":"text"},{"content":"WSL Version 2","type":"text"}],"hasCodeBlock":true,"programmingLanguages":["sh","bash"],"otherSymbols":["text","list","link","strong","inlineCode"]}