{"filename":"cli.md","filepath":"docs/usage/guides","hash":42,"frontmatter":{"title":"Make your own CLI"},"text":"\nimport Alert from '@theme/Alert'\n\nTauri enables your app to have a CLI through <a href=\"https://github.com/clap-rs/clap\" target=\"_blank\">clap</a>, a robust command line argument parser. With a simple CLI definition in your `tauri.conf.json` file, you can define your interface and read its argument matches map on JavaScript and/or Rust.\n\n## Base Configuration\n\nUnder `tauri.conf.json`, you have the following structure to configure the interface:\n\n```js title=src-tauri/tauri.conf.json\n{\n  \"tauri\": {\n    \"cli\": {\n      \"description\": \"\", // command description that's shown on help\n      \"longDescription\": \"\", // command long description that's shown on help\n      \"beforeHelp\": \"\", // content to show before the help text\n      \"afterHelp\": \"\", // content to show after the help text\n      \"args\": [], // list of arguments of the command, we'll explain it later\n      \"subcommands\": {\n        \"subcommand-name\": {\n          // configures a subcommand that is accessible\n          // with `$ ./app subcommand-name --arg1 --arg2 --etc`\n          // configuration as above, with \"description\", \"args\", etc.\n        }\n      }\n    }\n  }\n}\n```\n\n<Alert title=\"Note\">\n  All JSON configurations here are just samples, many other fields have been omitted for the sake of clarity.\n</Alert>\n\n## Adding Arguments\n\nThe `args` array represents the list of arguments accepted by its command or subcommand. You can find more details about the way to configure them <a href=\"/docs/api/config#tauri\">here</a>.\n\n### Positional Arguments\n\nA positional argument is identified by its position in the list of arguments. With the following configuration:\n\n```json title=src-tauri/tauri.conf.json:tauri.cli\n{\n  \"args\": [\n    {\n      \"name\": \"source\",\n      \"index\": 1\n    },\n    {\n      \"name\": \"destination\",\n      \"index\": 2\n    }\n  ]\n}\n```\n\nUsers can run your app as `$ ./app tauri.txt dest.txt` and the arg matches map will define `source` as `\"tauri.txt\"` and `destination` as `\"dest.txt\"`.\n\n### Named Arguments\n\nA named argument is a (key, value) pair where the key identifies the value. With the following configuration:\n\n```json title=src-tauri/tauri.conf.json:tauri.cli\n{\n  \"args\": [\n    {\n      \"name\": \"type\",\n      \"short\": \"t\",\n      \"takesValue\": true,\n      \"multiple\": true,\n      \"possibleValues\": [\"foo\", \"bar\"]\n    }\n  ]\n}\n```\n\nUsers can run your app as `$ ./app --type foo bar`, `$ ./app -t foo -t bar` or `$ ./app --type=foo,bar` and the arg matches map will define `type` as `[\"foo\", \"bar\"]`.\n\n### Flag Arguments\n\nA flag argument is a standalone key whose presence or absence provides information to your application. With the following configuration:\n\n```js title=src-tauri/tauri.conf.json:tauri.cli\n{\n  \"args\": [\n    \"name\": \"verbose\",\n    \"short\": \"v\",\n    \"multipleOccurrences\": true\n  ]\n}\n```\n\nUsers can run your app as `$ ./app -v -v -v`, `$ ./app --verbose --verbose --verbose` or `$ ./app -vvv` and the arg matches map will define `verbose` as `true`, with `occurrences = 3`.\n\n## Subcommands\n\nSome CLI applications has additional interfaces as subcommands. For instance, the `git` CLI has `git branch`, `git commit` and `git push`. You can define additional nested interfaces with the `subcommands` array:\n\n```js title=src-tauri/tauri.conf.json:tauri\n{\n  \"cli\": {\n    ...\n    \"subcommands\": {\n      \"branch\": {\n        \"args\": []\n      },\n      \"push\": {\n        \"args\": []\n      }\n    }\n  }\n}\n```\n\nIts configuration is the same as the root application configuration, with the `description`, `longDescription`, `args`, etc.\n\n## Reading the matches\n\n### Rust\n\n```rust\nuse tauri::api::cli::get_matches;\n\nfn main() {\n  let context = tauri::generate_context!();\n  let cli_config = context.config().tauri.cli.clone().unwrap();\n  \n  match get_matches(&cli_config) {\n    // `matches` here is a Struct with { args, subcommand }.\n    // `args` is `HashMap<String, ArgData>` where `ArgData` is a struct with { value, occurances }.\n    // `subcommand` is `Option<Box<SubcommandMatches>>` where `SubcommandMatches` is a struct with { name, matches }.\n    Ok(matches) => {\n      println!(\"{:?}\", matches)\n    }\n    Err(_) => {}\n  };\n  \n  tauri::Builder::default()\n  .run(context)\n  .expect(\"error while running tauri application\");\n}\n```\n\n### JavaScript\n\n```js\nimport { getMatches } from '@tauri-apps/api/cli'\n\ngetMatches().then((matches) => {\n  // do something with the { args, subcommand } matches\n})\n```\n\n## Complete documentation\n\nYou can find more about the CLI configuration <a href=\"/docs/api/config#tauri\">here</a>.\n","h1":[],"h2":[{"content":"Base Configuration","type":"text"},{"content":"Adding Arguments","type":"text"},{"content":"Subcommands","type":"text"},{"content":"Reading the matches","type":"text"},{"content":"Complete documentation","type":"text"}],"h3":[{"content":"Positional Arguments","type":"text"},{"content":"Named Arguments","type":"text"},{"content":"Flag Arguments","type":"text"},{"content":"Rust","type":"text"},{"content":"JavaScript","type":"text"}],"hasCodeBlock":true,"programmingLanguages":["rust","js"],"otherSymbols":["text","link","inlineCode"]}