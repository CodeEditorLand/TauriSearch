{"filename":"plugin.md","filepath":"docs/usage/guides","hash":42,"frontmatter":{"title":"Write Tauri Plugins"},"text":"\nimport Alert from '@theme/Alert'\n\n<Alert title=\"Note\" icon=\"info-alt\">\nTauri will soon offer Plugin starter kits so the process of writing a Plugin crate will be simplified.\n\nFor now it's recommended to follow the [official Tauri plugins](#official-tauri-plugins).\n</Alert>\n\nPlugins allow you to hook into the Tauri application lifecycle and introduce new commands.\n\n## Writing a Plugin\n\nTo write a plugin you just need to implement the `tauri::plugin::Plugin` trait:\n\n```rust\nuse tauri::{plugin::{Plugin, Result as PluginResult}, Runtime, PageLoadPayload, Window, Invoke, AppHandle};\n\nstruct MyAwesomePlugin<R: Runtime> {\n  invoke_handler: Box<dyn Fn(Invoke<R>) + Send + Sync>,\n  // plugin state, configuration fields\n}\n\n// the plugin custom command handlers if you choose to extend the API.\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|initialize')`.\n// where `awesome` is the plugin name.\nfn initialize() {}\n\n#[tauri::command]\n// this will be accessible with `invoke('plugin:awesome|do_something')`.\nfn do_something() {}\n\nimpl<R: Runtime> MyAwesomePlugin<R> {\n  // you can add configuration fields here,\n  // see https://doc.rust-lang.org/1.0.0/style/ownership/builders.html\n  pub fn new() -> Self {\n    Self {\n      invoke_handler: Box::new(tauri::generate_handler![initialize, do_something]),\n    }\n  }\n}\n\nimpl<R: Runtime> Plugin<R> for MyAwesomePlugin<R> {\n  /// The plugin name. Must be defined and used on the `invoke` calls.\n  fn name(&self) -> &'static str {\n    \"awesome\"\n  }\n\n  /// The JS script to evaluate on initialization.\n  /// Useful when your plugin is accessible through `window`\n  /// or needs to perform a JS task on app initialization\n  /// e.g. \"window.awesomePlugin = { ... the plugin interface }\"\n  fn initialization_script(&self) -> Option<String> {\n    None\n  }\n\n  /// initialize plugin with the config provided on `tauri.conf.json > plugins > $yourPluginName` or the default value.\n  fn initialize(&mut self, app: &AppHandle<R>, config: serde_json::Value) -> PluginResult<()> {\n    Ok(())\n  }\n\n  /// Callback invoked when the Window is created.\n  fn created(&mut self, window: Window<R>) {}\n\n  /// Callback invoked when the webview performs a navigation.\n  fn on_page_load(&mut self, window: Window<R>, payload: PageLoadPayload) {}\n\n  /// Extend the invoke handler.\n  fn extend_api(&mut self, message: Invoke<R>) {\n    (self.invoke_handler)(message)\n  }\n}\n```\n\nNote that each function on the `Plugin` trait is optional, except the `name` function.\n\n## Using a plugin\n\nTo use a plugin, just pass an instance of the `MyAwesomePlugin` struct to the App's `plugin` method:\n\n```rust\nfn main() {\n  let awesome_plugin = MyAwesomePlugin::new();\n  tauri::Builder::default()\n    .plugin(awesome_plugin)\n    .run(tauri::generate_context!())\n    .expect(\"failed to run app\");\n}\n```\n\n## Official Tauri Plugins\n\n- [Stronghold (WIP)](https://github.com/tauri-apps/tauri-plugin-stronghold)\n- [Authenticator (WIP)](https://github.com/tauri-apps/tauri-plugin-authenticator)\n- [Logging (WIP)](https://github.com/tauri-apps/tauri-plugin-log)\n- [SQL (WIP)](https://github.com/tauri-apps/tauri-plugin-sql)\n","h1":[],"h2":[{"content":"Writing a Plugin","type":"text"},{"content":"Using a plugin","type":"text"},{"content":"Official Tauri Plugins","type":"text"}],"h3":[],"hasCodeBlock":true,"programmingLanguages":["rust"],"otherSymbols":["text","link","inlineCode","list"]}