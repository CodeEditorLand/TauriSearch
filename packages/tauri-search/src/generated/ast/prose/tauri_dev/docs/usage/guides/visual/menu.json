{"filename":"menu.md","filepath":"docs/usage/guides/visual","hash":42,"frontmatter":{"title":"Window Menu"},"text":"\nNative application menus can be attached to a window.\n\n### Creating a menu\n\nTo create a native window menu, import the `Menu`, `Submenu`, `MenuItem` and `CustomMenuItem` types.\nThe `MenuItem` enum contains a collection of platform-specific items (currently not implemented on Windows).\nThe `CustomMenuItem` allows you to create your own menu items and add special functionality to them.\n\n```rust\nuse tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n```\n\nCreate a `Menu` instance:\n\n```rust\n// here `\"quit\".to_string()` defines the menu item id, and the second parameter is the menu item label.\nlet quit = CustomMenuItem::new(\"quit\".to_string(), \"Quit\");\nlet close = CustomMenuItem::new(\"close\".to_string(), \"Close\");\nlet submenu = Submenu::new(\"File\", Menu::new().add_item(quit).add_item(close));\nlet menu = Menu::new()\n  .add_native_item(MenuItem::Copy)\n  .add_item(CustomMenuItem::new(\"hide\", \"Hide\"))\n  .add_submenu(submenu);\n```\n\n### Adding the menu to all windows\n\nThe defined menu can be set to all windows using the `menu` API on the `tauri::Builder` struct:\n\n```rust\nuse tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .menu(menu)\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n### Adding the menu to a specific window\n\nYou can create a window and set the menu to be used. This allows defining a specific menu set for each application window.\n\n```rust\nuse tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\nuse tauri::WindowBuilder;\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .create_window(\n      \"main-window\".to_string(),\n      tauri::WindowUrl::App(\"index.html\".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n### Listening to events on custom menu items\n\nEach `CustomMenuItem` triggers an event when clicked. Use the `on_menu_event` API to handle them, either on the global `tauri::Builder` or on an specific window.\n\n#### Listening to events on global menus\n\n```rust\nuse tauri::{CustomMenuItem, Menu, MenuItem};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .menu(menu)\n    .on_menu_event(|event| {\n      match event.menu_item_id() {\n        \"quit\" => {\n          std::process::exit(0);\n        }\n        \"close\" => {\n          event.window().close().unwrap();\n        }\n        _ => {}\n      }\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n#### Listening to events on window menus\n\n```rust\nuse tauri::{CustomMenuItem, Menu, MenuItem};\nuse tauri::{Manager, WindowBuilder};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .create_window(\n      \"main-window\".to_string(),\n      tauri::WindowUrl::App(\"index.html\".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .setup(|app| {\n      let window = app.get_window(\"main-window\").unwrap();\n      let window_ = window.clone();\n      window.on_menu_event(move |event| {\n        match event.menu_item_id().as_str() {\n          \"quit\" => {\n            std::process::exit(0);\n          }\n          \"close\" => {\n            window_.close().unwrap();\n          }\n          _ => {}\n        }\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n### Updating menu items\n\nThe `Window` struct has a `menu_handle` method, which allows updating menu items:\n\n```rust\nfn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let main_window = app.get_window(\"main\").unwrap();\n      let menu_handle = main_window.menu_handle();\n      std::thread::spawn(move || {\n        // you can also `set_selected`, `set_enabled` and `set_native_image` (macOS only).\n        menu_handle.get_item(\"item_id\").set_title(\"New title\");\n      })\n      Ok(())\n    })\n}\n```\n","h1":[],"h2":[],"h3":[{"content":"Creating a menu","type":"text"},{"content":"Adding the menu to all windows","type":"text"},{"content":"Adding the menu to a specific window","type":"text"},{"content":"Listening to events on custom menu items","type":"text"},{"content":"Updating menu items","type":"text"}],"hasCodeBlock":true,"programmingLanguages":["rust"],"otherSymbols":["text","inlineCode","h4"]}