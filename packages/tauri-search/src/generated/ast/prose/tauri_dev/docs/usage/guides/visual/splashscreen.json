{"filename":"splashscreen.md","filepath":"docs/usage/guides/visual","hash":42,"frontmatter":{"title":"Splashscreen"},"text":"\nimport Link from '@docusaurus/Link'\n\nIf your webpage could take some time to load, or if you need to run an initialization procedure in Rust before displaying your main window, a splashscreen could improve the loading experience for the user.\n\n### Setup\n\nFirst, create a `splashscreen.html` in your `distDir` that contains the HTML code for a splashscreen. Then, update your `tauri.conf.json` like so:\n\n```diff\n\"windows\": [\n  {\n    \"title\": \"Tauri App\",\n    \"width\": 800,\n    \"height\": 600,\n    \"resizable\": true,\n    \"fullscreen\": false,\n+   \"visible\": false // Hide the main window by default\n  },\n  // Add the splashscreen window\n+ {\n+   \"width\": 400,\n+   \"height\": 200,\n+   \"decorations\": false,\n+   \"url\": \"splashscreen.html\",\n+   \"label\": \"splashscreen\"\n+ }\n]\n```\n\nNow, your main window will be hidden and the splashscreen window will show when your app is launched. Next, you'll need a way to close the splashscreen and show the main window when your app is ready. How you do this depends on what you are waiting for before closing the splashscreen.\n\n### Waiting for Webpage\n\nIf you are waiting for your web code, you'll want to create a `close_splashscreen` [command](../command.md).\n\n```rust title=src-tauri/main.rs\nuse tauri::Manager;\n// Create the command:\n#[tauri::command]\nfn close_splashscreen(window: tauri::Window) {\n  // Close splashscreen\n  if let Some(splashscreen) = window.get_window(\"splashscreen\") {\n    splashscreen.close().unwrap();\n  }\n  // Show main window\n  window.get_window(\"main\").unwrap().show().unwrap();\n}\n\n// Register the command:\nfn main() {\n  tauri::Builder::default()\n    // Add this line\n    .invoke_handler(tauri::generate_handler![close_splashscreen])\n    .run(tauri::generate_context!())\n    .expect(\"failed to run app\");\n}\n\n```\n\nThen, you can call it from your JS:\n\n```js\n// With the Tauri API npm package:\nimport { invoke } from '@tauri-apps/api/tauri'\n// With the Tauri global script:\nconst invoke = window.__TAURI__.invoke\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // This will wait for the window to load, but you could\n  // run this function on whatever trigger you want\n  invoke('close_splashscreen')\n})\n```\n\n### Waiting for Rust\n\nIf you are waiting for Rust code to run, put it in the `setup` function handler so you have access to the `App` instance:\n\n```rust title=src-tauri/main.rs\nuse tauri::Manager;\nfn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let splashscreen_window = app.get_window(\"splashscreen\").unwrap();\n      let main_window = app.get_window(\"main\").unwrap();\n      // we perform the initialization code on a new task so the app doesn't freeze\n      tauri::async_runtime::spawn(async move {\n        // initialize your app here instead of sleeping :)\n        println!(\"Initializing...\");\n        std::thread::sleep(std::time::Duration::from_secs(2));\n        println!(\"Done initializing.\");\n\n        // After it's done, close the splashscreen and display the main window\n        splashscreen_window.close().unwrap();\n        main_window.show().unwrap();\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"failed to run app\");\n}\n```\n","h1":[],"h2":[],"h3":[{"content":"Setup","type":"text"},{"content":"Waiting for Webpage","type":"text"},{"content":"Waiting for Rust","type":"text"}],"hasCodeBlock":true,"programmingLanguages":["diff",null],"otherSymbols":["text","inlineCode","link"]}