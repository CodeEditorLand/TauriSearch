{"filename":"system-tray.md","filepath":"docs/usage/guides/visual","hash":42,"frontmatter":{"title":"System Tray"},"text":"\nNative application system tray.\n\n### Setup\n\nConfigure the `systemTray` object on `tauri.conf.json`:\n\n```json\n{\n  \"tauri\": {\n    \"systemTray\": {\n      \"iconPath\": \"icons/icon.png\",\n      \"iconAsTemplate\": true,\n    }\n  }\n}\n```\n\nThe `iconPath` is pointed to a PNG file on macOS and Linux, and a `.ico` file must exist for Windows support.\n\nThe `iconAsTemplate` is a boolean value that determines whether the image represents a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc) image on macOS.\n\n\n### Creating a system tray\n\nTo create a native system tray, import the `SystemTray` type:\n\n```rust\nuse tauri::SystemTray;\n```\n\nInitialize a new tray instance:\n\n```rust\nlet tray = SystemTray::new();\n```\n\n### Configuring a system tray context menu\n\nOptionally you can add a context menu that is visible when the tray icon is right clicked. Import the `SystemTrayMenu`, `SystemTrayMenuItem` and `CustomMenuItem` types:\n\n```rust\nuse tauri::{CustomMenuItem, SystemTrayMenu, SystemTrayMenuItem};\n```\n\nCreate the `SystemTrayMenu`:\n\n```rust\n// here `\"quit\".to_string()` defines the menu item id, and the second parameter is the menu item label.\nlet quit = CustomMenuItem::new(\"quit\".to_string(), \"Quit\");\nlet hide = CustomMenuItem::new(\"hide\".to_string(), \"Hide\");\nlet tray_menu = SystemTrayMenu::new()\n  .add_item(quit)\n  .add_native_item(SystemTrayMenuItem::Separator)\n  .add_item(hide);\n```\n\nAdd the tray menu to the `SystemTray` instance:\n\n```rust\nlet tray = SystemTray::new().with_menu(tray_menu);\n```\n\n### Configure the app system tray\n\nThe created `SystemTray` instance can be set using the `system_tray` API on the `tauri::Builder` struct:\n\n```rust\nuse tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  let system_tray = SystemTray::new()\n    .with_menu(tray_menu);\n  tauri::Builder::default()\n    .system_tray(system_tray)\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n### Listening to system tray events\n\nEach `CustomMenuItem` triggers an event when clicked.\nAlso, Tauri emits tray icon click events.\nUse the `on_system_tray_event` API to handle them:\n\n```rust\nuse tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\nuse tauri::Manager;\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  tauri::Builder::default()\n    .system_tray(SystemTray::new().with_menu(tray_menu))\n    .on_system_tray_event(|app, event| match event {\n      SystemTrayEvent::LeftClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!(\"system tray received a left click\");\n      }\n      SystemTrayEvent::RightClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!(\"system tray received a right click\");\n      }\n      SystemTrayEvent::DoubleClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!(\"system tray received a double click\");\n      }\n      SystemTrayEvent::MenuItemClick { id, .. } => {\n        match id.as_str() {\n          \"quit\" => {\n            std::process::exit(0);\n          }\n          \"hide\" => {\n            let window = app.get_window(\"main\").unwrap();\n            window.hide().unwrap();\n          }\n          _ => {}\n        }\n      }\n      _ => {}\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n### Updating system tray\n\nThe `AppHandle` struct has a `tray_handle` method, which returns a handle to the system tray allowing updating tray icon and context menu items:\n\n#### Updating context menu items\n\n```rust\nuse tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\nuse tauri::Manager;\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  tauri::Builder::default()\n    .system_tray(SystemTray::new().with_menu(tray_menu))\n    .on_system_tray_event(|app, event| match event {\n      SystemTrayEvent::MenuItemClick { id, .. } => {\n        // get a handle to the clicked menu item\n        // note that `tray_handle` can be called anywhere,\n        // just get a `AppHandle` instance with `app.handle()` on the setup hook\n        // and move it to another function or thread\n        let item_handle = app.tray_handle().get_item(&id);\n        match id.as_str() {\n          \"hide\" => {\n            let window = app.get_window(\"main\").unwrap();\n            window.hide().unwrap();\n            // you can also `set_selected`, `set_enabled` and `set_native_image` (macOS only).\n            item_handle.set_title(\"Show\").unwrap();\n          }\n          _ => {}\n        }\n      }\n      _ => {}\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n#### Updating tray icon\n\nNote that `tauri::Icon` must be a `Path` variant on Linux, and `Raw` variant on Windows and macOS.\n\n```rust\napp.tray_handle().set_icon(tauri::Icon::Raw(include_bytes!(\"../path/to/myicon.ico\"))).unwrap();\n```\n","h1":[],"h2":[],"h3":[{"content":"Setup","type":"text"},{"content":"Creating a system tray","type":"text"},{"content":"Configuring a system tray context menu","type":"text"},{"content":"Configure the app system tray","type":"text"},{"content":"Listening to system tray events","type":"text"},{"content":"Updating system tray","type":"text"}],"hasCodeBlock":true,"programmingLanguages":["json","rust"],"otherSymbols":["text","inlineCode","link","h4"]}