{"filename":"selenium.md","filepath":"docs/usage/guides/webdriver/example","hash":42,"frontmatter":{"title":"Selenium"},"text":"import Alert from '@theme/Alert'\nimport Tabs from '@theme/Tabs'\nimport TabItem from '@theme/TabItem'\n\n<Alert title=\"Example Application\" type=\"info\" icon=\"info-alt\">\n\nThis [Selenium] guide expects you to have already gone through the [example Application setup] in order to follow\nstep-by-step. The general information may still be useful otherwise.\n</Alert>\n\nThis WebDriver testing example will use [Selenium] and a popular Node.js testing suite. It is expected to already have\nNode.js installed, along with `npm` or `yarn` although the [finished example project] uses `yarn`.\n\n## Create a Directory for the Tests\n\nLet's start off by creating a space in our project to write these tests. We are going to be using a nested directory for\nthis example project as we will later also go over other frameworks, but typically you will only need to use one. Create\nthe directory we will use with `mkdir -p webdriver/selenium`. The rest of this guide will assume you are inside the\n`webdriver/selenium` directory.\n\n## Initializing a Selenium Project\n\nWe will be using a pre-existing `package.json` to bootstrap this test suite because we have already chosen specific\ndependencies to use and want to showcase a simple working solution. The bottom of this section has a collapsed\nguide on how to set it up from scratch.\n\n`package.json`:\n```json\n{\n  \"name\": \"selenium\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"dependencies\": {\n    \"chai\": \"^4.3.4\",\n    \"mocha\": \"^9.0.3\",\n    \"selenium-webdriver\": \"^4.0.0-beta.4\"\n  }\n}\n```\n\nWe have a script which runs [Mocha] as a test framework exposed as the `test` command. We also have various dependencies\nthat we will be using to run the tests. [Mocha] as the testing framework, [Chai] as the assertion library, and\n[`selenium-webdriver`] which is the Node.js [Selenium] package.\n\n<details><summary>Click me if you want to see how to set a project up from scratch</summary>\n\nIf you wanted to install the dependencies from scratch, just run the following command.\n\n<Tabs groupId=\"package-manager\"\ndefaultValue=\"yarn\"\nvalues={[\n{label: 'npm', value: 'npm'}, {label: 'Yarn', value: 'yarn'},\n]}>\n<TabItem value=\"npm\">\n\n```sh\nnpm install mocha chai selenium-webdriver\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```sh\nyarn add mocha chai selenium-webdriver\n```\n\n</TabItem>\n</Tabs>\n\nI suggest also adding a `\"test\": \"mocha\"` item in the `package.json` `\"scripts\"` key so that running mocha can be called\nsimply with\n\n<Tabs groupId=\"package-manager\"\ndefaultValue=\"yarn\"\nvalues={[\n{label: 'npm', value: 'npm'}, {label: 'Yarn', value: 'yarn'},\n]}>\n<TabItem value=\"npm\">\n\n```sh\nnpm test\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```sh\nyarn test\n```\n\n</TabItem>\n</Tabs>\n\n</details>\n\n## Testing\n\nUnlike the [WebdriverIO Test Suite](webdriverio#config), Selenium does not come out of the box with a Test Suite and\nleaves it up to the developer to build those out. We chose [Mocha] which is pretty neutral, and not related to WebDrivers\nat all, so our script will need to do a bit of work to set up everything for us in the right order. [Mocha] expects a\ntesting file at `test/test.js` by default, so let's create that file now.\n\n`test/test.js`:\n```js\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst { expect } = require(\"chai\");\nconst { spawn, spawnSync } = require(\"child_process\");\nconst { Builder, By, Capabilities } = require(\"selenium-webdriver\");\n\n// create the path to the expected application binary\nconst application = path.resolve(\n  __dirname,\n  \"..\",\n  \"..\",\n  \"..\",\n  \"target\",\n  \"release\",\n  \"hello-tauri-webdriver\"\n);\n\n// keep track of the webdriver instance we create\nlet driver;\n\n// keep track of the tauri-driver process we start\nlet tauriDriver;\n\nbefore(async function() {\n  // set timeout to 2 minutes to allow the program to build if it needs to\n  this.timeout(120000)\n\n  // ensure the program has been built\n  spawnSync(\"cargo\", [\"build\", \"--release\"]);\n\n  // start tauri-driver\n  tauriDriver = spawn(\n    path.resolve(os.homedir(), \".cargo\", \"bin\", \"tauri-driver\"),\n    [],\n    { stdio: [null, process.stdout, process.stderr] }\n  );\n\n  const capabilities = new Capabilities();\n  capabilities.set(\"tauri:options\", { application });\n  capabilities.setBrowserName(\"wry\");\n\n  // start the webdriver client\n  driver = await new Builder()\n    .withCapabilities(capabilities)\n    .usingServer(\"http://localhost:4444/\")\n    .build();\n});\n\nafter(async function() {\n  // stop the webdriver session\n  await driver.quit();\n\n  // kill the tauri-driver process\n  tauriDriver.kill();\n});\n\ndescribe(\"Hello Tauri\", () => {\n  it(\"should be cordial\", async () => {\n    const text = await driver.findElement(By.css(\"body > h1\")).getText();\n    expect(text).to.match(/^[hH]ello/);\n  });\n\n  it(\"should be excited\", async () => {\n    const text = await driver.findElement(By.css(\"body > h1\")).getText();\n    expect(text).to.match(/!$/);\n  });\n\n  it(\"should be easy on the eyes\", async () => {\n    // selenium returns color css values as rgb(r, g, b)\n    const text = await driver.findElement(By.css(\"body\")).getCssValue(\"background-color\");\n\n    const rgb = text.match(/^rgb\\((?<r>\\d+), (?<g>\\d+), (?<b>\\d+)\\)$/).groups;\n    expect(rgb).to.have.all.keys('r','g','b');\n\n    const luma =  0.2126 * rgb.r + 0.7152 * rgb.g  + 0.0722 * rgb.b ;\n    expect(luma).to.be.lessThan(100)\n  });\n});\n```\n\nIf you are familiar with JS testing frameworks, `describe`, `it`, and `expect` should look familiar. We also have\nsemi-complex `before()` and `after()` callbacks to setup and teardown mocha. Lines that are not the tests themselves\nhave comments explaining what the setup and teardown code is doing. If you were familiar with the Spec file from the\n[WebdriverIO example](webdriverio#spec), you will notice a lot more code that isn't tests, as we have to set up a few\nmore WebDriver related items.\n\n## Running the Test Suite\n\nNow that we are all set up with our dependencies and our test script, lets run it!\n\n<Tabs groupId=\"package-manager\"\ndefaultValue=\"yarn\"\nvalues={[\n{label: 'npm', value: 'npm'}, {label: 'Yarn', value: 'yarn'},\n]}>\n<TabItem value=\"npm\">\n\n```sh\nnpm test\n```\n\n</TabItem>\n\n<TabItem value=\"yarn\">\n\n```sh\nyarn test\n```\n\n</TabItem>\n</Tabs>\n\nWe should see output the following output:\n\n```text\n➜  selenium git:(main) ✗ yarn test\nyarn run v1.22.11\n$ mocha\n\n\n  Hello Tauri\n    ✔ should be cordial (120ms)\n    ✔ should be excited\n    ✔ should be easy on the eyes\n\n\n  3 passing (588ms)\n\nDone in 0.93s.\n```\n\nWe can see that our `Hello Tauri` sweet we created with `decribe` had all 3 items we created with `it` pass their\ntests!\n\nWith [Selenium] and some hooking up to a test suite, we just enabled e2e testing without modifying our Tauri\napplication at all!\n\n\n[Selenium]: https://selenium.dev/\n[finished example project]: https://github.com/chippers/hello_tauri\n[example Application setup]: setup\n[Mocha]: https://mochajs.org/\n[Chai]: https://www.chaijs.com/\n[`selenium-webdriver`]: https://www.npmjs.com/package/selenium-webdriver\n","h1":[],"h2":[{"content":"Create a Directory for the Tests","type":"text"},{"content":"Initializing a Selenium Project","type":"text"},{"content":"Testing","type":"text"},{"content":"Running the Test Suite","type":"text"}],"h3":[],"hasCodeBlock":true,"programmingLanguages":["sh",null,"text"],"otherSymbols":["text","inlineCode","link","def"]}