{"filename":"bridge.md","filepath":"docs/usage/patterns","hash":42,"frontmatter":{"title":"Bridge"},"text":"\nimport Rater from '@theme/Rater'\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n\n<div className=\"row\">\n  <div className=\"col col--4\">\n    <table>\n      <tr>\n        <td>Ease of Use</td>\n        <td><Rater value=\"3\"/></td>\n      </tr>\n      <tr>\n        <td>Extensibility</td>\n        <td><Rater value=\"5\"/></td>\n      </tr>\n      <tr>\n        <td>Performance</td>\n        <td><Rater value=\"4\"/></td>\n      </tr>\n      <tr>\n        <td>Security</td>\n        <td><Rater value=\"4\"/></td>\n      </tr>\n    </table>\n  </div>\n  <div className=\"col col--4 pattern-logo\">\n    <img src={useBaseUrl('img/patterns/Bridge.png')} alt=\"Bridge\" />\n  </div>\n    <div className=\"col col--4\">\n    Pros:\n    <ul>\n      <li>Highly configurable</li>\n      <li>No Rust skills required</li>\n    </ul>\n    Cons:\n    <ul>\n      <li>Some WebAPIs unavailable</li>\n      <li>Challenge to implement</li>\n    </ul>\n  </div>\n</div>\n\n## Description\n\nThe Bridge recipe is a secure pattern where messages are passed between brokers via an implicit bridge using the API. It isolates functionality to scope and passes messages instead of functionality.\n\n## Diagram\n\nimport Mermaid, { colors } from '@theme/Mermaid'\n\n<Mermaid chart={`graph TD\n      H==>F\n      subgraph WEBVIEW\n      F-.-E\n      end\n      D-->E\n      E-->D\n      B-->D\n      D-->B\n      subgraph RUST\n      A==>H\n      A-->B\n      B-.-C\n      B-.-G\n      end\n      A[Binary]\n      B{Rust Broker}\n      C[Subprocess 2]\n      G[Subprocess 1]\n      D(( API BRIDGE ))\n      E{JS Broker}\n      F[Window]\n      H{Bootstrap}\n      style D fill:#ccc,stroke:#333,stroke-width:4px,color:white\n      style RUST fill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px\n      style WEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px`} />\n\n## Configuration\n\nHere's what you need to add to your tauri.conf.json file:\n```json\n\"tauri\": {\n  \"allowlist\": {                  // all API values are default false\n    \"all\": false,                 // use this flag to enable all API features\n    \"shell\": {\n      \"execute\": false,             // enable application execution\n      \"open\": false,                // open link/path in the default app\n    },\n    \"fs\": {\n      \"listFiles\": false,           // list files in a directory\n      \"readBinaryFile\": false,      // read binary file from local filesystem\n      \"readTextFile\": false,        // read text file from local filesystem\n      \"setTitle\": false,            // set the window title\n      \"writeFile\": false            // write file to local filesystem\n    }\n  }\n}\n\n```\n","h1":[],"h2":[{"content":"Description","type":"text"},{"content":"Diagram","type":"text"},{"content":"Configuration","type":"text"}],"h3":[],"hasCodeBlock":false,"programmingLanguages":[],"otherSymbols":["text","inlineCode"]}