[{"id":"prose_docs_architecture_md","title":{"content":"The Tauri Architecture","type":"text"},"sections":["What does the Release flow look like"],"subSections":[],"code":[null],"text":"# The Tauri Architecture ## Introduction Tauri is a polyglot and generic toolkit\nthat is very composable and allows engineers to make a wide variety of\napplications. It is used for building applications for Desktop Computers using a\ncombination of Rust tools and HTML rendered in a Webview. Apps built with Tauri\ncan ship with any number of pieces of an optional JS API / Rust API so that\nwebviews can control the system via message passing. In fact, developers can\nextend the default API with their own functionality and bridge the Webview and\nRust-based backend easily. Tauri apps can have custom menus and have tray-type\ninterfaces. They can be updated, and are managed by the user's operating system\nas expected. They are very small, because they use the OS's webview. They do not\nship a runtime, since the final binary is compiled from Rust. This makes the\nreversing of Tauri apps not a trivial task. ## What Tauri is NOT - Tauri is not\na lightweight kernel wrapper...instead it directly uses [WRY](#wry) and\n[TAO](#tao) to do the heavy-lifting in making system calls to the OS. - Tauri is\nnot a VM or virtualized environment...instead it is an application toolkit that\nallows making Webview OS applications. ## Major Components The following section\nbriefly describes the roles of the various parts of Tauri. ### Tauri Core\n[STABLE RUST] ####\n[tauri](https://github.com/tauri-apps/tauri/tree/dev/core/tauri) This is the\nmajor crate that holds everything together. It brings the runtimes, macros,\nutilities and API into one final product. It reads the `tauri.conf.json` file at\ncompile time in order to bring in features and undertake actual configuration of\nthe app (and even the `Cargo.toml` file in the project's folder). It handles\nscript injection (for polyfills / prototype revision) at runtime, hosts the API\nfor systems interaction, and even manages updating. ####\n[tauri-build](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-build)\nApply the macros at build-time in order to rig some special features needed by\n`cargo`. ####\n[tauri-codegen](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-codegen)\n- Embed, hash, and compress assets, including icons for the app as well as the\nsystem-tray. - Parse `tauri.conf.json` at compile time and generate the Config\nstruct. ####\n[tauri-macros](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-macros)\nCreate macros for the context, handler, and commands by leveraging the\n`tauri-codegen` crate. ####\n[tauri-runtime](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-runtime)\nThis is the glue layer between tauri itself and lower level webview libraries.\n####\n[tauri-runtime-wry](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-runtime-wry)\nThis crate opens up direct systems-level interactions specifically for WRY, such\nas printing, monitor detection, and other windowing related tasks.\n`tauri-runtime` implementation for WRY. ####\n[tauri-utils](https://github.com/tauri-apps/tauri/tree/dev/core/tauri-utils)\nThis is common code that is reused in many places and offers useful utilities\nlike parsing configuration files, detecting platform triples, injecting the CSP,\nand managing assets. ### Tauri Tooling ####\n[api](https://github.com/tauri-apps/tauri/tree/dev/tooling/api) [TS -> JS] A\ntypescript library that creates `cjs` and `esm` Javascript endpoints for you to\nimport into your Frontend framework so that the Webview can call and listen to\nbackend activity. We also ship the pure typescript, because for some frameworks\nthis is more optimal. It uses the message passing of webviews to their hosts.\n#### [bundler](https://github.com/tauri-apps/tauri/tree/dev/tooling/bundler)\n[RUST / SHELL] The bundler is a library that builds a Tauri App for the platform\ntriple it detects / is told. At the moment it currently supports macOS, Windows\nand Linux - but in the near future will support mobile platforms as well. May be\nused outside of Tauri projects. ####\n[cli.js](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli.js) [JS]\nWritten in Typescript and packaged such that it can be used with `npm`, `pnpm`,\nand `yarn`, this library provides a node.js runner for common tasks when using\nTauri, like `yarn tauri dev`. For the most part it is a wrapper around\n[cli.rs](https://github.com/tauri-apps/tauri/blob/dev/tooling/cli.rs). ####\n[cli.rs](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli.rs) [RUST]\nThis rust executable provides the full interface to all of the required\nactivities for which the CLI is required. It will run on macOS, Windows, and\nLinux. ####\n[create-tauri-app](https://github.com/tauri-apps/tauri/tree/dev/tooling/create-tauri-app)\n[JS] This is a toolkit that will enable engineering teams to rapidly scaffold\nout a new tauri-apps project using the frontend framework of their choice (as\nlong as it has been configured). # External Crates The Tauri-Apps organisation\nmaintains two \"upstream\" crates from Tauri, namely TAO for creating and managing\napplication windows, and WRY for interfacing with the Webview that lives within\nthe window. ## [TAO](https://github.com/tauri-apps/tao) Cross-platform\napplication window creation library in Rust that supports all major platforms\nlike Windows, macOS, Linux, iOS and Android. Written in Rust, it is a fork of\n[winit](https://github.com/rust-windowing/winit) that we have extended for our\nown needs like menu bar and system tray. ##\n[WRY](https://github.com/tauri-apps/wry) WRY is a cross-platform WebView\nrendering library in Rust that supports all major desktop platforms like\nWindows, macOS, and Linux. Tauri uses WRY as the abstract layer responsible to\ndetermine which webview is used (and how interactions are made). ##\n[tauri-hotkey-rs](https://github.com/tauri-apps/tauri-hotkey-rs) We needed to\nfix hotkey to work on all platforms, because upstream was not being responsive.\n# Additional tooling ##\n[binary-releases](https://github.com/tauri-apps/binary-releases) This is the\ndelivery mechanism for tauri prebuilt binaries: currently the cli.rs (used by\ncli.js) and rustup binaries (used by the deps install command of cli.js). These\nartifacts are automatically created on release. ##\n[tauri-action](https://github.com/tauri-apps/tauri-action) This is a github\nworkflow that builds tauri binaries for all platforms. It is not the fastest out\nthere, but it gets the job done and is highly configurable. Even allowing you to\ncreate a (very basic) tauri app even if tauri is not setup. ##\n[create-pull-request](https://github.com/tauri-apps/create-pull-request) Because\nthis is a very risky (potentially destructive) github action, we forked it in\norder to have strong guarantees that the code we think is running is actually\nthe code that is running. ##\n[vue-cli-plugin-tauri](https://github.com/tauri-apps/vue-cli-plugin-tauri) This\nplugin allows you to very quickly install tauri in a vue-cli project. ##\n[tauri-vscode](https://github.com/tauri-apps/tauri-vscode) This project enhances\nthe VS Code interface with several nice-to-have features. # Tauri Plugins\n[documentation](https://tauri.studio/en/docs/guides/plugin) Generally speaking,\nplugins are authored by third parties (even though there may be official,\nsupported plugins). A plugin generally does 3 things: 1. It provides rust code\nto do \"something\". 2. It provides interface glue to make it easy to integrate\ninto an app. 3. It provides a JS API for interfacing with the rust code. Here\nare several examples of Tauri Plugins: -\nhttps://github.com/tauri-apps/tauri-plugin-sql -\nhttps://github.com/tauri-apps/tauri-plugin-stronghold -\nhttps://github.com/tauri-apps/tauri-plugin-authenticator # Workflows ## What\ndoes the Development flow look like? A developer must first install the\nprerequisite toolchains for creating a Tauri app. At the very least this will\nentail installing rust & cargo, and most likely also a modern version of node.js\nand potentially another package manager. Some platforms may also require other\ntooling and libraries, but this has been documented carefully in the respective\nplatform docs. Because of the many ways to build front-ends, we will stick with\na common node.js based approach for development. (Note: Tauri does not by\ndefault ship a node.js runtime.) The easiest way to do this is to run the\nfollowing: ``` npx create-tauri-app ``` Which will ask you a bunch of questions\nabout the framework you want to install and then create everything you need in a\nsingle folder - some via the placement of template files and some through normal\ninstallation procedures of your framework. > If you don't use this process, you\nwill have to manually install the tauri cli, initialise tauri and manually\nconfigure the `tauri.conf.json` file. Once everything is installed, you can run:\n``` yarn tauri dev -or- npm run tauri dev ``` This will do several things: 1.\nstart the JS Framework devserver 2. begin the long process of downloading and\ncompiling the rust libraries 3. open an application window with devtools enabled\n4. keep a long-lived console alive If you change your HTML/CSS/TS/JS, your\nframework devserver should give you its best shot at instant hot module\nreloading and you will see the changes instantly. If you modify your rust code\nor anything in the Cargo.toml, the window will close while rust recompiles. When\nfinished it will reload. If you need to get deeper insight into your current\nproject, or triage requires investigation of installed components, just run: ```\nyarn tauri info ``` ## What does the Release flow look like? The release flow\nbegins with proper configuration in the `tauri.conf.json` file. In this file,\nthe developer can configure not only the basic behaviour of the application\n(like window size and decoration), they can also provide settings for signing\nand updating. Depending upon the operating system that the developer (or CI) is\nbuilding the application on, there will be an app built for them for that\nsystem. (Cross compilation is not currently available, however there is an\nofficial [GitHub Action](https://github.com/tauri-apps/tauri-action) that can be\nused to build for all platforms.) To kick off this process, just: ``` yarn tauri\nbuild ``` After some time, the process will end and you can see the results in\nthe `./src-tauri/target/release` folder. ## What does the End-User flow look\nlike? End users will be provided with binaries in ways that are appropriate for\ntheir systems. Whether macOS, Linux, or Windows, direct download or store\ninstallations - they will be able to follow procedures for installing and\nremoving that they are used to. ## What does the Updating flow look like? When a\nnew version is ready, the developer publishes the new signed artifacts to a\nserver (that they have configured within `tauri.conf.json`). The application can\npoll this server to see if there is a new release. When there is a new release,\nthe user is prompted to update. The application update is downloaded, verified\n(checksum & signature), updated, closed, and restarted. ## License Tauri itself\nis licensed under MIT or Apache-2.0. If you repackage it and modify any source\ncode, it is your responsibility to verify that you are complying with all\nupstream licenses. Tauri is provided AS-IS with no explicit claim for\nsuitability for any purpose. Here you may peruse our [Software Bill of\nMaterials](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri).","url":"https://tauri.studio/docs/architecture"},{"id":"prose_docs_faq_md","title":"Frequently Asked Questions","sections":[],"subSections":[],"code":[null],"text":"# error: could not find native static libraryWebView2LoaderStatic, perhaps an -L\nflag is missing? The WebView2 crate build pipeline requires `NuGet` to have a\n`PackageSource` to install the `Microsoft.Web.WebView2` package. If you never\nused `NuGet` before, you might need to create a file named `NuGet.Config` on\n`%APPDATA%/NuGet` folder, with the following contents: ``` ``` This\nconfiguration enables the default `NuGet` registry.","url":"https://tauri.studio/docs/faq"},{"id":"prose_docs__templates_cli_md","title":"CLI","sections":["info","init","dev","deps","build","icon","version","CLI usage"],"subSections":[],"code":[null],"text":"import Command from '@theme/Command' import Alert from '@theme/Alert' The\n`cli.js` command line interface is composed in TypeScript and published as a\nJavaScript NPM. It offers the `deps` and the `icon` commands, and propagates\nother commands to `cli.rs`. ## `info` {info} It shows a concise list of\ninformation about the environment, Rust, Node.js and their versions as well as\nsome relevant configurations. This command is pretty helpful when you need to\nhave a quick overview of your application. When requesting some help, it can be\nuseful that you share this report with us. ## `init` {init} ## `dev` {dev} This\ncommand will open the WebView in development mode. It makes use of the\n`build.devPath` property from your `src-tauri/tauri.conf.json` file. If you have\nentered a command to the `build.beforeDevCommand` property, this one will be\nexecuted before the `dev` command. See more about the configuration.\n[/docs/api/config#build]\n\nIf you're not using `build.beforeDevCommand`, make sure your `build.devPath` is\ncorrect and, if using a development server, that it's started before using this\ncommand. ## `deps` {deps} ## `build` {build} This command will bundle your\napplication, either in production mode or debug mode if you used the `--debug`\nflag. It makes use of the `build.distDir` property from your\n`src-tauri/tauri.conf.json` file. If you have entered a command to the\n`build.beforeBuildCommand` property, this one will be executed before the\n`build` command. See more about the configuration. [/docs/api/config#build] ##\n`icon` ``` Description Create all the icons you need for your Tauri app. Usage $\ntauri icon /path/to/icon.png Options --help, -h Displays this message --log, -l\nLogging [boolean] --target, -t Target folder (default: 'src-tauri/icons')\n--compression, -c Compression type [optipng|zopfli] --ci Runs the script in CI\nmode ``` This command will generate a set of icons, based on the source icon\nyou've entered. Note that the source icon must be 1240x1240 with transparency.\n## `version` ``` Description Returns the current version of tauri ``` This\ncommand will show the current version of Tauri. ## CLI usage See more about the\nusage through this [complete guide](/docs/development/integration).","url":"https://tauri.studio/docs/.templates/cli"},{"id":"prose_docs__templates_config_md","title":"Configuration","sections":[],"subSections":[],"code":[],"text":"import Properties from '@theme/Properties' import Array from '@theme/Array'\nimport Alert from '@theme/Alert' The `tauri.conf.json` is a file generated by\nthe `tauri init` command (see here [/docs/api/cli#tauri-init]) that lives in\nyour Tauri application source directory (src-tauri). Once generated, you may\nmodify it at will to customize your Tauri application. # Platform-specific\nconfiguration In addition to the JSON defined on the `tauri.conf.json` file,\nTauri reads a platform-specific configuration on `tauri.linux.conf.json`,\n`tauri.windows.conf.json` and `tauri.macos.conf.json` and merges it with the\nmain `tauri.conf.json` configuration. # Configuration structure\n`tauri.conf.json` is composed of the following properties: {properties}\n\nInstead of launching the app directly, we configure the bundled app to run a\nscript that tries to expose the environment variables to the app; without that\nyou'll have trouble using system CLI apps like Node.js. ```js title=Example\n\"tauri\": { \"cli\": { \"description\": \"Tauri communication example\",\n\"longDescription\": null, \"beforeHelp\": null, \"afterHelp\": null, \"args\": [{\n\"short\": \"c\", \"name\": \"config\", \"takesValue\": true, \"description\": \"Config path\"\n}, { \"short\": \"t\", \"name\": \"theme\", \"takesValue\": true, \"description\": \"App\ntheme\", \"possibleValues\": [\"light\", \"dark\", \"system\"] }, { \"short\": \"v\", \"name\":\n\"verbose\", \"multipleOccurrences\": true, \"description\": \"Verbosity level\" }],\n\"subcommands\": { \"update\": { \"description\": \"Updates the app\",\n\"longDescription\": null, \"beforeHelp\": null, \"afterHelp\": null, \"args\": [{\n\"short\": \"b\", \"name\": \"background\", \"description\": \"Update in background\" }],\n\"subcommands\": null } } }, \"bundle\": { \"active\": true, \"targets\": [\"deb\"],\n\"identifier\": \"com.tauri.dev\", \"icon\": [\"icons/32x32.png\", \"icons/128x128.png\",\n\"icons/128x128@2x.png\", \"icons/icon.icns\", \"icons/icon.ico\"], \"resources\": [],\n\"externalBin\": [], \"copyright\": \"\", \"category\": \"DeveloperTool\",\n\"shortDescription\": \"\", \"longDescription\": \"\", \"deb\": { \"depends\": [] },\n\"macOS\": { \"frameworks\": [], \"minimumSystemVersion\": \"\", \"exceptionDomain\": \"\" }\n}, \"allowlist\": { \"all\": true }, \"windows\": [{ \"title\": \"Tauri App\", \"width\":\n800, \"height\": 600, \"resizable\": true, \"fullscreen\": false }], \"security\": {\n\"csp\": \"default-src blob: data: filesystem: ws: wss: http: https: tauri:\n'unsafe-eval' 'unsafe-inline' 'self'\" } } ```","url":"https://tauri.studio/docs/.templates/config"},{"id":"prose_docs_about_book_md","title":"Get the book","sections":["Outline","Errata"],"subSections":["tl","Introduction","About the Topic","What you will learn","Stuff you","Chapter 1 ","Chapter 2 ","Chapter 3 ","Chapter 4 ","Chapter 5 "],"code":[null],"text":"import useBaseUrl from '@docusaurus/useBaseUrl'\nTauri - From Theory to Practice [{useBaseUrl('img/bookCover.png')}]\nTauri: From Theory to Practice\nArchitecting Next-Gen Native-Apps for all Platforms [v1:Rust Edition]\nAuthors: [Daniel Thompson-Yvetot, Lucas Fernandes Gonçalves Nogueira]\nPublisher: TBD\nRelease: late 2020\n### tl;dr; Visit https://opencollective.com/tauri and preorder your copy of the\nbook today. Your donation will support the ongoing development of Tauri, and you\nwill receive advance digital PDF's for your review as chapters are completed.\nThe final book will ship concurrently with the release of 1.0.0 stable. If you\ndonate 10 USD / month to Tauri, you will get the advance PDF versions as soon as\nthey are released. If you just want to donate once: 15 USD for PDF and e-book,\n30 USD for print version and PDF, 40 USD for all three. All tutorial\nsubscription tiers receive the rolling PDF free of additional charge. ###\nIntroduction In 2020, the manufacture of native-apps has become easier and more\naccessible than ever before. All the same, beginners and seasoned developers\nalike are confronted with tough choices in a rapidly changing landscape of\nsecurity and privacy. This is especially true in the semi-trusted environment of\nuser devices. Tauri takes the guesswork out of the equation, as it was designed\nfrom the ground up to embrace new paradigms of secure development and creative\nflexibility that leverage the language features of Rust and lets you build an\napp using any frontend framework you like. Find out how you can design, build,\naudit and deploy tiny, fast, robust, and secure native applications for the\nmajor Desktop and Mobile platforms, all from the exact same codebase and in\nrecord time - without even needing to know the Rust programming language.\nAuthors Daniel and Lucas, the architects behind Tauri take you on a journey from\ntheory to execution, during which you will learn why Tauri was built and how it\nworks under the hood. Together with guest personalities that specialize in Open\nSource, DevOps, Security and Enterprise Architecture, this book also presents\ndiscourse-formatted philosophical discussions and open-source sustainability\nviewpoints from which your next-gen apps will profit - and your users will\nbenefit. In this book you will follow the authors in the iterative evolution of\na real project from conception to distribution - all with commentary, complete\ncode resources, built, and packaged Native Apps for reference and staged Capture\nthe Flag (CTF) challenges that progress in difficulty as your comprehension of\nthe system grows. ### About the Topic Tauri is a brand new way to make\ncross-platform native-apps for web, desktop and mobile. At this very moment, the\npre-alpha version of this MIT licensed community-based software is being\nprepared for public release: https://github.com/tauri-apps/tauri Tauri\nintroduces novel methods for WebView integration and innovative patterns for\nrobust threat evasion. The 1.0 release will ship with a multipurpose white-box\nanalyzer and decompiler for any kind of binary and an integrated CLI for\ningesting any type of HTML; which, when combined, provides developers and\nsecurity teams with a holistic platform that has never existed as a single unit\nbefore. Tauri bridges communities and opens up new opportunities for everyone\nfrom the front end developer all the way to the low-level security and network\nadministrators. Due to this level of complexity and robustness, it is important\nto publish a reference guide that will necessarily be updated as major versions\nare released. ### What you will learn By the end of this book you will\nunderstand: - The method and reasoning behind the design of Tauri - The options\nyou have when building with Tauri - That having a moral compass is possible in\nsoftware development - Why the Rust language makes the most sense as a binding\nand application layer - Why Electron, Cordova, React Native, Capacitor and\nothers are no longer the best choice - Why a binary review is important And you\nwill be able to: - Transform a simple website project into a Tauri Native-App -\nMake a variety of Tauri Application Types based on the main Patterns - Decompile\nand analyze your App for Security Issues - Publish your App to a variety of App\nStores - Read and write Rust code ### Stuff you'll get if you preorder - Access\nto a real demo App built for all platforms available at respective stores (that\nincludes CTF Flags). - Exclusive One-Pager cheat sheets made available for each\nsection of the book, including the Appendices. - Early access to videos /\nwebcasts. - Discounted participation in the “Capture the Flag” event hosted at\nthe launch of the book. ## Outline This is an early outline of the contents that\nwe expect to publish. Contents subject to change. ### Chapter 1 - Theory (ca. 50\npages - mostly conversational / technical, graphics) ``` 1. Security Starts with\nYou 2. Privacy Ends with ${you} 3. Languages, Dialects and Patterns 4.\nToolchains and Syntactic Sugar 5. Production Methodologies 6. Enterprise\nReadiness 7. Message Queueing 8. Embracing Chaos 9. Distribution Techniques 10.\nLicensing Strategies ``` ### Chapter 2 - Practice (ca. 130 pages w/ charts,\nscreenshots, code samples) ``` 1. Environment Prerequisites - Node, Npm, Yarn,\nRustc, Rustup, Buildtools 2. Development Platform Details - macOS - Windows -\nLinux - Docker - Virtual Machines - CI / CD 3. Tauri Introduction 4. Tauri\nAnatomy 5. Tauri Configuration - Files & Folders - Icons - Splash Screens -\nWindow - `src-tauri/tauri.conf.json` 6. Preparing your code - Transpile dynamic\nimports - Remove webpack chunking - Monolithic Files - Minification strategies\n7. Tauri API - Design Considerations - API Usage Patterns - Custom API Functions\n- Endpoints - All - Answer - Bridge - Event - Execute - List Files - Open - Read\nBinary File - Read Text File - Set Title - Window - Write File 8. Web APIs 9.\nTauri App Extensions - Anatomy - Flow - Registration - Publication - API 10.\nTaskbar Integration (Desktop Only) - Anatomy - Integrations - macOS - Windows -\nLinux 11. Security Features - Baseline Rust Features - Functional Address Space\nLayout Randomization (fASLR) - Ahead of Time (AoT) Compilation - Content\nSecurity Policy (CSP) - One Time Pads (OTP) - Embedded Server: False - API\nTree-Shaking - Matryoschkasumming (with Tauri-Frida) 12. Bridges and Brokers -\nBridge Patterns - Message hashing with OTP - Plugin Pattern - Kamikaze Function\nInjection (KFI) Closures 13. Testing - Unit Testing - Rust - JS - Integration\nTesting - e2e Testing 14. Building - Debugging - Packaging - Minification -\nDistribution Platform Details - macOS (.app / .dmg) - Win (.exe / .msi) - Linux\nArm64 (.appImage / .deb) - Linux x64 (.appImage / .deb) - iOS (.ipa) - Android\n(.apk) - PWA Website (with wasm) - Code Signing - Keystores - Certs -\nFingerprints - Providing License for End Users - Providers - Keys Files -\nSelf-Updater - Anatomy - Service Provisioning - Github - AWS - Homegrown -\nCross-Platform Bundler 15. Tauri-Frida Harness - Introduction to Reverse\nEngineering - Toolchain - Usage - Binary Hooking at Runtime - Pointer Evaluation\n- Spraying, Fuzzing, Spoofing - Report Generation - Recompilation - Post-Binary\nAnalysis 16. Distribution - Git - Mac Store - iOS Store - Play store - Windows\nStore - Snap Store - PureOS Store - .deb channels - .tar.gz - homebrew - Fdroid\n- Cydia - ChromeOS - WASM ``` ### Chapter 3 - Philosophical Discourses (ca. 40\npages of essays, some graphics) ``` 1. Rights and Responsibilities (with Robin\nvan Boven (SFOSC)) - Who You are Responsible To - Being a Vendor Comes with\nDuties - Ubiquitous Resources are Still Precious - Use Policy to Address\nResponsibilities - Take a Hippocratic Development Oath 2. Take a More Secure\nStance (with Liran Tal (SNYK)) - Security Benefits of Frameworks - Encrypt All\nthe Things, All the Time - Constantly Audit Project Dependencies - Harden\nYourself, Your Organization and Your Ecosystem - “Do What You Can Until You Run\nOut of Time.” - [ROBERT C. SEACORD] 3. Production Strategies for Sustainability\n(with Rhys Parry (Independent)) - Develop in the “Perfect” Environment - Minimal\nImpact for Existing Enterprise Architectures - Use Low-Barrier Tools for\nEnsuring Wholestack Security - Test the Right Things Intelligently - Post-Binary\nAnalysis and Redistribution - The Last Mile ``` ### Chapter 4 - Execution (ca.\n100 pages w/ code examples, screenshots, graphics) ``` 1. Base Pattern Evolution\n- Hermit - Bridge - Cloudish - Cloudbridge - Lockdown - Multiwin - GLUI 2.\nAdvanced Patterns - Cryptographic Enclave - Identity Management - Combine an App\nwith a Daemon - IPC / RPC - Integrate with DENO 3. UI Source Complilation -\nReact - Vue - Angular - Svelte - Gatsby 4. Building a Real App - Multiparty\nPassword Manager - Design - Prototyping - Testing - Debugging - Packaging -\nChecksumming 5. Tauri-Frida - White Box Reversing - Analyzing with Frida - Chaos\nExperiments - Interface Jacking - Disk Change - Latency - Process Kill - CPU\nThrottle - Static Analysis Reporting - Binary Repackaging - Inject License Keys\n- Clear Dead Codepoints - Recalculate Integrated Checksum 6. Publishing the App\n- Git - Mac Store - iOS Store - Play store - Windows Store - Snap Store - PureOS\nStore - .deb channels - .tar.gz - homebrew - Fdroid - Cydia - ChromeOS - WASM 7.\nPublishing an Update ``` ### Chapter 5 - Appendices (ca. 120 pages) ``` 1.\nConfiguration Options 2. Files and Repositories 3. Tauri CLI references 4. Tauri\nAPI references 5. ES6 References 6. Rust References 7. App Pattern Charts 8.\nTauri-Frida Reference 9. Glossary 10. Index ``` ## Errata Got something that you\nthink should be in the book? Want to be our publisher? Reach out to us and let\nus know!","url":"https://tauri.studio/docs/about/book"},{"id":"prose_docs_about_governance_md","title":"Governance","sections":["Sustainability"],"subSections":["Organizational Structure","Code of Conduct","Social Contract","Licensing","Trademark"],"code":[],"text":"## Sustainability One of the main goals of the organizational structure of Tauri\nis to guarantee the sustainability of Tauri and the health and well-being of its\ncontributors. The world of Open Source is fraught with peril and discord, and we\nhave taken measures to ensure the longevity of Tauri. This document explains how\nwe go about doing so. ### Organizational Structure Tauri apps is governed by the\ncommunity and work is done in the context of public working groups. Each working\ngroup has a dedicated channel on the Discord server as well as a Team on GitHub.\nOther than that, each WG is free to use whatever type of organizational model it\nchooses. The current working groups are: - WG Governance & Guidance - WG Tech -\nWG Education - WG Media - WG Security - WG Devops With the exception of the\nsecurity working group, which is by invite only and convenes privately, all\nother working groups are public and open to any and all participants. Please\nvisit [this repository](https://github.com/tauri-apps/governance-and-guidance)\nto get more information. ### Code of Conduct Everyone participating in the Tauri\ncommunity is expected to follow a code of conduct that you can at the\n[Governance and Guidance:Code of\nConduct](https://github.com/tauri-apps/governance-and-guidance/blob/master/CODE_OF_CONDUCT.md).\n### Social Contract We have a Social Contract that informs our decision making\nand organization. You can read about it here: [Governance and Guidance:Social\nContract](https://github.com/tauri-apps/governance-and-guidance/blob/master/SOCIAL_CONTRACT.md).\n### Licensing We, the contributors to Tauri Apps, use the MIT and Apache\nlicenses for all code content. Images and bodies of text, unless otherwise noted\nare CC-BY-ND-NC. ### Trademark It is a permissible use of the name \"Tauri App\"\nor the Tauri logo to show that a project uses Tauri. \"Tauri Studio\" is reserved\nfor use by the organization. Any language that gives the impression that the\nTauri organization approves, authorizes or otherwise supports a project, person\nor company is not permissible without written authorization from the Guidance\nand Governance Working Group.","url":"https://tauri.studio/docs/about/governance"},{"id":"prose_docs_about_intro_md","title":"What is Tauri?","sections":["Security First","Polyglots","Honest Open Source","The Future"],"subSections":[],"code":[],"text":"Tauri is a toolkit that helps developers make applications for the major desktop\nplatforms - using virtually any frontend framework in existence. The core is\nbuilt with Rust and the CLI leverages Node.js making Tauri a genuinely polyglot\napproach to creating and maintaining great apps. If you want to know more about\nthe technical details, then please visit the\n[Introduction](/docs/get-started/intro). If you want to know more about this\nproject's philosophy - then keep reading.\n\n## Security First In today's world, every honest threat model assumes that the\nuser's device has already been compromised. This puts app developers in a\ncomplicated situation, because if the device is already at risk, how can the\nsoftware be trusted? Defense in depth is the approach we've taken. We want you\nto be able to take every precaution possible to minimise the surface area you\npresent to attackers. Tauri lets you choose which API endpoints to ship, whether\nor not you want a localhost server built into your app, and it even randomizes\nfunctional handles at runtime. These and other techniques form a secure baseline\nthat empowers you and your users. Slowing down attackers by making static\nattacks crushingly difficult and isolating systems from one another is the name\nof the game. And if you are coming from the Electron ecosystem - rest assured -\nby default Tauri only ships binaries, not ASAR files. By choosing to build Tauri\nwith security as a guiding force, we give you every opportunity to take a\nproactive security posture. ## Polyglots, not Silos Most contemporary frameworks\nuse a single language paradigm and are therefore trapped in a bubble of\nknowledge and idiom. This can work well for certain niche applications, but it\nalso fosters a kind of tribalism. This can be seen in the way that the React,\nAngular and Vue development communities huddle on their stacks, ultimately\nbreeding very little cross-pollination. This same situation can be seen in the\nRust vs Node vs C++ battlefields, where hardliners take their stances and refuse\nto collaborate across communities. Today, Tauri uses Rust for the backend - but\nin the not too distant future, other backends like Go, Nim, Python, Csharp etc.\nwill be possible. This is because we are maintaining the official Rust bindings\nto the [webview](https://github.com/webview) organisation and plan to let you\nswitch out the backend for your needs. Since our API can be implemented in any\nlanguage with C interop, full compliance is only a PR away. ## Honest Open\nSource None of this would make any sense without a community. Today software\ncommunities are amazing places where people help each other and make awesome\nthings - open source is a very big part of that. Open source means different\nthings to different people, but most will agree that it serves to support\nfreedom. When software doesn't respect your rights, then it can seem unfair and\npotentially compromise your freedoms by operating in unethical ways. This is why\nwe are proud that FLOSS advocates can build applications with Tauri that are\n\"certifiably\" open source and can be included in FSF endorsed GNU/Linux\ndistributions. ## The Future Tauri's future depends on your involvement and\ncontributions. Try it out, file issues, join a working group or make a donation\n- every contribution is important. Please, at any rate, do get in touch!!!","url":"https://tauri.studio/docs/about/intro"},{"id":"prose_docs_about_security_md","title":"Security","sections":["No Server Required","Language Features of Rust","Dynamic Ahead of Time Compilation ","Function Hardening","System Features","Ecosystem","Future Work"],"subSections":["Security Researchers","Functional ASLR","Kamikaze Function Injection","Bridge","One Time Pad Tokenization and Hashing","Allowing API","Content Security Policy Management","Decompilation is Difficult","Build Pipelines and Artifact Authenticity","Resilient PR and Approval Processes","Signed Binaries","Post","Post","Audits"],"code":[],"text":"This guide seeks to explain the high level concepts and Security Features at the\ncore of Tauri's design that make you, your apps and your users safer by default.\nPlease note:\nWhile we take every opportunity to help you harden your application - there are\nalways underlying threats like BIOS attacks, memory rowhammering and other\noperating system vulnerabilities that are constantly being discovered and (in\nthe best cases) responsibly disclosed.\nFurthermore, there are many ways that development teams can cut corners and\neither leak sensitive information or leave doors wide open to any of a range of\nattacks. Security is a never-ending quest, and your users count on you to keep\nthem safe.\nTherefore, we highly recommend that you take some time to consider the security\nramifications of everything that your application does, especially in the\ncontext of running on the semi-hostile platform of end-user devices.\nIf you need help or want a review, you are welcome to contact the Tauri team for\nsecurity consultation.\n### Security Researchers If you feel that there is a security concern or issue\nwith anything in Tauri, please do not publicly comment on your findings.\nInstead, reach out directly to our security team: > security@tauri.studio\nAlthough we do not currently have a budget for Security Bounties, in some cases\nwe will consider rewarding responsible disclosure with our limited resources. ##\nNo Server Required Tauri enables you to construct an application that uses\nweb-technology for the user interface without requiring you to use a server to\ncommunicate with the backend. Even if you used advanced techniques of dynamic\nimports and offload work to the backend, no traffic can be sniffed on TCP ports\nor external processes - because they just aren't there. This reduces not only\nthe physical and virtual footprint of your final binary by a good deal, it also\nreduces the surface area of potential attack vectors by removing them from the\nequation. ## Language Features of Rust By turning to the programming language\nrenowned for its memory-safety and speed, Tauri simply erases whole classes of\nconventional attacks. `Use after free` just isn't something that can happen with\nTauri. ## Dynamic Ahead of Time Compilation (AOT) This process of compilation\nhappens several times during the bootstrapping phase of a Tauri app. By using\nour default dynamic Ahead of Time compiler, you can generate code references\nthat are unique for every session and are still technically static code units.\n## Function Hardening ### Functional ASLR Functional address Space Layout\nRandomization techniques randomize function names at runtime and can implement\nOTP hashing so no two sessions are ever the same. We propose a novel type of\nfunction naming at boot time and optionally after every execution. Using a UID\nfor each function pointer prevents static attacks. ### Kamikaze Function\nInjection This advanced type of fASLR using the `EVENT` API endpoint, is a\npromise wrapped in a closure (with randomized handle) that Rust inserts at\nruntime into the WebView, where its interface is locked within the promise\nresolution handler and is nulled after execution. ### Bridge, don't serve\nInstead of passing potentially unsafe functions, an event bridge can be used to\npass messages and commands to named brokers at each respective side of the\napplication. ### One Time Pad Tokenization and Hashing Hashing important\nmessages with a OTP salt, you are able to encrypt messages between the user\ninterface and the Rust backend. We are currently investigating the use of\nadditional sources of entropy such as the amazing [Infinite Noise\nTRNG](https://13-37.org/en/shop/infinite-noise-trng/). ## System Features ###\nAllowing API You have the ability to pick and choose which API functions are\navailable to the UI and to Rust. If they are not enabled, the code will not be\nshipped with your app, which reduces binary size and attack surface. They are\nopt-in, so you have to consciously choose to progressively enhance your\napplication. ### Content Security Policy Management Preventing unauthorized code\nexecution for websites has long since been \"resolved\" by using CSPs. Tauri can\ninject CSPs into the index.html of the user interface, and when using a\nlocalhost server it will also send these headers to the UI or any other clients\nthat connect with it. ### Decompilation is Difficult This means that your apps\ncannot be easily decompiled as is the case with Electron ASAR files, which makes\nthe process of reverse engineering your project much more time intensive and\nrequires specialist training. ## Ecosystem ### Build Pipelines and Artifact\nAuthenticity The process of releasing our source-code artifacts is highly\nautomated, yet mandates kickoff and review from real humans. Our current release\nstrategy uses a combination of Github Actions and IOTA Tangle publication ###\nResilient PR and Approval Processes Our WG-TECH reviews code changes, tags PRs\nwith scope and make sure that everything stays up to date. And when its time to\npublish a new version, one of the maintainers tags a new release on master,\nwhich: - validates core - runs smoke tests - audits security for crates and npm\n- generates changelogs - creates artifacts - publishes checksums to IOTA -\ncreates a draft release Then the maintainer reviews the release notes, edits if\nnecessary - and a new release is forged. ## Future Work ### Signed Binaries\nBecause the entire project is shipped within a monolithic binary, code can be\nsigned for all distributables. (Currently using external tooling, but we are\nactively working on making the bundler a one-stop-shop.) This makes it virtually\nimpossible for hackers to change an installed Application without the operating\nsystem noticing. [Reference](https://github.com/electron/asar/issues/123) ###\nPost-Binary Analysis Use industrial-grade pentester-tooling (via our forthcoming\nTauri-Frida GUI) to discover and fix security weaknesses in your final binaries.\n### Post-Binary Enhancement After the build is before the delivery, and Tauri\nwill provide you with tools never seen before. Stay tuned! ### Audits We are\ncurrently in the process of our first external audit. When complete, we will\npublish the results here.","url":"https://tauri.studio/docs/about/security"},{"id":"prose_docs_api_cli_md","title":"CLI","sections":["info","init","dev","deps","build","icon","version","CLI usage"],"subSections":[],"code":[null,"sh"],"text":"import Command from '@theme/Command' import Alert from '@theme/Alert' The\ntauri.js cli is composed in TypeScript and published as JavaScript. ## `info`\n``` Description Returns the known state of tauri dependencies and configuration\n``` It shows a concise list of information about the environment, Rust, Node.js\nand their versions as well as some relevant configurations. This command is\npretty helpful when you need to have a quick overview of your application. When\nrequesting some help, it can be useful that you share this report with us. ##\n`init` ``` Initializes a Tauri project USAGE: cargo tauri init [FLAGS] [OPTIONS]\n[SUBCOMMAND] FLAGS: --ci Skip prompting for values -f, --force Force init to\noverwrite the src-tauri folder -h, --help Print help information -l, --log\nEnables logging -V, --version Print version information OPTIONS: -A, --app-name\nName of your Tauri application -d, --directory Set target directory for init -D,\n--dist-dir Web assets location, relative to /src-tauri -P, --dev-path Url of\nyour dev server -t, --tauri-path Path of the Tauri project to use (relative to\nthe cwd) -W, --window-title Window title of your Tauri application SUBCOMMANDS:\nhelp Print this message or the help of the given subcommand(s) ``` ## `dev` ```\nTauri dev. USAGE: cargo tauri dev [FLAGS] [OPTIONS] [--] [args]... ARGS: ...\nArgs passed to the binary FLAGS: -e, --exit-on-panic Exit on panic -h, --help\nPrint help information --release Run the code in release mode -V, --version\nPrint version information OPTIONS: -c, --config config JSON to merge with\ntauri.conf.json -f, --features ... list of cargo features to activate -r,\n--runner binary to use to run the application -t, --target ... target triple to\nbuild against ``` This command will open the WebView in development mode. It\nmakes use of the `build.devPath` property from your `src-tauri/tauri.conf.json`\nfile. If you have entered a command to the `build.beforeDevCommand` property,\nthis one will be executed before the `dev` command. See more about the\nconfiguration. [/docs/api/config#build]\n\nIf you're not using `build.beforeDevCommand`, make sure your `build.devPath` is\ncorrect and, if using a development server, that it's started before using this\ncommand. ## `deps` ```sh Description Tauri dependency management script Usage $\ntauri deps [install|update] ``` ## `build` ``` Tauri build. USAGE: cargo tauri\nbuild [FLAGS] [OPTIONS] FLAGS: -d, --debug Builds with the debug flag -h, --help\nPrint help information -v, --verbose Enables verbose logging -V, --version Print\nversion information OPTIONS: -b, --bundle ... list of bundles to package -c,\n--config config JSON to merge with tauri.conf.json -f, --features ... list of\ncargo features to activate -r, --runner binary to use to build the application\n-t, --target ... target triple to build against ``` This command will bundle\nyour application, either in production mode or debug mode if you used the\n`--debug` flag. It makes use of the `build.distDir` property from your\n`src-tauri/tauri.conf.json` file. If you have entered a command to the\n`build.beforeBuildCommand` property, this one will be executed before the\n`build` command. See more about the configuration. [/docs/api/config#build] ##\n`icon` ``` Description Create all the icons you need for your Tauri app. Usage $\ntauri icon /path/to/icon.png Options --help, -h Displays this message --log, -l\nLogging [boolean] --target, -t Target folder (default: 'src-tauri/icons')\n--compression, -c Compression type [optipng|zopfli] --ci Runs the script in CI\nmode ``` This command will generate a set of icons, based on the source icon\nyou've entered. Note that the source icon must be 1240x1240 with transparency.\n## `version` ``` Description Returns the current version of tauri ``` This\ncommand will show the current version of Tauri. ## CLI usage See more about the\nusage through this [complete guide](/docs/development/integration).","url":"https://tauri.studio/docs/api/cli"},{"id":"prose_docs_api_config_md","title":"Configuration","sections":["build","package","tauri"],"subSections":[],"code":[],"text":"import Properties from '@theme/Properties' import Array from '@theme/Array'\nimport Alert from '@theme/Alert' The `tauri.conf.json` is a file generated by\nthe `tauri init` command (see here [/docs/api/cli#tauri-init]) that lives in\nyour Tauri application source directory (src-tauri). Once generated, you may\nmodify it at will to customize your Tauri application. # Platform-specific\nconfiguration In addition to the JSON defined on the `tauri.conf.json` file,\nTauri reads a platform-specific configuration on `tauri.linux.conf.json`,\n`tauri.windows.conf.json` and `tauri.macos.conf.json` and merges it with the\nmain `tauri.conf.json` configuration. # Configuration structure\n`tauri.conf.json` is composed of the following properties: ## `build` The target\ndirectory must contain an index.html file. `}, {property: \"devPath\", type:\n\"string\", description: `Can be a path to a folder (either absolute or relative\nto tauri.conf.json) or a URL (like a live reload server).`}, {property:\n\"beforeDevCommand\", optional: true, type: \"string\", description: `A command to\nrun before starting Tauri in dev mode.`}, {property: \"beforeBuildCommand\",\noptional: true, type: \"string\", description: `A command to run before starting\nTauri in build mode.`}, {property: \"withGlobalTauri\", optional: true, type:\n\"boolean\", description: \"Enables the API injection to the window.__TAURI__\nobject. Useful if you're using Vanilla JS instead of importing the API using\nRollup or Webpack. Reduces the command security since any external code can\naccess it, so be careful with XSS attacks.\"} ]}/> ```js title=Example \"build\": {\n\"distDir\": \"../dist\", \"devPath\": \"http://localhost:4000\", \"beforeDevCommand\":\n\"npm run dev\", \"beforeBuildCommand\": \"npm run build\", \"withGlobalTauri\": false }\n``` ## `package` ## `tauri` Any leading hyphen will be stripped, and only the\nfirst non hyphen character will be used as the short version. ` }, { property:\n\"name\", type: \"string\", description: `The unique argument name.` }, { property:\n\"description\", optional: true, type: \"string\", description: `The argument\ndescription which will be shown on the help information. Typically, this is a\nshort (one line) description of the arg.` }, { property: \"longDescription\",\noptional: true, type: \"string\", description: `The argument long description\nwhich will be shown on the help information. Typically, this a more detailed\n(multi-line) message that describes the argument` }, { property: \"takesValue\",\noptional: true, type: \"boolean\", description: `Specifies that the argument takes\na value at runtime.\nValues for arguments may be specified in any of the following methods:\n * Using a space such as -o value or --option value\n * Using an equals and no space such as -o=value or --option=value\n * Use a short and no space such as -ovalue\n\n` }, { property: \"index\", type: \"number\", optional: true, description: `The\npositional argument index, starting at 1.\nThe index refers to position according to other positional argument. It does not\ndefine position in the argument list as a whole. When utilized with\nmultiple=true, only the last positional argument may be defined as multiple\n(i.e. the one with the highest index).\n` }, { property: \"multiple\", optional: true, type: \"boolean\", description:\n`Specifies that the argument may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example -ddd or -d\n-d -d would count as three occurrences. For options, there is a distinct\ndifference in multiple occurrences vs multiple values. For example, --opt val1\nval2 is one occurrence, but two values. Whereas --opt val1 --opt val2 is two\noccurrences.` }, { property: \"possibleValues\", optional: true, type: \"string[]\",\ndescription: `Specifies a list of possible values for this argument. At runtime,\nthe CLI verifies that only one of the specified values was used, or fails with\nan error message.` }, { property: \"minValues\", optional: true, type: \"number\",\ndescription: `Specifies the minimum number of values for this argument. For\nexample, if you had a -f <file> argument where you wanted at least 2 \"files\" you\nwould set minValues: 2, and this argument would be satisfied if the user\nprovided, 2 or more values.` }, { property: \"maxValues\", optional: true, type:\n\"number\", description: `Specifies the maximum number of values for this\nargument. For example, if you had a -f <file> argument where you wanted up to 3\n\"files\" you would set max_values: 3, and this argument would be satisfied if the\nuser provided, 1, 2, or 3 values.` }, { property: \"required\", optional: true,\ntype: \"boolean\", description: `Sets whether or not the argument is required by\ndefault. \"required by default\" means it is required, when no other conflicting\nrules have been evaluated conflicting rules take precedence over being\nrequired.` }, { property: \"requiredUnless\", optional: true, type: \"string\",\ndescription: `Sets an arg that overrides this arg's required setting.\ni.e. this arg will be required unless this other argument is present.` }, {\nproperty: \"requiredUnlessAll\", optional: true, type: \"string[]\", description:\n`Sets args that override this arg's required setting.\ni.e. this arg will be required unless all these other arguments are present.` },\n{ property: \"requiredUnlessOne\", optional: true, type: \"string[]\", description:\n`Sets args that override this arg's required setting.\ni.e. this arg will be required unless at least one of these other arguments are\npresent.` }, { property: \"conflictsWith\", optional: true, type: \"string\",\ndescription: `Sets a conflicting argument by name i.e. when using this argument,\nthe following argument can't be present and vice versa.` }, { property:\n\"conflictsWithAll\", optional: true, type: \"string\", description: `The same as\n\"conflictsWith\" but allows specifying multiple two-way conflicts per argument.`\n}, { property: \"requires\", optional: true, type: \"string\", description: `Sets an\nargument by name that is required when this one is present.\ni.e. when using this argument, the following argument must be present.` }, {\nproperty: \"requiresAll\", optional: true, type: \"string[]\", description: `Sets\nmultiple arguments by names that are required when this one is present.\ni.e. when using this argument, the following arguments must be present.` }, {\nproperty: \"requiresIf\", optional: true, type: \"[string, string]\", description:\n`Allows a conditional requirement with the signature [arg: string, value:\nstring].\nThe requirement will only become valid if \"arg\"'s value equals \\${value}.\n` }, { property: \"requiredIf\", optional: true, type: \"[string, string]\",\ndescription: `Allows specifying that an argument is required conditionally with\nthe signature [arg: string, value: string].\nThe requirement will only become valid if the \"arg\"'s value equals \\${value}.\n` }, { property: \"requireEquals\", optional: true, type: \"boolean\", description:\n`Requires that options use the --option=val syntax.\ni.e. an equals between the option and associated value.` }, ]} /> }, { property:\n\"description\", optional: true, type: \"string\", description: `Command description\nwhich will be shown on the help information.` }, { property: \"longDescription\",\noptional: true, type: \"string\", description: `Command long description which\nwill be shown on the help information.` }, { property: \"beforeHelp\", optional:\ntrue, type: \"string\", description: `Adds additional help information to be\ndisplayed in addition to auto-generated help.\nThis information is displayed before the auto-generated help information.\nThis is often used for header information.` }, { property: \"afterHelp\",\noptional: true, type: \"string\", description: `Adds additional help information\nto be displayed in addition to auto-generated help.\nThis information is displayed after the auto-generated help information.\nThis is often used to describe how to use the arguments, or caveats to be\nnoted.` }, { property: \"subcommands\", optional: true, type: \"{ [name: string]:\nCliConfig }\", description: `List of subcommands of this command.\nSubcommands are effectively sub-apps, because they can contain their own\narguments, subcommands, usage, etc.\nThey also function just like the app command, in that they get their own auto\ngenerated help and usage.` }, ]} /> }, { property: \"bundle\", type: \"object\",\nchild: cargo build.` }, { property: \"targets\", optional: true, type: \"string |\nstring[]\", description: `An array of the bundles you want to generate; e.g.\n[\"deb\", \"app\", \"msi\", \"appimage\", \"dmg\"] or the string 'all' to make every\nsupported bundle. By default we bundle everything your target supports (app/dmg\non mac, deb/appimage on linux, msi on windows).` }, { property: \"identifier\",\ntype: \"string\", description: `A string that uniquely identifies your\napplication, in reverse-DNS form (for example, \"com.example.appname\" or\n\"io.github.username.project\"). For OS X and iOS, this is used as the bundle's\nCFBundleIdentifier value; for Windows, this is hashed to create an application\nGUID.` }, { property: \"icon\", optional: true, type: \"string[]\", description: `A\nlist of (relative to src-tauri) icon paths to use for your application bundle.`\n}, { property: \"resources\", optional: true, type: \"string[]\", description: `A\nlist of files or directories which will be copied to the resources section of\nthe bundle. Globs are supported.` }, { property: \"externalBin\", optional: true,\ntype: \"string[]\", description: `A list of—either absolute or relative—paths to\nbinaries to embed with your application.\nNote that Tauri will look for system-specific binaries following the pattern\n\"binary-name{-target-triple}{.system-extension}\".\nE.g. you typed \"my-binary\":\n * \"my-binary-x86_64-pc-windows-msvc.exe\" for Windows\n * \"my-binary-x86_64-apple-darwin\" for macOS\n * \"my-binary-x86_64-unknown-linux-gnu\" for Linux\n\nso don't forget to provide binaries for all targeted platforms.\n` }, { property: \"copyright\", optional: true, type: \"string\", description: `A\ncopyright string associated with your application.` }, { property: \"category\",\noptional: true, type: \"string\", description: `What kind of application this is.\nShould be one among the following list:\nBusiness, DeveloperTool, Education, Entertainment, Finance, Game, ActionGame,\nAdventureGame, ArcadeGame, BoardGame, CardGame, CasinoGame, DiceGame,\nEducationalGame, FamilyGame, KidsGame, MusicGame, PuzzleGame, RacingGame,\nRolePlayingGame, SimulationGame, SportsGame, StrategyGame, TriviaGame, WordGame,\nGraphicsAndDesign, HealthcareAndFitness, Lifestyle, Medical, Music, News,\nPhotography, Productivity, Reference, SocialNetworking, Sports, Travel, Utility,\nVideo, Weather. ` }, { property: \"shortDescription\", optional: true, type:\n\"string\", description: `A short description of your application.` }, { property:\n\"longDescription\", optional: true, type: \"string\", description: `A longer,\nmulti-line description of the application.` }, { property: \"deb\", optional:\ntrue, type: \"object\", child: boostrapper script.` }, { property: \"files\",\noptional: true, type: \"{ [path: string]: string }\", description: `The files to\ninclude on the package. See the debian guide\n[/en/docs/guides/bundler/debian#custom-files].` }]} /> }, { property: \"windows\",\noptional: true, type: \"object\", child: } ]} /> }, { property: \"macOS\", optional:\ntrue, type: \"object\", child: boostrapper script.` }, { property:\n\"exceptionDomain\", optional: true, type: \"string\", description: `Allows your\napplication to communicate with the outside world.\nIt should be a lowercase, without port and protocol domain name.\n` }, { property: \"signingIdentity\", optional: true, type: \"string\", description:\n`Identity to use for code signing.` }, { property: \"entitlements\", optional:\ntrue, type: \"string\", description: `Path to the entitlements file.` }, ]} /> },\n]} /> }, { property: \"allowlist\", type: \"object\", child: }, { property:\n\"window\", optional: true, type: \"object\", child: }, { property: \"shell\",\noptional: true, type: \"object\", child: }, { property: \"dialog\", optional: true,\ntype: \"object\", child: }, { property: \"http\", optional: true, type: \"object\",\nchild: }, { property: \"notification\", optional: true, type: \"object\", child: },\n{ property: \"globalShortcut\", optional: true, type: \"object\", child: }, {\nproperty: \"os\", optional: true, type: \"object\", child: }, { property: \"path\",\noptional: true, type: \"object\", child: }, ]} /> }, { property: \"windows\", type:\n\"WindowConfig[]\", child: }, { property: \"security\", type: \"object\", child: This\nis a really important part of the configuration since it helps you ensure your\nWebView is secured. See more on Mozilla\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP]. ` }, ]} /> }, ]} />\n\nInstead of launching the app directly, we configure the bundled app to run a\nscript that tries to expose the environment variables to the app; without that\nyou'll have trouble using system CLI apps like Node.js. ```js title=Example\n\"tauri\": { \"cli\": { \"description\": \"Tauri communication example\",\n\"longDescription\": null, \"beforeHelp\": null, \"afterHelp\": null, \"args\": [{\n\"short\": \"c\", \"name\": \"config\", \"takesValue\": true, \"description\": \"Config path\"\n}, { \"short\": \"t\", \"name\": \"theme\", \"takesValue\": true, \"description\": \"App\ntheme\", \"possibleValues\": [\"light\", \"dark\", \"system\"] }, { \"short\": \"v\", \"name\":\n\"verbose\", \"multipleOccurrences\": true, \"description\": \"Verbosity level\" }],\n\"subcommands\": { \"update\": { \"description\": \"Updates the app\",\n\"longDescription\": null, \"beforeHelp\": null, \"afterHelp\": null, \"args\": [{\n\"short\": \"b\", \"name\": \"background\", \"description\": \"Update in background\" }],\n\"subcommands\": null } } }, \"bundle\": { \"active\": true, \"targets\": [\"deb\"],\n\"identifier\": \"com.tauri.dev\", \"icon\": [\"icons/32x32.png\", \"icons/128x128.png\",\n\"icons/128x128@2x.png\", \"icons/icon.icns\", \"icons/icon.ico\"], \"resources\": [],\n\"externalBin\": [], \"copyright\": \"\", \"category\": \"DeveloperTool\",\n\"shortDescription\": \"\", \"longDescription\": \"\", \"deb\": { \"depends\": [] },\n\"macOS\": { \"frameworks\": [], \"minimumSystemVersion\": \"\", \"exceptionDomain\": \"\" }\n}, \"allowlist\": { \"all\": true }, \"windows\": [{ \"title\": \"Tauri App\", \"width\":\n800, \"height\": 600, \"resizable\": true, \"fullscreen\": false }], \"security\": {\n\"csp\": \"default-src blob: data: filesystem: ws: wss: http: https: tauri:\n'unsafe-eval' 'unsafe-inline' 'self'\" } } ```","url":"https://tauri.studio/docs/api/config"},{"id":"prose_docs_api_js_index_md","title":{"content":"@tauri","type":"text"},"sections":["Modules"],"subSections":[],"code":[],"text":"@tauri-apps/api # @tauri-apps/api ## Modules - [app](modules/app.md) -\n[cli](modules/cli.md) - [clipboard](modules/clipboard.md) -\n[dialog](modules/dialog.md) - [event](modules/event.md) - [fs](modules/fs.md) -\n[globalShortcut](modules/globalShortcut.md) -\n[helpers/event](modules/helpers_event.md) -\n[helpers/os-check](modules/helpers_os_check.md) -\n[helpers/tauri](modules/helpers_tauri.md) - [http](modules/http.md) -\n[index](modules/index.md) - [notification](modules/notification.md) -\n[os](modules/os.md) - [path](modules/path.md) - [process](modules/process.md) -\n[shell](modules/shell.md) - [tauri](modules/tauri.md) -\n[updater](modules/updater.md) - [window](modules/window.md)","url":"https://tauri.studio/docs/api/js/index"},{"id":"prose_docs_api_js_classes_http_Body_md","title":{"content":"Class","type":"text"},"sections":["Properties","Methods"],"subSections":["payload","type","bytes","form","json","text"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / Body # Class: Body\n[http](../modules/http.md).Body The body object to be used on POST and PUT\nrequests. ## Properties ### payload • **payload**: `unknown` #### Defined in\n[http.ts:45](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L45)\n___ ### type • **type**: `string` #### Defined in\n[http.ts:44](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L44)\n## Methods ### bytes ▸ `Static` **bytes**(`bytes`): [`Body`](http.Body.md)\nCreates a new byte array body. #### Parameters | Name | Type | | :------ |\n:------ | | `bytes` | `number`[] | #### Returns [`Body`](http.Body.md) The body\nobject ready to be used on the POST and PUT requests. #### Defined in\n[http.ts:93](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L93)\n___ ### form ▸ `Static` **form**(`data`): [`Body`](http.Body.md) Creates a new\nform data body. #### Parameters | Name | Type | Description | | :------ |\n:------ | :------ | | `data` | `Record`<`string`,\n[`Part`](../modules/http.md#part)\\> | The body data. | #### Returns\n[`Body`](http.Body.md) The body object ready to be used on the POST and PUT\nrequests. #### Defined in\n[http.ts:60](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L60)\n___ ### json ▸ `Static` **json**(`data`): [`Body`](http.Body.md) Creates a new\nJSON body. #### Parameters | Name | Type | Description | | :------ | :------ |\n:------ | | `data` | `Record`<`any`, `any`\\> | The body JSON object. | ####\nReturns [`Body`](http.Body.md) The body object ready to be used on the POST and\nPUT requests. #### Defined in\n[http.ts:71](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L71)\n___ ### text ▸ `Static` **text**(`value`): [`Body`](http.Body.md) Creates a new\nUTF-8 string body. #### Parameters | Name | Type | | :------ | :------ | |\n`value` | `string` | #### Returns [`Body`](http.Body.md) The body object ready\nto be used on the POST and PUT requests. #### Defined in\n[http.ts:82](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L82)","url":"https://tauri.studio/docs/api/js/classes/http.Body"},{"id":"prose_docs_api_js_classes_http_Client_md","title":{"content":"Class","type":"text"},"sections":["Properties","Methods"],"subSections":["id","delete","drop","get","patch","post","put","request"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / Client # Class:\nClient [http](../modules/http.md).Client ## Properties ### id • **id**: `number`\n#### Defined in\n[http.ts:158](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L158)\n## Methods ### delete ▸ **delete**<`T`\\>(`url`, `options?`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes a DELETE request. ####\nType parameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `url` | `string` | The request\nURL. | | `options?` | [`RequestOptions`](../modules/http.md#requestoptions) |\nThe request options. | #### Returns\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> A promise resolving to the\nresponse. #### Defined in\n[http.ts:299](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L299)\n___ ### drop ▸ **drop**(): `Promise`<`void`\\> Drops the client instance. ####\nReturns `Promise`<`void`\\> #### Defined in\n[http.ts:169](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L169)\n___ ### get ▸ **get**<`T`\\>(`url`, `options?`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes a GET request. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `url` | `string` | The request\nURL. | | `options?` | [`RequestOptions`](../modules/http.md#requestoptions) |\nThe request options. | #### Returns\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> A promise resolving to the\nresponse. #### Defined in\n[http.ts:227](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L227)\n___ ### patch ▸ **patch**<`T`\\>(`url`, `options?`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes a PATCH request. ####\nType parameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `url` | `string` | The request\nURL. | | `options?` | [`RequestOptions`](../modules/http.md#requestoptions) |\nThe request options. | #### Returns\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> A promise resolving to the\nresponse. #### Defined in\n[http.ts:284](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L284)\n___ ### post ▸ **post**<`T`\\>(`url`, `body?`, `options?`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes a POST request. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `url` | `string` | The request\nURL. | | `body?` | [`Body`](http.Body.md) | The body of the request. | |\n`options?` | [`RequestOptions`](../modules/http.md#requestoptions) | The request\noptions. | #### Returns `Promise`<[`Response`](http.Response.md)<`T`\\>\\> A\npromise resolving to the response. #### Defined in\n[http.ts:243](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L243)\n___ ### put ▸ **put**<`T`\\>(`url`, `body?`, `options?`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes a PUT request. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `url` | `string` | The request\nURL. | | `body?` | [`Body`](http.Body.md) | The body of the request. | |\n`options?` | [`RequestOptions`](../modules/http.md#requestoptions) | Request\noptions. | #### Returns `Promise`<[`Response`](http.Response.md)<`T`\\>\\> A\npromise resolving to the response. #### Defined in\n[http.ts:264](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L264)\n___ ### request ▸ **request**<`T`\\>(`options`):\n`Promise`<[`Response`](http.Response.md)<`T`\\>\\> Makes an HTTP request. ####\nType parameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `options` |\n[`HttpOptions`](../interfaces/http.HttpOptions.md) | The request options. | ####\nReturns `Promise`<[`Response`](http.Response.md)<`T`\\>\\> A promise resolving to\nthe response. #### Defined in\n[http.ts:185](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L185)","url":"https://tauri.studio/docs/api/js/classes/http.Client"},{"id":"prose_docs_api_js_classes_http_Response_md","title":{"content":"Class","type":"text"},"sections":["Type parameters","Properties"],"subSections":["data","headers","ok","status","url"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / Response # Class:\nResponse [http](../modules/http.md).Response Response object. ## Type parameters\n| Name | | :------ | | `T` | ## Properties ### data • **data**: `T` The response\ndata. #### Defined in\n[http.ts:145](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L145)\n___ ### headers • **headers**: `Record`<`string`, `string`\\> The response\nheaders. #### Defined in\n[http.ts:143](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L143)\n___ ### ok • **ok**: `boolean` A boolean indicating whether the response was\nsuccessful (status in the range 200–299) or not. #### Defined in\n[http.ts:141](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L141)\n___ ### status • **status**: `number` The response status code. #### Defined in\n[http.ts:139](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L139)\n___ ### url • **url**: `string` The request URL. #### Defined in\n[http.ts:137](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L137)","url":"https://tauri.studio/docs/api/js/classes/http.Response"},{"id":"prose_docs_api_js_classes_shell_Child_md","title":{"content":"Class","type":"text"},"sections":["Constructors","Properties","Methods"],"subSections":["constructor","pid","kill","write"],"code":[],"text":"[@tauri-apps/api](../index.md) / [shell](../modules/shell.md) / Child # Class:\nChild [shell](../modules/shell.md).Child ## Constructors ### constructor • **new\nChild**(`pid`) #### Parameters | Name | Type | | :------ | :------ | | `pid` |\n`number` | #### Defined in\n[shell.ts:135](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L135)\n## Properties ### pid • **pid**: `number` The child process `pid`. #### Defined\nin\n[shell.ts:133](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L133)\n## Methods ### kill ▸ **kill**(): `Promise`<`void`\\> Kills the child process.\n#### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Defined in\n[shell.ts:169](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L169)\n___ ### write ▸ **write**(`data`): `Promise`<`void`\\> Writes `data` to the\n`stdin`. **`example`** ```typescript const command = new Command('node') const\nchild = await command.spawn() await child.write('message') await child.write([0,\n1, 2, 3, 4, 5]) ``` #### Parameters | Name | Type | Description | | :------ |\n:------ | :------ | | `data` | `string` \\| `number`[] | The message to write,\neither a string or a byte array. | #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Defined in\n[shell.ts:153](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L153)","url":"https://tauri.studio/docs/api/js/classes/shell.Child"},{"id":"prose_docs_api_js_classes_shell_Command_md","title":{"content":"Class","type":"text"},"sections":["Hierarchy","Constructors","Properties","Methods"],"subSections":["constructor","stderr","stdout","execute","on","spawn","sidecar"],"code":[],"text":"[@tauri-apps/api](../index.md) / [shell](../modules/shell.md) / Command # Class:\nCommand [shell](../modules/shell.md).Command The entry point for spawning child\nprocesses. It emits the `close` and `error` events. **`example`** ```typescript\nconst command = new Command('node') command.on('close', data => {\nconsole.log(`command finished with code ${data.code} and signal ${data.signal}`)\n}) command.on('error', error => console.error(`command error: \"${error}\"`))\ncommand.stdout.on('data', line => console.log(`command stdout: \"${line}\"`))\ncommand.stderr.on('data', line => console.log(`command stderr: \"${line}\"`))\nconst child = await command.spawn() console.log('pid:', child.pid) ``` ##\nHierarchy - `EventEmitter`<``\"close\"`` \\| ``\"error\"``\\> ↳ **`Command`** ##\nConstructors ### constructor • **new Command**(`program`, `args?`, `options?`)\nCreates a new `Command` instance. #### Parameters | Name | Type | Default value\n| Description | | :------ | :------ | :------ | :------ | | `program` | `string`\n| `undefined` | The program to execute. | | `args` | `string` \\| `string`[] |\n`[]` | Program arguments. | | `options?` |\n[`SpawnOptions`](../interfaces/shell.SpawnOptions.md) | `undefined` | Spawn\noptions. | #### Overrides EventEmitter<'close' \\| 'error'\\>.constructor ####\nDefined in\n[shell.ts:216](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L216)\n## Properties ### stderr • `Readonly` **stderr**: `EventEmitter`<``\"data\"``\\>\nEvent emitter for the `stderr`. Emits the `data` event. #### Defined in\n[shell.ts:207](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L207)\n___ ### stdout • `Readonly` **stdout**: `EventEmitter`<``\"data\"``\\> Event\nemitter for the `stdout`. Emits the `data` event. #### Defined in\n[shell.ts:205](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L205)\n## Methods ### execute ▸ **execute**():\n`Promise`<[`ChildProcess`](../interfaces/shell.ChildProcess.md)\\> Executes the\ncommand as a child process, waiting for it to finish and collecting all of its\noutput. **`example`** ```typescript const output = await new Command('echo',\n'message').execute() assert(output.code === 0) assert(output.signal === null)\nassert(output.stdout === 'message') assert(output.stderr === '') ``` ####\nReturns `Promise`<[`ChildProcess`](../interfaces/shell.ChildProcess.md)\\> A\npromise resolving to the child process output. #### Defined in\n[shell.ts:292](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L292)\n___ ### on ▸ **on**(`event`, `handler`): `EventEmitter`<``\"close\"`` \\|\n``\"error\"``\\> Listen to an event from the child process. #### Parameters | Name\n| Type | Description | | :------ | :------ | :------ | | `event` | ``\"close\"``\n\\| ``\"error\"`` | The event name. | | `handler` | (`arg`: `any`) => `void` | The\nevent handler. | #### Returns `EventEmitter`<``\"close\"`` \\| ``\"error\"``\\> The\n`this` instance for chained calls. #### Inherited from EventEmitter.on ####\nDefined in\n[shell.ts:125](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L125)\n___ ### spawn ▸ **spawn**(): `Promise`<[`Child`](shell.Child.md)\\> Executes the\ncommand as a child process, returning a handle to it. #### Returns\n`Promise`<[`Child`](shell.Child.md)\\> A promise resolving to the child process\nhandle. #### Defined in\n[shell.ts:255](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L255)\n___ ### sidecar ▸ `Static` **sidecar**(`program`, `args?`, `options?`):\n[`Command`](shell.Command.md) Creates a command to execute the given sidecar\nprogram. **`example`** ```typescript const command =\nCommand.sidecar('my-sidecar') const output = await command.execute() ``` ####\nParameters | Name | Type | Default value | Description | | :------ | :------ |\n:------ | :------ | | `program` | `string` | `undefined` | The program to\nexecute. | | `args` | `string` \\| `string`[] | `[]` | Program arguments. | |\n`options?` | [`SpawnOptions`](../interfaces/shell.SpawnOptions.md) | `undefined`\n| Spawn options. | #### Returns [`Command`](shell.Command.md) #### Defined in\n[shell.ts:240](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L240)","url":"https://tauri.studio/docs/api/js/classes/shell.Command"},{"id":"prose_docs_api_js_classes_window_LogicalPosition_md","title":{"content":"Class","type":"text"},"sections":["Constructors","Properties"],"subSections":["constructor","type","x","y"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) /\nLogicalPosition # Class: LogicalPosition\n[window](../modules/window.md).LogicalPosition A position represented in logical\npixels. ## Constructors ### constructor • **new LogicalPosition**(`x`, `y`) ####\nParameters | Name | Type | | :------ | :------ | | `x` | `number` | | `y` |\n`number` | #### Defined in\n[window.ts:138](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L138)\n## Properties ### type • **type**: `string` = `'Logical'` #### Defined in\n[window.ts:134](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L134)\n___ ### x • **x**: `number` #### Defined in\n[window.ts:135](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L135)\n___ ### y • **y**: `number` #### Defined in\n[window.ts:136](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L136)","url":"https://tauri.studio/docs/api/js/classes/window.LogicalPosition"},{"id":"prose_docs_api_js_classes_window_LogicalSize_md","title":{"content":"Class","type":"text"},"sections":["Constructors","Properties"],"subSections":["constructor","height","type","width"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / LogicalSize #\nClass: LogicalSize [window](../modules/window.md).LogicalSize A size represented\nin logical pixels. ## Constructors ### constructor • **new\nLogicalSize**(`width`, `height`) #### Parameters | Name | Type | | :------ |\n:------ | | `width` | `number` | | `height` | `number` | #### Defined in\n[window.ts:109](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L109)\n## Properties ### height • **height**: `number` #### Defined in\n[window.ts:107](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L107)\n___ ### type • **type**: `string` = `'Logical'` #### Defined in\n[window.ts:105](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L105)\n___ ### width • **width**: `number` #### Defined in\n[window.ts:106](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L106)","url":"https://tauri.studio/docs/api/js/classes/window.LogicalSize"},{"id":"prose_docs_api_js_classes_window_PhysicalPosition_md","title":{"content":"Class","type":"text"},"sections":["Constructors","Properties","Methods"],"subSections":["constructor","type","x","y","toLogical"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) /\nPhysicalPosition # Class: PhysicalPosition\n[window](../modules/window.md).PhysicalPosition A position represented in\nphysical pixels. ## Constructors ### constructor • **new PhysicalPosition**(`x`,\n`y`) #### Parameters | Name | Type | | :------ | :------ | | `x` | `number` | |\n`y` | `number` | #### Defined in\n[window.ts:150](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L150)\n## Properties ### type • **type**: `string` = `'Physical'` #### Defined in\n[window.ts:146](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L146)\n___ ### x • **x**: `number` #### Defined in\n[window.ts:147](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L147)\n___ ### y • **y**: `number` #### Defined in\n[window.ts:148](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L148)\n## Methods ### toLogical ▸ **toLogical**(`scaleFactor`):\n[`LogicalPosition`](window.LogicalPosition.md) Converts the physical position to\na logical one. #### Parameters | Name | Type | | :------ | :------ | |\n`scaleFactor` | `number` | #### Returns\n[`LogicalPosition`](window.LogicalPosition.md) #### Defined in\n[window.ts:156](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L156)","url":"https://tauri.studio/docs/api/js/classes/window.PhysicalPosition"},{"id":"prose_docs_api_js_classes_window_PhysicalSize_md","title":{"content":"Class","type":"text"},"sections":["Constructors","Properties","Methods"],"subSections":["constructor","height","type","width","toLogical"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / PhysicalSize #\nClass: PhysicalSize [window](../modules/window.md).PhysicalSize A size\nrepresented in physical pixels. ## Constructors ### constructor • **new\nPhysicalSize**(`width`, `height`) #### Parameters | Name | Type | | :------ |\n:------ | | `width` | `number` | | `height` | `number` | #### Defined in\n[window.ts:121](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L121)\n## Properties ### height • **height**: `number` #### Defined in\n[window.ts:119](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L119)\n___ ### type • **type**: `string` = `'Physical'` #### Defined in\n[window.ts:117](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L117)\n___ ### width • **width**: `number` #### Defined in\n[window.ts:118](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L118)\n## Methods ### toLogical ▸ **toLogical**(`scaleFactor`):\n[`LogicalSize`](window.LogicalSize.md) Converts the physical size to a logical\none. #### Parameters | Name | Type | | :------ | :------ | | `scaleFactor` |\n`number` | #### Returns [`LogicalSize`](window.LogicalSize.md) #### Defined in\n[window.ts:127](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L127)","url":"https://tauri.studio/docs/api/js/classes/window.PhysicalSize"},{"id":"prose_docs_api_js_classes_window_WebviewWindow_md","title":{"content":"Class","type":"text"},"sections":["Hierarchy","Constructors","Properties","Methods","Platform"],"subSections":["constructor","label","listeners","_","center","close","emit","hide","innerPosition","innerSize","isDecorated","isFullscreen","isMaximized","isResizable","isVisible","listen","maximize","minimize","once","outerPosition","outerSize","requestUserAttention","scaleFactor","setAlwaysOnTop","setDecorations","setFocus","setFullscreen","setIcon","setMaxSize","setMinSize","setPosition","setResizable","setSize","setSkipTaskbar","setTitle","show","startDragging","toggleMaximize","unmaximize","unminimize","getByLabel"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / WebviewWindow\n# Class: WebviewWindow [window](../modules/window.md).WebviewWindow Create new\nwebview windows and get a handle to existing ones. **`example`** ```typescript\n// loading embedded asset: const webview = new WebviewWindow('theUniqueLabel', {\nurl: 'path/to/page.html' }) // alternatively, load a remote URL: const webview =\nnew WebviewWindow('theUniqueLabel', { url: 'https://github.com/tauri-apps/tauri'\n}) webview.once('tauri://created', function () { // webview window successfully\ncreated }) webview.once('tauri://error', function (e) { // an error happened\ncreating the webview window }) // emit an event to the backend await\nwebview.emit(\"some event\", \"data\") // listen to an event from the backend const\nunlisten = await webview.listen(\"event name\", e => {}) unlisten() ``` ##\nHierarchy - [`WindowManager`](window.WindowManager.md) ↳ **`WebviewWindow`** ##\nConstructors ### constructor • **new WebviewWindow**(`label`, `options?`) ####\nParameters | Name | Type | | :------ | :------ | | `label` | `WindowLabel` | |\n`options` | [`WindowOptions`](../interfaces/window.WindowOptions.md) | ####\nOverrides\n[WindowManager](window.WindowManager.md).[constructor](window.WindowManager.md#constructor)\n#### Defined in\n[window.ts:1095](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1095)\n## Properties ### label • **label**: `WindowLabel` Window label. #### Inherited\nfrom\n[WindowManager](window.WindowManager.md).[label](window.WindowManager.md#label)\n#### Defined in\n[window.ts:229](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L229)\n___ ### listeners • **listeners**: `Object` Local event listeners. #### Index\nsignature ▪ [key: `string`]:\n[`EventCallback`](../modules/event.md#eventcallback)<`any`\\>[] #### Inherited\nfrom\n[WindowManager](window.WindowManager.md).[listeners](window.WindowManager.md#listeners)\n#### Defined in\n[window.ts:231](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L231)\n## Methods ### \\_handleTauriEvent ▸ **_handleTauriEvent**<`T`\\>(`event`,\n`handler`): `boolean` #### Type parameters | Name | | :------ | | `T` | ####\nParameters | Name | Type | | :------ | :------ | | `event` | `string` | |\n`handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | ####\nReturns `boolean` #### Inherited from\n[WindowManager](window.WindowManager.md).[_handleTauriEvent](window.WindowManager.md#_handletaurievent)\n#### Defined in\n[window.ts:295](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L295)\n___ ### center ▸ **center**(): `Promise`<`void`\\> Centers the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[center](window.WindowManager.md#center)\n#### Defined in\n[window.ts:489](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L489)\n___ ### close ▸ **close**(): `Promise`<`void`\\> Closes the window. #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Inherited from\n[WindowManager](window.WindowManager.md).[close](window.WindowManager.md#close)\n#### Defined in\n[window.ts:734](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L734)\n___ ### emit ▸ **emit**(`event`, `payload?`): `Promise`<`void`\\> Emits an event\nto the backend, tied to the webview window. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `payload?` | `string` | Event payload. | #### Returns `Promise`<`void`\\>\n#### Inherited from\n[WindowManager](window.WindowManager.md).[emit](window.WindowManager.md#emit)\n#### Defined in\n[window.ts:284](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L284)\n___ ### hide ▸ **hide**(): `Promise`<`void`\\> Sets the window visibility to\nfalse. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[hide](window.WindowManager.md#hide)\n#### Defined in\n[window.ts:714](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L714)\n___ ### innerPosition ▸ **innerPosition**():\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> The position of the\ntop-left hand corner of the window's client area relative to the top-left hand\ncorner of the desktop. #### Returns\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[innerPosition](window.WindowManager.md#innerposition)\n#### Defined in\n[window.ts:332](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L332)\n___ ### innerSize ▸ **innerSize**():\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> The physical size of the\nwindow's client area. The client area is the content of the window, excluding\nthe title bar and borders. #### Returns\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[innerSize](window.WindowManager.md#innersize)\n#### Defined in\n[window.ts:367](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L367)\n___ ### isDecorated ▸ **isDecorated**(): `Promise`<`boolean`\\> Gets the window's\ncurrent decorated state. #### Returns `Promise`<`boolean`\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[isDecorated](window.WindowManager.md#isdecorated)\n#### Defined in\n[window.ts:434](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L434)\n___ ### isFullscreen ▸ **isFullscreen**(): `Promise`<`boolean`\\> Gets the\nwindow's current fullscreen state. #### Returns `Promise`<`boolean`\\> ####\nInherited from\n[WindowManager](window.WindowManager.md).[isFullscreen](window.WindowManager.md#isfullscreen)\n#### Defined in\n[window.ts:402](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L402)\n___ ### isMaximized ▸ **isMaximized**(): `Promise`<`boolean`\\> Gets the window's\ncurrent maximized state. #### Returns `Promise`<`boolean`\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[isMaximized](window.WindowManager.md#ismaximized)\n#### Defined in\n[window.ts:418](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L418)\n___ ### isResizable ▸ **isResizable**(): `Promise`<`boolean`\\> Gets the window's\ncurrent resizable state. #### Returns `Promise`<`boolean`\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[isResizable](window.WindowManager.md#isresizable)\n#### Defined in\n[window.ts:450](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L450)\n___ ### isVisible ▸ **isVisible**(): `Promise`<`boolean`\\> Gets the window's\ncurrent visible state. #### Returns `Promise`<`boolean`\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[isVisible](window.WindowManager.md#isvisible)\n#### Defined in\n[window.ts:466](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L466)\n___ ### listen ▸ **listen**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an event\nemitted by the backend that is tied to the webview window. #### Type parameters\n| Name | | :------ | | `T` | #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `event` |\n[`EventName`](../modules/event.md#eventname) | Event name. | | `handler` |\n[`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | Event handler. |\n#### Returns `Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A\npromise resolving to a function to unlisten to the event. #### Inherited from\n[WindowManager](window.WindowManager.md).[listen](window.WindowManager.md#listen)\n#### Defined in\n[window.ts:246](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L246)\n___ ### maximize ▸ **maximize**(): `Promise`<`void`\\> Maximizes the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[maximize](window.WindowManager.md#maximize)\n#### Defined in\n[window.ts:594](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L594)\n___ ### minimize ▸ **minimize**(): `Promise`<`void`\\> Minimizes the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[minimize](window.WindowManager.md#minimize)\n#### Defined in\n[window.ts:654](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L654)\n___ ### once ▸ **once**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an one-off\nevent emitted by the backend that is tied to the webview window. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> |\nEvent handler. | #### Returns\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A promise resolving\nto a function to unlisten to the event. #### Inherited from\n[WindowManager](window.WindowManager.md).[once](window.WindowManager.md#once)\n#### Defined in\n[window.ts:267](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L267)\n___ ### outerPosition ▸ **outerPosition**():\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> The position of the\ntop-left hand corner of the window relative to the top-left hand corner of the\ndesktop. #### Returns\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[outerPosition](window.WindowManager.md#outerposition)\n#### Defined in\n[window.ts:348](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L348)\n___ ### outerSize ▸ **outerSize**():\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> The physical size of the\nentire window. These dimensions include the title bar and borders. If you don't\nwant that (and you usually don't), use inner_size instead. #### Returns\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[outerSize](window.WindowManager.md#outersize)\n#### Defined in\n[window.ts:386](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L386)\n___ ### requestUserAttention ▸ **requestUserAttention**(`requestType`):\n`Promise`<`void`\\> Requests user attention to the window, this has no effect if\nthe application is already focused. How requesting for user attention manifests\nis platform dependent, see `UserAttentionType` for details. Providing `null`\nwill unset the request for user attention. Unsetting the request for user\nattention might not be done automatically by the WM when the window receives\ninput. ## Platform-specific - **macOS:** `null` has no effect. #### Parameters |\nName | Type | | :------ | :------ | | `requestType` | ``null`` \\|\n[`UserAttentionType`](../enums/window.UserAttentionType.md) | #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Inherited from\n[WindowManager](window.WindowManager.md).[requestUserAttention](window.WindowManager.md#requestuserattention)\n#### Defined in\n[window.ts:519](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L519)\n___ ### scaleFactor ▸ **scaleFactor**(): `Promise`<`number`\\> The scale factor\nthat can be used to map physical pixels to logical pixels. #### Returns\n`Promise`<`number`\\> #### Inherited from\n[WindowManager](window.WindowManager.md).[scaleFactor](window.WindowManager.md#scalefactor)\n#### Defined in\n[window.ts:316](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L316)\n___ ### setAlwaysOnTop ▸ **setAlwaysOnTop**(`alwaysOnTop`): `Promise`<`void`\\>\nWhether the window should always be on top of other windows. #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `alwaysOnTop` |\n`boolean` | Whether the window should always be on top of other windows or not.\n| #### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setAlwaysOnTop](window.WindowManager.md#setalwaysontop)\n#### Defined in\n[window.ts:777](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L777)\n___ ### setDecorations ▸ **setDecorations**(`decorations`): `Promise`<`void`\\>\nWhether the window should have borders and bars. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `decorations` | `boolean` |\nWhether the window should have borders and bars. | #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Inherited from\n[WindowManager](window.WindowManager.md).[setDecorations](window.WindowManager.md#setdecorations)\n#### Defined in\n[window.ts:755](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L755)\n___ ### setFocus ▸ **setFocus**(): `Promise`<`void`\\> Bring the window to front\nand focus. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setFocus](window.WindowManager.md#setfocus)\n#### Defined in\n[window.ts:985](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L985)\n___ ### setFullscreen ▸ **setFullscreen**(`fullscreen`): `Promise`<`void`\\> Sets\nthe window fullscreen state. #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `fullscreen` | `boolean` | Whether the window\nshould go to fullscreen or not. | #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setFullscreen](window.WindowManager.md#setfullscreen)\n#### Defined in\n[window.ts:964](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L964)\n___ ### setIcon ▸ **setIcon**(`icon`): `Promise`<`void`\\> Sets the window icon.\n#### Parameters | Name | Type | Description | | :------ | :------ | :------ | |\n`icon` | `string` \\| `number`[] | Icon bytes or path to the icon file. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setIcon](window.WindowManager.md#seticon)\n#### Defined in\n[window.ts:1006](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1006)\n___ ### setMaxSize ▸ **setMaxSize**(`size`): `Promise`<`void`\\> Sets the window\nmax size. If the `size` argument is undefined, the max size is unset.\n**`example`** ```typescript import { appWindow, LogicalSize } from\n'@tauri-apps/api/window' await appWindow.setMaxSize(new LogicalSize(600, 500))\n``` #### Parameters | Name | Type | Description | | :------ | :------ | :------\n| | `size` | `undefined` \\| [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setMaxSize](window.WindowManager.md#setmaxsize)\n#### Defined in\n[window.ts:884](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L884)\n___ ### setMinSize ▸ **setMinSize**(`size`): `Promise`<`void`\\> Sets the window\nmin size. If the `size` argument is not provided, the min size is unset.\n**`example`** ```typescript import { appWindow, PhysicalSize } from\n'@tauri-apps/api/window' await appWindow.setMinSize(new PhysicalSize(600, 500))\n``` #### Parameters | Name | Type | Description | | :------ | :------ | :------\n| | `size` | `undefined` \\| [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setMinSize](window.WindowManager.md#setminsize)\n#### Defined in\n[window.ts:842](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L842)\n___ ### setPosition ▸ **setPosition**(`position`): `Promise`<`void`\\> Sets the\nwindow position. **`example`** ```typescript import { appWindow, LogicalPosition\n} from '@tauri-apps/api/window' await appWindow.setPosition(new\nLogicalPosition(600, 500)) ``` #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `position` |\n[`PhysicalPosition`](window.PhysicalPosition.md) \\|\n[`LogicalPosition`](window.LogicalPosition.md) | The new position, in logical or\nphysical pixels. | #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setPosition](window.WindowManager.md#setposition)\n#### Defined in\n[window.ts:926](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L926)\n___ ### setResizable ▸ **setResizable**(`resizable`): `Promise`<`void`\\> Updates\nthe window resizable flag. #### Parameters | Name | Type | | :------ | :------ |\n| `resizable` | `boolean` | #### Returns `Promise`<`void`\\> A promise indicating\nthe success or failure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setResizable](window.WindowManager.md#setresizable)\n#### Defined in\n[window.ts:551](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L551)\n___ ### setSize ▸ **setSize**(`size`): `Promise`<`void`\\> Resizes the window.\n**`example`** ```typescript import { appWindow, LogicalSize } from\n'@tauri-apps/api/window' await appWindow.setSize(new LogicalSize(600, 500)) ```\n#### Parameters | Name | Type | Description | | :------ | :------ | :------ | |\n`size` | [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setSize](window.WindowManager.md#setsize)\n#### Defined in\n[window.ts:804](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L804)\n___ ### setSkipTaskbar ▸ **setSkipTaskbar**(`skip`): `Promise`<`void`\\> Whether\nto show the window icon in the task bar or not. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `skip` | `boolean` | true to\nhide window icon, false to show it. | #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[setSkipTaskbar](window.WindowManager.md#setskiptaskbar)\n#### Defined in\n[window.ts:1030](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1030)\n___ ### setTitle ▸ **setTitle**(`title`): `Promise`<`void`\\> Sets the window\ntitle. #### Parameters | Name | Type | Description | | :------ | :------ |\n:------ | | `title` | `string` | The new title | #### Returns `Promise`<`void`\\>\nA promise indicating the success or failure of the operation. #### Inherited\nfrom\n[WindowManager](window.WindowManager.md).[setTitle](window.WindowManager.md#settitle)\n#### Defined in\n[window.ts:573](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L573)\n___ ### show ▸ **show**(): `Promise`<`void`\\> Sets the window visibility to\ntrue. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[show](window.WindowManager.md#show)\n#### Defined in\n[window.ts:694](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L694)\n___ ### startDragging ▸ **startDragging**(): `Promise`<`void`\\> Starts dragging\nthe window. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[startDragging](window.WindowManager.md#startdragging)\n#### Defined in\n[window.ts:1051](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1051)\n___ ### toggleMaximize ▸ **toggleMaximize**(): `Promise`<`void`\\> Toggles the\nwindow maximized state. #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[toggleMaximize](window.WindowManager.md#togglemaximize)\n#### Defined in\n[window.ts:634](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L634)\n___ ### unmaximize ▸ **unmaximize**(): `Promise`<`void`\\> Unmaximizes the\nwindow. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[unmaximize](window.WindowManager.md#unmaximize)\n#### Defined in\n[window.ts:614](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L614)\n___ ### unminimize ▸ **unminimize**(): `Promise`<`void`\\> Unminimizes the\nwindow. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Inherited from\n[WindowManager](window.WindowManager.md).[unminimize](window.WindowManager.md#unminimize)\n#### Defined in\n[window.ts:674](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L674)\n___ ### getByLabel ▸ `Static` **getByLabel**(`label`): ``null`` \\|\n[`WebviewWindow`](window.WebviewWindow.md) Gets the WebviewWindow for the\nwebview associated with the given label. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `label` | `string` | The webview\nwindow label. | #### Returns ``null`` \\|\n[`WebviewWindow`](window.WebviewWindow.md) The WebviewWindow instance to\ncommunicate with the webview or null if the webview doesn't exist. #### Defined\nin\n[window.ts:1122](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1122)","url":"https://tauri.studio/docs/api/js/classes/window.WebviewWindow"},{"id":"prose_docs_api_js_classes_window_WebviewWindowHandle_md","title":{"content":"Class","type":"text"},"sections":["Hierarchy","Constructors","Properties","Methods"],"subSections":["constructor","label","listeners","_","emit","listen","once"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) /\nWebviewWindowHandle # Class: WebviewWindowHandle\n[window](../modules/window.md).WebviewWindowHandle A webview window handle\nallows emitting and listening to events from the backend that are tied to the\nwindow. ## Hierarchy - **`WebviewWindowHandle`** ↳\n[`WindowManager`](window.WindowManager.md) ## Constructors ### constructor •\n**new WebviewWindowHandle**(`label`) #### Parameters | Name | Type | | :------ |\n:------ | | `label` | `WindowLabel` | #### Defined in\n[window.ts:233](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L233)\n## Properties ### label • **label**: `WindowLabel` Window label. #### Defined in\n[window.ts:229](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L229)\n___ ### listeners • **listeners**: `Object` Local event listeners. #### Index\nsignature ▪ [key: `string`]:\n[`EventCallback`](../modules/event.md#eventcallback)<`any`\\>[] #### Defined in\n[window.ts:231](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L231)\n## Methods ### \\_handleTauriEvent ▸ **_handleTauriEvent**<`T`\\>(`event`,\n`handler`): `boolean` #### Type parameters | Name | | :------ | | `T` | ####\nParameters | Name | Type | | :------ | :------ | | `event` | `string` | |\n`handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | ####\nReturns `boolean` #### Defined in\n[window.ts:295](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L295)\n___ ### emit ▸ **emit**(`event`, `payload?`): `Promise`<`void`\\> Emits an event\nto the backend, tied to the webview window. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `payload?` | `string` | Event payload. | #### Returns `Promise`<`void`\\>\n#### Defined in\n[window.ts:284](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L284)\n___ ### listen ▸ **listen**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an event\nemitted by the backend that is tied to the webview window. #### Type parameters\n| Name | | :------ | | `T` | #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `event` |\n[`EventName`](../modules/event.md#eventname) | Event name. | | `handler` |\n[`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | Event handler. |\n#### Returns `Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A\npromise resolving to a function to unlisten to the event. #### Defined in\n[window.ts:246](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L246)\n___ ### once ▸ **once**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an one-off\nevent emitted by the backend that is tied to the webview window. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> |\nEvent handler. | #### Returns\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A promise resolving\nto a function to unlisten to the event. #### Defined in\n[window.ts:267](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L267)","url":"https://tauri.studio/docs/api/js/classes/window.WebviewWindowHandle"},{"id":"prose_docs_api_js_classes_window_WindowManager_md","title":{"content":"Class","type":"text"},"sections":["Hierarchy","Constructors","Properties","Methods","Platform"],"subSections":["constructor","label","listeners","_","center","close","emit","hide","innerPosition","innerSize","isDecorated","isFullscreen","isMaximized","isResizable","isVisible","listen","maximize","minimize","once","outerPosition","outerSize","requestUserAttention","scaleFactor","setAlwaysOnTop","setDecorations","setFocus","setFullscreen","setIcon","setMaxSize","setMinSize","setPosition","setResizable","setSize","setSkipTaskbar","setTitle","show","startDragging","toggleMaximize","unmaximize","unminimize"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / WindowManager\n# Class: WindowManager [window](../modules/window.md).WindowManager Manage the\ncurrent window object. ## Hierarchy -\n[`WebviewWindowHandle`](window.WebviewWindowHandle.md) ↳ **`WindowManager`** ↳↳\n[`WebviewWindow`](window.WebviewWindow.md) ## Constructors ### constructor •\n**new WindowManager**(`label`) #### Parameters | Name | Type | | :------ |\n:------ | | `label` | `WindowLabel` | #### Inherited from\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[constructor](window.WebviewWindowHandle.md#constructor)\n#### Defined in\n[window.ts:233](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L233)\n## Properties ### label • **label**: `WindowLabel` Window label. #### Inherited\nfrom\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[label](window.WebviewWindowHandle.md#label)\n#### Defined in\n[window.ts:229](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L229)\n___ ### listeners • **listeners**: `Object` Local event listeners. #### Index\nsignature ▪ [key: `string`]:\n[`EventCallback`](../modules/event.md#eventcallback)<`any`\\>[] #### Inherited\nfrom\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[listeners](window.WebviewWindowHandle.md#listeners)\n#### Defined in\n[window.ts:231](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L231)\n## Methods ### \\_handleTauriEvent ▸ **_handleTauriEvent**<`T`\\>(`event`,\n`handler`): `boolean` #### Type parameters | Name | | :------ | | `T` | ####\nParameters | Name | Type | | :------ | :------ | | `event` | `string` | |\n`handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | ####\nReturns `boolean` #### Inherited from\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[_handleTauriEvent](window.WebviewWindowHandle.md#_handletaurievent)\n#### Defined in\n[window.ts:295](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L295)\n___ ### center ▸ **center**(): `Promise`<`void`\\> Centers the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:489](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L489)\n___ ### close ▸ **close**(): `Promise`<`void`\\> Closes the window. #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Defined in\n[window.ts:734](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L734)\n___ ### emit ▸ **emit**(`event`, `payload?`): `Promise`<`void`\\> Emits an event\nto the backend, tied to the webview window. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `payload?` | `string` | Event payload. | #### Returns `Promise`<`void`\\>\n#### Inherited from\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[emit](window.WebviewWindowHandle.md#emit)\n#### Defined in\n[window.ts:284](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L284)\n___ ### hide ▸ **hide**(): `Promise`<`void`\\> Sets the window visibility to\nfalse. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:714](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L714)\n___ ### innerPosition ▸ **innerPosition**():\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> The position of the\ntop-left hand corner of the window's client area relative to the top-left hand\ncorner of the desktop. #### Returns\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> #### Defined in\n[window.ts:332](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L332)\n___ ### innerSize ▸ **innerSize**():\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> The physical size of the\nwindow's client area. The client area is the content of the window, excluding\nthe title bar and borders. #### Returns\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> #### Defined in\n[window.ts:367](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L367)\n___ ### isDecorated ▸ **isDecorated**(): `Promise`<`boolean`\\> Gets the window's\ncurrent decorated state. #### Returns `Promise`<`boolean`\\> #### Defined in\n[window.ts:434](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L434)\n___ ### isFullscreen ▸ **isFullscreen**(): `Promise`<`boolean`\\> Gets the\nwindow's current fullscreen state. #### Returns `Promise`<`boolean`\\> ####\nDefined in\n[window.ts:402](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L402)\n___ ### isMaximized ▸ **isMaximized**(): `Promise`<`boolean`\\> Gets the window's\ncurrent maximized state. #### Returns `Promise`<`boolean`\\> #### Defined in\n[window.ts:418](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L418)\n___ ### isResizable ▸ **isResizable**(): `Promise`<`boolean`\\> Gets the window's\ncurrent resizable state. #### Returns `Promise`<`boolean`\\> #### Defined in\n[window.ts:450](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L450)\n___ ### isVisible ▸ **isVisible**(): `Promise`<`boolean`\\> Gets the window's\ncurrent visible state. #### Returns `Promise`<`boolean`\\> #### Defined in\n[window.ts:466](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L466)\n___ ### listen ▸ **listen**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an event\nemitted by the backend that is tied to the webview window. #### Type parameters\n| Name | | :------ | | `T` | #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `event` |\n[`EventName`](../modules/event.md#eventname) | Event name. | | `handler` |\n[`EventCallback`](../modules/event.md#eventcallback)<`T`\\> | Event handler. |\n#### Returns `Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A\npromise resolving to a function to unlisten to the event. #### Inherited from\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[listen](window.WebviewWindowHandle.md#listen)\n#### Defined in\n[window.ts:246](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L246)\n___ ### maximize ▸ **maximize**(): `Promise`<`void`\\> Maximizes the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:594](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L594)\n___ ### minimize ▸ **minimize**(): `Promise`<`void`\\> Minimizes the window. ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:654](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L654)\n___ ### once ▸ **once**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> Listen to an one-off\nevent emitted by the backend that is tied to the webview window. #### Type\nparameters | Name | | :------ | | `T` | #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `event` | `string` | Event name.\n| | `handler` | [`EventCallback`](../modules/event.md#eventcallback)<`T`\\> |\nEvent handler. | #### Returns\n`Promise`<[`UnlistenFn`](../modules/event.md#unlistenfn)\\> A promise resolving\nto a function to unlisten to the event. #### Inherited from\n[WebviewWindowHandle](window.WebviewWindowHandle.md).[once](window.WebviewWindowHandle.md#once)\n#### Defined in\n[window.ts:267](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L267)\n___ ### outerPosition ▸ **outerPosition**():\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> The position of the\ntop-left hand corner of the window relative to the top-left hand corner of the\ndesktop. #### Returns\n`Promise`<[`PhysicalPosition`](window.PhysicalPosition.md)\\> #### Defined in\n[window.ts:348](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L348)\n___ ### outerSize ▸ **outerSize**():\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> The physical size of the\nentire window. These dimensions include the title bar and borders. If you don't\nwant that (and you usually don't), use inner_size instead. #### Returns\n`Promise`<[`PhysicalSize`](window.PhysicalSize.md)\\> #### Defined in\n[window.ts:386](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L386)\n___ ### requestUserAttention ▸ **requestUserAttention**(`requestType`):\n`Promise`<`void`\\> Requests user attention to the window, this has no effect if\nthe application is already focused. How requesting for user attention manifests\nis platform dependent, see `UserAttentionType` for details. Providing `null`\nwill unset the request for user attention. Unsetting the request for user\nattention might not be done automatically by the WM when the window receives\ninput. ## Platform-specific - **macOS:** `null` has no effect. #### Parameters |\nName | Type | | :------ | :------ | | `requestType` | ``null`` \\|\n[`UserAttentionType`](../enums/window.UserAttentionType.md) | #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Defined in\n[window.ts:519](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L519)\n___ ### scaleFactor ▸ **scaleFactor**(): `Promise`<`number`\\> The scale factor\nthat can be used to map physical pixels to logical pixels. #### Returns\n`Promise`<`number`\\> #### Defined in\n[window.ts:316](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L316)\n___ ### setAlwaysOnTop ▸ **setAlwaysOnTop**(`alwaysOnTop`): `Promise`<`void`\\>\nWhether the window should always be on top of other windows. #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `alwaysOnTop` |\n`boolean` | Whether the window should always be on top of other windows or not.\n| #### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Defined in\n[window.ts:777](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L777)\n___ ### setDecorations ▸ **setDecorations**(`decorations`): `Promise`<`void`\\>\nWhether the window should have borders and bars. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `decorations` | `boolean` |\nWhether the window should have borders and bars. | #### Returns\n`Promise`<`void`\\> A promise indicating the success or failure of the operation.\n#### Defined in\n[window.ts:755](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L755)\n___ ### setFocus ▸ **setFocus**(): `Promise`<`void`\\> Bring the window to front\nand focus. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:985](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L985)\n___ ### setFullscreen ▸ **setFullscreen**(`fullscreen`): `Promise`<`void`\\> Sets\nthe window fullscreen state. #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `fullscreen` | `boolean` | Whether the window\nshould go to fullscreen or not. | #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Defined in\n[window.ts:964](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L964)\n___ ### setIcon ▸ **setIcon**(`icon`): `Promise`<`void`\\> Sets the window icon.\n#### Parameters | Name | Type | Description | | :------ | :------ | :------ | |\n`icon` | `string` \\| `number`[] | Icon bytes or path to the icon file. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:1006](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1006)\n___ ### setMaxSize ▸ **setMaxSize**(`size`): `Promise`<`void`\\> Sets the window\nmax size. If the `size` argument is undefined, the max size is unset.\n**`example`** ```typescript import { appWindow, LogicalSize } from\n'@tauri-apps/api/window' await appWindow.setMaxSize(new LogicalSize(600, 500))\n``` #### Parameters | Name | Type | Description | | :------ | :------ | :------\n| | `size` | `undefined` \\| [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:884](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L884)\n___ ### setMinSize ▸ **setMinSize**(`size`): `Promise`<`void`\\> Sets the window\nmin size. If the `size` argument is not provided, the min size is unset.\n**`example`** ```typescript import { appWindow, PhysicalSize } from\n'@tauri-apps/api/window' await appWindow.setMinSize(new PhysicalSize(600, 500))\n``` #### Parameters | Name | Type | Description | | :------ | :------ | :------\n| | `size` | `undefined` \\| [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:842](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L842)\n___ ### setPosition ▸ **setPosition**(`position`): `Promise`<`void`\\> Sets the\nwindow position. **`example`** ```typescript import { appWindow, LogicalPosition\n} from '@tauri-apps/api/window' await appWindow.setPosition(new\nLogicalPosition(600, 500)) ``` #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `position` |\n[`PhysicalPosition`](window.PhysicalPosition.md) \\|\n[`LogicalPosition`](window.LogicalPosition.md) | The new position, in logical or\nphysical pixels. | #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Defined in\n[window.ts:926](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L926)\n___ ### setResizable ▸ **setResizable**(`resizable`): `Promise`<`void`\\> Updates\nthe window resizable flag. #### Parameters | Name | Type | | :------ | :------ |\n| `resizable` | `boolean` | #### Returns `Promise`<`void`\\> A promise indicating\nthe success or failure of the operation. #### Defined in\n[window.ts:551](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L551)\n___ ### setSize ▸ **setSize**(`size`): `Promise`<`void`\\> Resizes the window.\n**`example`** ```typescript import { appWindow, LogicalSize } from\n'@tauri-apps/api/window' await appWindow.setSize(new LogicalSize(600, 500)) ```\n#### Parameters | Name | Type | Description | | :------ | :------ | :------ | |\n`size` | [`PhysicalSize`](window.PhysicalSize.md) \\|\n[`LogicalSize`](window.LogicalSize.md) | The logical or physical size. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[window.ts:804](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L804)\n___ ### setSkipTaskbar ▸ **setSkipTaskbar**(`skip`): `Promise`<`void`\\> Whether\nto show the window icon in the task bar or not. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `skip` | `boolean` | true to\nhide window icon, false to show it. | #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Defined in\n[window.ts:1030](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1030)\n___ ### setTitle ▸ **setTitle**(`title`): `Promise`<`void`\\> Sets the window\ntitle. #### Parameters | Name | Type | Description | | :------ | :------ |\n:------ | | `title` | `string` | The new title | #### Returns `Promise`<`void`\\>\nA promise indicating the success or failure of the operation. #### Defined in\n[window.ts:573](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L573)\n___ ### show ▸ **show**(): `Promise`<`void`\\> Sets the window visibility to\ntrue. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:694](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L694)\n___ ### startDragging ▸ **startDragging**(): `Promise`<`void`\\> Starts dragging\nthe window. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:1051](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1051)\n___ ### toggleMaximize ▸ **toggleMaximize**(): `Promise`<`void`\\> Toggles the\nwindow maximized state. #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Defined in\n[window.ts:634](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L634)\n___ ### unmaximize ▸ **unmaximize**(): `Promise`<`void`\\> Unmaximizes the\nwindow. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:614](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L614)\n___ ### unminimize ▸ **unminimize**(): `Promise`<`void`\\> Unminimizes the\nwindow. #### Returns `Promise`<`void`\\> A promise indicating the success or\nfailure of the operation. #### Defined in\n[window.ts:674](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L674)","url":"https://tauri.studio/docs/api/js/classes/window.WindowManager"},{"id":"prose_docs_api_js_enums_fs_BaseDirectory_md","title":{"content":"Enumeration","type":"text"},"sections":["Enumeration members"],"subSections":["App","Audio","Cache","Config","Current","Data","Desktop","Document","Download","Executable","Font","Home","LocalData","Picture","Public","Resource","Runtime","Template","Video"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / BaseDirectory #\nEnumeration: BaseDirectory [fs](../modules/fs.md).BaseDirectory ## Enumeration\nmembers ### App • **App** = `18` #### Defined in\n[fs.ts:56](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L56)\n___ ### Audio • **Audio** = `1` #### Defined in\n[fs.ts:39](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L39)\n___ ### Cache • **Cache** = `2` #### Defined in\n[fs.ts:40](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L40)\n___ ### Config • **Config** = `3` #### Defined in\n[fs.ts:41](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L41)\n___ ### Current • **Current** = `19` #### Defined in\n[fs.ts:57](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L57)\n___ ### Data • **Data** = `4` #### Defined in\n[fs.ts:42](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L42)\n___ ### Desktop • **Desktop** = `6` #### Defined in\n[fs.ts:44](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L44)\n___ ### Document • **Document** = `7` #### Defined in\n[fs.ts:45](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L45)\n___ ### Download • **Download** = `8` #### Defined in\n[fs.ts:46](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L46)\n___ ### Executable • **Executable** = `9` #### Defined in\n[fs.ts:47](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L47)\n___ ### Font • **Font** = `10` #### Defined in\n[fs.ts:48](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L48)\n___ ### Home • **Home** = `11` #### Defined in\n[fs.ts:49](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L49)\n___ ### LocalData • **LocalData** = `5` #### Defined in\n[fs.ts:43](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L43)\n___ ### Picture • **Picture** = `12` #### Defined in\n[fs.ts:50](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L50)\n___ ### Public • **Public** = `13` #### Defined in\n[fs.ts:51](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L51)\n___ ### Resource • **Resource** = `17` #### Defined in\n[fs.ts:55](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L55)\n___ ### Runtime • **Runtime** = `14` #### Defined in\n[fs.ts:52](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L52)\n___ ### Template • **Template** = `15` #### Defined in\n[fs.ts:53](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L53)\n___ ### Video • **Video** = `16` #### Defined in\n[fs.ts:54](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L54)","url":"https://tauri.studio/docs/api/js/enums/fs.BaseDirectory"},{"id":"prose_docs_api_js_enums_http_ResponseType_md","title":{"content":"Enumeration","type":"text"},"sections":["Enumeration members"],"subSections":["Binary","JSON","Text"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / ResponseType #\nEnumeration: ResponseType [http](../modules/http.md).ResponseType ## Enumeration\nmembers ### Binary • **Binary** = `3` #### Defined in\n[http.ts:37](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L37)\n___ ### JSON • **JSON** = `1` #### Defined in\n[http.ts:35](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L35)\n___ ### Text • **Text** = `2` #### Defined in\n[http.ts:36](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L36)","url":"https://tauri.studio/docs/api/js/enums/http.ResponseType"},{"id":"prose_docs_api_js_enums_window_UserAttentionType_md","title":{"content":"Enumeration","type":"text"},"sections":["Enumeration members"],"subSections":["Critical","Informational"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) /\nUserAttentionType # Enumeration: UserAttentionType\n[window](../modules/window.md).UserAttentionType Attention type to request on a\nwindow. ## Enumeration members ### Critical • **Critical** = `1` ##\nPlatform-specific - **macOS:** Bounces the dock icon until the application is in\nfocus. - **Windows:** Flashes both the window and the taskbar button until the\napplication is in focus. #### Defined in\n[window.ts:183](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L183)\n___ ### Informational • **Informational** = `2` ## Platform-specific -\n**macOS:** Bounces the dock icon once. - **Windows:** Flashes the taskbar button\nuntil the application is in focus. #### Defined in\n[window.ts:189](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L189)","url":"https://tauri.studio/docs/api/js/enums/window.UserAttentionType"},{"id":"prose_docs_api_js_interfaces_cli_ArgMatch_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["occurrences","value"],"code":[],"text":"[@tauri-apps/api](../index.md) / [cli](../modules/cli.md) / ArgMatch #\nInterface: ArgMatch [cli](../modules/cli.md).ArgMatch ## Properties ###\noccurrences • **occurrences**: `number` Number of occurrences #### Defined in\n[cli.ts:24](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L24)\n___ ### value • **value**: ``null`` \\| `string` \\| `boolean` \\| `string`[]\nstring if takes value boolean if flag string[] or null if takes multiple values\n#### Defined in\n[cli.ts:20](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L20)","url":"https://tauri.studio/docs/api/js/interfaces/cli.ArgMatch"},{"id":"prose_docs_api_js_interfaces_cli_CliMatches_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["args","subcommand"],"code":[],"text":"[@tauri-apps/api](../index.md) / [cli](../modules/cli.md) / CliMatches #\nInterface: CliMatches [cli](../modules/cli.md).CliMatches ## Properties ### args\n• **args**: `Object` #### Index signature ▪ [name: `string`]:\n[`ArgMatch`](cli.ArgMatch.md) #### Defined in\n[cli.ts:33](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L33)\n___ ### subcommand • **subcommand**: ``null`` \\|\n[`SubcommandMatch`](cli.SubcommandMatch.md) #### Defined in\n[cli.ts:34](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L34)","url":"https://tauri.studio/docs/api/js/interfaces/cli.CliMatches"},{"id":"prose_docs_api_js_interfaces_cli_SubcommandMatch_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["matches","name"],"code":[],"text":"[@tauri-apps/api](../index.md) / [cli](../modules/cli.md) / SubcommandMatch #\nInterface: SubcommandMatch [cli](../modules/cli.md).SubcommandMatch ##\nProperties ### matches • **matches**: [`CliMatches`](cli.CliMatches.md) ####\nDefined in\n[cli.ts:29](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L29)\n___ ### name • **name**: `string` #### Defined in\n[cli.ts:28](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L28)","url":"https://tauri.studio/docs/api/js/interfaces/cli.SubcommandMatch"},{"id":"prose_docs_api_js_interfaces_dialog_DialogFilter_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["extensions","name"],"code":[],"text":"[@tauri-apps/api](../index.md) / [dialog](../modules/dialog.md) / DialogFilter #\nInterface: DialogFilter [dialog](../modules/dialog.md).DialogFilter Extension\nfilters for the file dialog. ## Properties ### extensions • **extensions**:\n`string`[] Extensions to filter, without a `.` prefix. **`example`**\n```typescript extensions: ['svg', 'png'] ``` #### Defined in\n[dialog.ts:41](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L41)\n___ ### name • **name**: `string` Filter name. #### Defined in\n[dialog.ts:33](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L33)","url":"https://tauri.studio/docs/api/js/interfaces/dialog.DialogFilter"},{"id":"prose_docs_api_js_interfaces_dialog_OpenDialogOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["defaultPath","directory","filters","multiple"],"code":[],"text":"[@tauri-apps/api](../index.md) / [dialog](../modules/dialog.md) /\nOpenDialogOptions # Interface: OpenDialogOptions\n[dialog](../modules/dialog.md).OpenDialogOptions Options for the open dialog. ##\nProperties ### defaultPath • `Optional` **defaultPath**: `string` Initial\ndirectory or file path. It must exist. #### Defined in\n[dialog.ts:49](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L49)\n___ ### directory • `Optional` **directory**: `boolean` Whether the dialog is a\ndirectory selection or not. #### Defined in\n[dialog.ts:53](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L53)\n___ ### filters • `Optional` **filters**:\n[`DialogFilter`](dialog.DialogFilter.md)[] The filters of the dialog. ####\nDefined in\n[dialog.ts:47](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L47)\n___ ### multiple • `Optional` **multiple**: `boolean` Whether the dialog allows\nmultiple selection or not. #### Defined in\n[dialog.ts:51](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L51)","url":"https://tauri.studio/docs/api/js/interfaces/dialog.OpenDialogOptions"},{"id":"prose_docs_api_js_interfaces_dialog_SaveDialogOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["defaultPath","filters"],"code":[],"text":"[@tauri-apps/api](../index.md) / [dialog](../modules/dialog.md) /\nSaveDialogOptions # Interface: SaveDialogOptions\n[dialog](../modules/dialog.md).SaveDialogOptions Options for the save dialog. ##\nProperties ### defaultPath • `Optional` **defaultPath**: `string` Initial\ndirectory or file path. If it's a directory path, the dialog interface will\nchange to that folder. If it's not an existing directory, the file name will be\nset to the dialog's file name input and the dialog will be set to the parent\nfolder. #### Defined in\n[dialog.ts:65](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L65)\n___ ### filters • `Optional` **filters**:\n[`DialogFilter`](dialog.DialogFilter.md)[] The filters of the dialog. ####\nDefined in\n[dialog.ts:59](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L59)","url":"https://tauri.studio/docs/api/js/interfaces/dialog.SaveDialogOptions"},{"id":"prose_docs_api_js_interfaces_event_Event_md","title":{"content":"Interface","type":"text"},"sections":["Type parameters","Properties"],"subSections":["event","id","payload"],"code":[],"text":"[@tauri-apps/api](../index.md) / [event](../modules/event.md) / Event #\nInterface: Event [event](../modules/event.md).Event ## Type parameters | Name |\n| :------ | | `T` | ## Properties ### event • **event**: `string` Event name\n#### Defined in\n[event.ts:19](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L19)\n___ ### id • **id**: `number` Event identifier used to unlisten #### Defined in\n[event.ts:21](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L21)\n___ ### payload • **payload**: `T` Event payload #### Defined in\n[event.ts:23](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L23)","url":"https://tauri.studio/docs/api/js/interfaces/event.Event"},{"id":"prose_docs_api_js_interfaces_fs_FileEntry_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["children","name","path"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / FileEntry # Interface:\nFileEntry [fs](../modules/fs.md).FileEntry ## Properties ### children •\n`Optional` **children**: [`FileEntry`](fs.FileEntry.md)[] Children of this entry\nif it's a directory; null otherwise #### Defined in\n[fs.ts:87](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L87)\n___ ### name • `Optional` **name**: `string` Name of the directory/file can be\nnull if the path terminates with `..` #### Defined in\n[fs.ts:85](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L85)\n___ ### path • **path**: `string` #### Defined in\n[fs.ts:80](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L80)","url":"https://tauri.studio/docs/api/js/interfaces/fs.FileEntry"},{"id":"prose_docs_api_js_interfaces_fs_FsBinaryFileOption_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["contents","path"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / FsBinaryFileOption #\nInterface: FsBinaryFileOption [fs](../modules/fs.md).FsBinaryFileOption ##\nProperties ### contents • **contents**: `ArrayBuffer` #### Defined in\n[fs.ts:76](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L76)\n___ ### path • **path**: `string` #### Defined in\n[fs.ts:75](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L75)","url":"https://tauri.studio/docs/api/js/interfaces/fs.FsBinaryFileOption"},{"id":"prose_docs_api_js_interfaces_fs_FsDirOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["dir","recursive"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / FsDirOptions #\nInterface: FsDirOptions [fs](../modules/fs.md).FsDirOptions ## Properties ###\ndir • `Optional` **dir**: [`BaseDirectory`](../enums/fs.BaseDirectory.md) ####\nDefined in\n[fs.ts:65](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L65)\n___ ### recursive • `Optional` **recursive**: `boolean` #### Defined in\n[fs.ts:66](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L66)","url":"https://tauri.studio/docs/api/js/interfaces/fs.FsDirOptions"},{"id":"prose_docs_api_js_interfaces_fs_FsOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["dir"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / FsOptions # Interface:\nFsOptions [fs](../modules/fs.md).FsOptions ## Properties ### dir • `Optional`\n**dir**: [`BaseDirectory`](../enums/fs.BaseDirectory.md) #### Defined in\n[fs.ts:61](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L61)","url":"https://tauri.studio/docs/api/js/interfaces/fs.FsOptions"},{"id":"prose_docs_api_js_interfaces_fs_FsTextFileOption_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["contents","path"],"code":[],"text":"[@tauri-apps/api](../index.md) / [fs](../modules/fs.md) / FsTextFileOption #\nInterface: FsTextFileOption [fs](../modules/fs.md).FsTextFileOption ##\nProperties ### contents • **contents**: `string` #### Defined in\n[fs.ts:71](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L71)\n___ ### path • **path**: `string` #### Defined in\n[fs.ts:70](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L70)","url":"https://tauri.studio/docs/api/js/interfaces/fs.FsTextFileOption"},{"id":"prose_docs_api_js_interfaces_helpers_tauri_TauriCommand_md","title":{"content":"Interface","type":"text"},"sections":["Indexable","Properties"],"subSections":["_"],"code":[],"text":"[@tauri-apps/api](../index.md) / [helpers/tauri](../modules/helpers_tauri.md) /\nTauriCommand # Interface: TauriCommand\n[helpers/tauri](../modules/helpers_tauri.md).TauriCommand ## Indexable ▪ [key:\n`string`]: `unknown` ## Properties ### \\_\\_tauriModule • **\\_\\_tauriModule**:\n[`TauriModule`](../modules/helpers_tauri.md#taurimodule) #### Defined in\n[helpers/tauri.ts:27](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/tauri.ts#L27)","url":"https://tauri.studio/docs/api/js/interfaces/helpers_tauri.TauriCommand"},{"id":"prose_docs_api_js_interfaces_http_ClientOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["connectTimeout","maxRedirections"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / ClientOptions #\nInterface: ClientOptions [http](../modules/http.md).ClientOptions ## Properties\n### connectTimeout • **connectTimeout**: `number` #### Defined in\n[http.ts:31](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L31)\n___ ### maxRedirections • **maxRedirections**: `number` #### Defined in\n[http.ts:30](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L30)","url":"https://tauri.studio/docs/api/js/interfaces/http.ClientOptions"},{"id":"prose_docs_api_js_interfaces_http_HttpOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["body","headers","method","query","responseType","timeout","url"],"code":[],"text":"[@tauri-apps/api](../index.md) / [http](../modules/http.md) / HttpOptions #\nInterface: HttpOptions [http](../modules/http.md).HttpOptions Options object\nsent to the backend. ## Properties ### body • `Optional` **body**:\n[`Body`](../classes/http.Body.md) #### Defined in\n[http.ts:116](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L116)\n___ ### headers • `Optional` **headers**: `Record`<`string`, `any`\\> ####\nDefined in\n[http.ts:114](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L114)\n___ ### method • **method**: [`HttpVerb`](../modules/http.md#httpverb) ####\nDefined in\n[http.ts:112](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L112)\n___ ### query • `Optional` **query**: `Record`<`string`, `any`\\> #### Defined in\n[http.ts:115](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L115)\n___ ### responseType • `Optional` **responseType**:\n[`ResponseType`](../enums/http.ResponseType.md) #### Defined in\n[http.ts:118](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L118)\n___ ### timeout • `Optional` **timeout**: `number` #### Defined in\n[http.ts:117](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L117)\n___ ### url • **url**: `string` #### Defined in\n[http.ts:113](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L113)","url":"https://tauri.studio/docs/api/js/interfaces/http.HttpOptions"},{"id":"prose_docs_api_js_interfaces_notification_Options_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["body","icon","title"],"code":[],"text":"[@tauri-apps/api](../index.md) / [notification](../modules/notification.md) /\nOptions # Interface: Options [notification](../modules/notification.md).Options\nOptions to send a notification. ## Properties ### body • `Optional` **body**:\n`string` Optional notification body. #### Defined in\n[notification.ts:36](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L36)\n___ ### icon • `Optional` **icon**: `string` Optional notification icon. ####\nDefined in\n[notification.ts:38](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L38)\n___ ### title • **title**: `string` Notification title. #### Defined in\n[notification.ts:34](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L34)","url":"https://tauri.studio/docs/api/js/interfaces/notification.Options"},{"id":"prose_docs_api_js_interfaces_shell_ChildProcess_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["code","signal","stderr","stdout"],"code":[],"text":"[@tauri-apps/api](../index.md) / [shell](../modules/shell.md) / ChildProcess #\nInterface: ChildProcess [shell](../modules/shell.md).ChildProcess ## Properties\n### code • **code**: ``null`` \\| `number` Exit code of the process. `null` if\nthe process was terminated by a signal on Unix. #### Defined in\n[shell.ts:46](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L46)\n___ ### signal • **signal**: ``null`` \\| `number` If the process was terminated\nby a signal, represents that signal. #### Defined in\n[shell.ts:48](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L48)\n___ ### stderr • **stderr**: `string` The data that the process wrote to\n`stderr`. #### Defined in\n[shell.ts:52](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L52)\n___ ### stdout • **stdout**: `string` The data that the process wrote to\n`stdout`. #### Defined in\n[shell.ts:50](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L50)","url":"https://tauri.studio/docs/api/js/interfaces/shell.ChildProcess"},{"id":"prose_docs_api_js_interfaces_shell_SpawnOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["cwd","env"],"code":[],"text":"[@tauri-apps/api](../index.md) / [shell](../modules/shell.md) / SpawnOptions #\nInterface: SpawnOptions [shell](../modules/shell.md).SpawnOptions ## Properties\n### cwd • `Optional` **cwd**: `string` Current working directory. #### Defined\nin\n[shell.ts:34](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L34)\n___ ### env • `Optional` **env**: `Object` Environment variables. set to `null`\nto clear the process env. #### Index signature ▪ [name: `string`]: `string` ####\nDefined in\n[shell.ts:36](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L36)","url":"https://tauri.studio/docs/api/js/interfaces/shell.SpawnOptions"},{"id":"prose_docs_api_js_interfaces_tauri_InvokeArgs_md","title":{"content":"Interface","type":"text"},"sections":["Indexable"],"subSections":[],"code":[],"text":"[@tauri-apps/api](../index.md) / [tauri](../modules/tauri.md) / InvokeArgs #\nInterface: InvokeArgs [tauri](../modules/tauri.md).InvokeArgs Command arguments.\n## Indexable ▪ [key: `string`]: `unknown`","url":"https://tauri.studio/docs/api/js/interfaces/tauri.InvokeArgs"},{"id":"prose_docs_api_js_interfaces_updater_UpdateManifest_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["body","date","version"],"code":[],"text":"[@tauri-apps/api](../index.md) / [updater](../modules/updater.md) /\nUpdateManifest # Interface: UpdateManifest\n[updater](../modules/updater.md).UpdateManifest ## Properties ### body •\n**body**: `string` #### Defined in\n[updater.ts:24](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L24)\n___ ### date • **date**: `string` #### Defined in\n[updater.ts:23](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L23)\n___ ### version • **version**: `string` #### Defined in\n[updater.ts:22](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L22)","url":"https://tauri.studio/docs/api/js/interfaces/updater.UpdateManifest"},{"id":"prose_docs_api_js_interfaces_updater_UpdateResult_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["manifest","shouldUpdate"],"code":[],"text":"[@tauri-apps/api](../index.md) / [updater](../modules/updater.md) / UpdateResult\n# Interface: UpdateResult [updater](../modules/updater.md).UpdateResult ##\nProperties ### manifest • `Optional` **manifest**:\n[`UpdateManifest`](updater.UpdateManifest.md) #### Defined in\n[updater.ts:28](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L28)\n___ ### shouldUpdate • **shouldUpdate**: `boolean` #### Defined in\n[updater.ts:29](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L29)","url":"https://tauri.studio/docs/api/js/interfaces/updater.UpdateResult"},{"id":"prose_docs_api_js_interfaces_updater_UpdateStatusResult_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["error","status"],"code":[],"text":"[@tauri-apps/api](../index.md) / [updater](../modules/updater.md) /\nUpdateStatusResult # Interface: UpdateStatusResult\n[updater](../modules/updater.md).UpdateStatusResult ## Properties ### error •\n`Optional` **error**: `string` #### Defined in\n[updater.ts:17](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L17)\n___ ### status • **status**:\n[`UpdateStatus`](../modules/updater.md#updatestatus) #### Defined in\n[updater.ts:18](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L18)","url":"https://tauri.studio/docs/api/js/interfaces/updater.UpdateStatusResult"},{"id":"prose_docs_api_js_interfaces_window_Monitor_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["name","position","scaleFactor","size"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / Monitor #\nInterface: Monitor [window](../modules/window.md).Monitor Allows you to retrieve\ninformation about a given monitor. ## Properties ### name • **name**: ``null``\n\\| `string` Human-readable name of the monitor #### Defined in\n[window.ts:94](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L94)\n___ ### position • **position**:\n[`PhysicalPosition`](../classes/window.PhysicalPosition.md) the Top-left corner\nposition of the monitor relative to the larger full screen area. #### Defined in\n[window.ts:98](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L98)\n___ ### scaleFactor • **scaleFactor**: `number` The scale factor that can be\nused to map physical pixels to logical pixels. #### Defined in\n[window.ts:100](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L100)\n___ ### size • **size**: [`PhysicalSize`](../classes/window.PhysicalSize.md) The\nmonitor's resolution. #### Defined in\n[window.ts:96](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L96)","url":"https://tauri.studio/docs/api/js/interfaces/window.Monitor"},{"id":"prose_docs_api_js_interfaces_window_WindowOptions_md","title":{"content":"Interface","type":"text"},"sections":["Properties"],"subSections":["alwaysOnTop","center","decorations","focus","fullscreen","height","maxHeight","maxWidth","maximized","minHeight","minWidth","resizable","skipTaskbar","title","transparent","url","visible","width","x","y"],"code":[],"text":"[@tauri-apps/api](../index.md) / [window](../modules/window.md) / WindowOptions\n# Interface: WindowOptions [window](../modules/window.md).WindowOptions\nConfiguration for the window to create. ## Properties ### alwaysOnTop •\n`Optional` **alwaysOnTop**: `boolean` Whether the window should always be on top\nof other windows or not. #### Defined in\n[window.ts:1178](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1178)\n___ ### center • `Optional` **center**: `boolean` Show window in the center of\nthe screen.. #### Defined in\n[window.ts:1144](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1144)\n___ ### decorations • `Optional` **decorations**: `boolean` Whether the window\nshould have borders and bars or not. #### Defined in\n[window.ts:1176](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1176)\n___ ### focus • `Optional` **focus**: `boolean` Whether the window will be\ninitially hidden or focused. #### Defined in\n[window.ts:1168](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1168)\n___ ### fullscreen • `Optional` **fullscreen**: `boolean` Whether the window is\nin fullscreen mode or not. #### Defined in\n[window.ts:1166](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1166)\n___ ### height • `Optional` **height**: `number` The initial height. ####\nDefined in\n[window.ts:1152](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1152)\n___ ### maxHeight • `Optional` **maxHeight**: `number` The maximum height. Only\napplies if `maxWidth` is also set. #### Defined in\n[window.ts:1160](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1160)\n___ ### maxWidth • `Optional` **maxWidth**: `number` The maximum width. Only\napplies if `maxHeight` is also set. #### Defined in\n[window.ts:1158](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1158)\n___ ### maximized • `Optional` **maximized**: `boolean` Whether the window\nshould be maximized upon creation or not. #### Defined in\n[window.ts:1172](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1172)\n___ ### minHeight • `Optional` **minHeight**: `number` The minimum height. Only\napplies if `minWidth` is also set. #### Defined in\n[window.ts:1156](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1156)\n___ ### minWidth • `Optional` **minWidth**: `number` The minimum width. Only\napplies if `minHeight` is also set. #### Defined in\n[window.ts:1154](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1154)\n___ ### resizable • `Optional` **resizable**: `boolean` Whether the window is\nresizable or not. #### Defined in\n[window.ts:1162](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1162)\n___ ### skipTaskbar • `Optional` **skipTaskbar**: `boolean` Whether or not the\nwindow icon should be added to the taskbar. #### Defined in\n[window.ts:1180](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1180)\n___ ### title • `Optional` **title**: `string` Window title. #### Defined in\n[window.ts:1164](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1164)\n___ ### transparent • `Optional` **transparent**: `boolean` Whether the window\nis transparent or not. #### Defined in\n[window.ts:1170](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1170)\n___ ### url • `Optional` **url**: `string` Remote URL or local file path to\nopen, e.g. `https://github.com/tauri-apps` or `path/to/page.html`. #### Defined\nin\n[window.ts:1142](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1142)\n___ ### visible • `Optional` **visible**: `boolean` Whether the window should be\nimmediately visible upon creation or not. #### Defined in\n[window.ts:1174](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1174)\n___ ### width • `Optional` **width**: `number` The initial width. #### Defined\nin\n[window.ts:1150](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1150)\n___ ### x • `Optional` **x**: `number` The initial vertical position. Only\napplies if `y` is also set. #### Defined in\n[window.ts:1146](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1146)\n___ ### y • `Optional` **y**: `number` The initial horizontal position. Only\napplies if `x` is also set. #### Defined in\n[window.ts:1148](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1148)","url":"https://tauri.studio/docs/api/js/interfaces/window.WindowOptions"},{"id":"prose_docs_api_js_modules_app_md","title":{"content":"Module","type":"text"},"sections":["Functions"],"subSections":["getName","getTauriVersion","getVersion"],"code":[],"text":"[@tauri-apps/api](../index.md) / app # Module: app Get application metadata.\nThis package is also accessible with `window.__TAURI__.app` when\n`tauri.conf.json > build > withGlobalTauri` is set to true. ## Functions ###\ngetName ▸ **getName**(): `Promise`<`string`\\> Gets the application name. ####\nReturns `Promise`<`string`\\> A promise resolving to application name. ####\nDefined in\n[app.ts:33](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/app.ts#L33)\n___ ### getTauriVersion ▸ **getTauriVersion**(): `Promise`<`string`\\> Gets the\ntauri version. #### Returns `Promise`<`string`\\> A promise resolving to tauri\nversion. #### Defined in\n[app.ts:47](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/app.ts#L47)\n___ ### getVersion ▸ **getVersion**(): `Promise`<`string`\\> Gets the application\nversion. #### Returns `Promise`<`string`\\> A promise resolving to the\napplication version. #### Defined in\n[app.ts:19](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/app.ts#L19)","url":"https://tauri.studio/docs/api/js/modules/app"},{"id":"prose_docs_api_js_modules_cli_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Functions"],"subSections":["getMatches"],"code":[],"text":"[@tauri-apps/api](../index.md) / cli # Module: cli Parse arguments from your\nCommand Line Interface. This package is also accessible with\n`window.__TAURI__.cli` when `tauri.conf.json > build > withGlobalTauri` is set\nto true. ## Interfaces - [ArgMatch](../interfaces/cli.ArgMatch.md) -\n[CliMatches](../interfaces/cli.CliMatches.md) -\n[SubcommandMatch](../interfaces/cli.SubcommandMatch.md) ## Functions ###\ngetMatches ▸ **getMatches**():\n`Promise`<[`CliMatches`](../interfaces/cli.CliMatches.md)\\> Parse the arguments\nprovided to the current process and get the matches using the configuration\ndefined `tauri.conf.json > tauri > cli`. #### Returns\n`Promise`<[`CliMatches`](../interfaces/cli.CliMatches.md)\\> A promise resolving\nto the parsed arguments. #### Defined in\n[cli.ts:42](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/cli.ts#L42)","url":"https://tauri.studio/docs/api/js/modules/cli"},{"id":"prose_docs_api_js_modules_clipboard_md","title":{"content":"Module","type":"text"},"sections":["Functions"],"subSections":["readText","writeText"],"code":[],"text":"[@tauri-apps/api](../index.md) / clipboard # Module: clipboard Read and write to\nthe system clipboard. This package is also accessible with\n`window.__TAURI__.clipboard` when `tauri.conf.json > build > withGlobalTauri` is\nset to true. ## Functions ### readText ▸ **readText**(): `Promise`<`string` \\|\n``null``\\> Gets the clipboard content as plain text. #### Returns\n`Promise`<`string` \\| ``null``\\> A promise resolving to the clipboard content as\nplain text. #### Defined in\n[clipboard.ts:34](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/clipboard.ts#L34)\n___ ### writeText ▸ **writeText**(`text`): `Promise`<`void`\\> Writes a plain\ntext to the clipboard. #### Parameters | Name | Type | | :------ | :------ | |\n`text` | `string` | #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Defined in\n[clipboard.ts:19](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/clipboard.ts#L19)","url":"https://tauri.studio/docs/api/js/modules/clipboard"},{"id":"prose_docs_api_js_modules_dialog_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Functions"],"subSections":["open","save"],"code":[],"text":"[@tauri-apps/api](../index.md) / dialog # Module: dialog Native system dialogs\nfor opening and saving files. This package is also accessible with\n`window.__TAURI__.dialog` when `tauri.conf.json > build > withGlobalTauri` is\nset to true. The APIs must be allowlisted on `tauri.conf.json`: ```json {\n\"tauri\": { \"allowlist\": { \"dialog\": { \"all\": true, // enable all dialog APIs\n\"open\": true, // enable file open API \"save\": true // enable file save API } } }\n} ``` It is recommended to allowlist only the APIs you use for optimal bundle\nsize and security. ## Interfaces -\n[DialogFilter](../interfaces/dialog.DialogFilter.md) -\n[OpenDialogOptions](../interfaces/dialog.OpenDialogOptions.md) -\n[SaveDialogOptions](../interfaces/dialog.SaveDialogOptions.md) ## Functions ###\nopen ▸ **open**(`options?`): `Promise`<`string` \\| `string`[]\\> Open a\nfile/directory selection dialog #### Parameters | Name | Type | | :------ |\n:------ | | `options` |\n[`OpenDialogOptions`](../interfaces/dialog.OpenDialogOptions.md) | #### Returns\n`Promise`<`string` \\| `string`[]\\> A promise resolving to the selected path(s)\n#### Defined in\n[dialog.ts:73](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L73)\n___ ### save ▸ **save**(`options?`): `Promise`<`string`\\> Open a file/directory\nsave dialog. #### Parameters | Name | Type | | :------ | :------ | | `options` |\n[`SaveDialogOptions`](../interfaces/dialog.SaveDialogOptions.md) | #### Returns\n`Promise`<`string`\\> A promise resolving to the selected path. #### Defined in\n[dialog.ts:94](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/dialog.ts#L94)","url":"https://tauri.studio/docs/api/js/modules/dialog"},{"id":"prose_docs_api_js_modules_event_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Type aliases","Functions"],"subSections":["EventCallback","EventName","UnlistenFn","emit","listen","once"],"code":[],"text":"[@tauri-apps/api](../index.md) / event # Module: event The event system allows\nyou to emit events to the backend and listen to events from it. This package is\nalso accessible with `window.__TAURI__.event` when `tauri.conf.json > build >\nwithGlobalTauri` is set to true. ## Interfaces -\n[Event](../interfaces/event.Event.md) ## Type aliases ### EventCallback Ƭ\n**EventCallback**<`T`\\>: (`event`:\n[`Event`](../interfaces/event.Event.md)<`T`\\>) => `void` #### Type parameters |\nName | | :------ | | `T` | #### Type declaration ▸ (`event`): `void` #####\nParameters | Name | Type | | :------ | :------ | | `event` |\n[`Event`](../interfaces/event.Event.md)<`T`\\> | ##### Returns `void` ####\nDefined in\n[event.ts:45](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L45)\n___ ### EventName Ƭ **EventName**: `LiteralUnion`<``\"tauri://update\"`` \\|\n``\"tauri://update-available\"`` \\| ``\"tauri://update-install\"`` \\|\n``\"tauri://update-status\"`` \\| ``\"tauri://resize\"`` \\| ``\"tauri://move\"`` \\|\n``\"tauri://close-requested\"`` \\| ``\"tauri://destroyed\"`` \\| ``\"tauri://focus\"``\n\\| ``\"tauri://blur\"`` \\| ``\"tauri://scale-change\"`` \\| ``\"tauri://menu\"`` \\|\n``\"tauri://file-drop\"`` \\| ``\"tauri://file-drop-hover\"`` \\|\n``\"tauri://file-drop-cancelled\"``, `string`\\> #### Defined in\n[event.ts:26](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L26)\n___ ### UnlistenFn Ƭ **UnlistenFn**: () => `void` #### Type declaration ▸ ():\n`void` ##### Returns `void` #### Defined in\n[event.ts:47](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L47)\n## Functions ### emit ▸ **emit**(`event`, `payload?`): `Promise`<`void`\\> Emits\nan event to the backend. #### Parameters | Name | Type | Description | | :------\n| :------ | :------ | | `event` | `string` | Event name | | `payload?` |\n`string` | - | #### Returns `Promise`<`void`\\> #### Defined in\n[event.ts:113](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L113)\n___ ### listen ▸ **listen**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](event.md#unlistenfn)\\> Listen to an event from the\nbackend. #### Type parameters | Name | | :------ | | `T` | #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `event` |\n[`EventName`](event.md#eventname) | Event name | | `handler` |\n[`EventCallback`](event.md#eventcallback)<`T`\\> | Event handler callback | ####\nReturns `Promise`<[`UnlistenFn`](event.md#unlistenfn)\\> A promise resolving to a\nfunction to unlisten to the event. #### Defined in\n[event.ts:73](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L73)\n___ ### once ▸ **once**<`T`\\>(`event`, `handler`):\n`Promise`<[`UnlistenFn`](event.md#unlistenfn)\\> Listen to an one-off event from\nthe backend. #### Type parameters | Name | | :------ | | `T` | #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `event` |\n[`EventName`](event.md#eventname) | Event name | | `handler` |\n[`EventCallback`](event.md#eventcallback)<`T`\\> | Event handler callback | ####\nReturns `Promise`<[`UnlistenFn`](event.md#unlistenfn)\\> A promise resolving to a\nfunction to unlisten to the event. #### Defined in\n[event.ts:96](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/event.ts#L96)","url":"https://tauri.studio/docs/api/js/modules/event"},{"id":"prose_docs_api_js_modules_fs_md","title":{"content":"Module","type":"text"},"sections":["Enumerations","Interfaces","References","Functions"],"subSections":["Dir","copyFile","createDir","readBinaryFile","readDir","readTextFile","removeDir","removeFile","renameFile","writeBinaryFile","writeFile"],"code":[],"text":"[@tauri-apps/api](../index.md) / fs # Module: fs Access the file system. This\npackage is also accessible with `window.__TAURI__.fs` when `tauri.conf.json >\nbuild > withGlobalTauri` is set to true. The APIs must be allowlisted on\n`tauri.conf.json`: ```json { \"tauri\": { \"allowlist\": { \"fs\": { \"all\": true, //\nenable all FS APIs \"readTextFile\": true, \"readBinaryFile\": true, \"writeFile\":\ntrue, \"writeBinaryFile\": true, \"readDir\": true, \"copyFile\": true, \"createDir\":\ntrue, \"removeDir\": true, \"removeFile\": true, \"renameFile\": true } } } } ``` It\nis recommended to allowlist only the APIs you use for optimal bundle size and\nsecurity. ## Enumerations - [BaseDirectory](../enums/fs.BaseDirectory.md) ##\nInterfaces - [FileEntry](../interfaces/fs.FileEntry.md) -\n[FsBinaryFileOption](../interfaces/fs.FsBinaryFileOption.md) -\n[FsDirOptions](../interfaces/fs.FsDirOptions.md) -\n[FsOptions](../interfaces/fs.FsOptions.md) -\n[FsTextFileOption](../interfaces/fs.FsTextFileOption.md) ## References ### Dir\nRenames and exports: [BaseDirectory](../enums/fs.BaseDirectory.md) ## Functions\n### copyFile ▸ **copyFile**(`source`, `destination`, `options?`):\n`Promise`<`void`\\> Copys a file to a destination. #### Parameters | Name | Type\n| Description | | :------ | :------ | :------ | | `source` | `string` | A path\nof the file to copy. | | `destination` | `string` | A path for the destination\nfile. | | `options` | [`FsOptions`](../interfaces/fs.FsOptions.md) |\nConfiguration object. | #### Returns `Promise`<`void`\\> A promise indicating the\nsuccess or failure of the operation. #### Defined in\n[fs.ts:300](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L300)\n___ ### createDir ▸ **createDir**(`dir`, `options?`): `Promise`<`void`\\> Creates\na directory. If one of the path's parent components doesn't exist and the\n`recursive` option isn't set to true, the promise will be rejected. ####\nParameters | Name | Type | Description | | :------ | :------ | :------ | | `dir`\n| `string` | Path to the directory to create. | | `options` |\n[`FsDirOptions`](../interfaces/fs.FsDirOptions.md) | Configuration object. |\n#### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Defined in\n[fs.ts:256](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L256)\n___ ### readBinaryFile ▸ **readBinaryFile**(`filePath`, `options?`):\n`Promise`<`number`[]\\> Reads a file as byte array. #### Parameters | Name | Type\n| Description | | :------ | :------ | :------ | | `filePath` | `string` | Path\nto the file. | | `options` | [`FsOptions`](../interfaces/fs.FsOptions.md) |\nConfiguration object. | #### Returns `Promise`<`number`[]\\> A promise resolving\nto the file bytes array. #### Defined in\n[fs.ts:118](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L118)\n___ ### readDir ▸ **readDir**(`dir`, `options?`):\n`Promise`<[`FileEntry`](../interfaces/fs.FileEntry.md)[]\\> List directory files.\n#### Parameters | Name | Type | Description | | :------ | :------ | :------ | |\n`dir` | `string` | Path to the directory to read. | | `options` |\n[`FsDirOptions`](../interfaces/fs.FsDirOptions.md) | Configuration object. |\n#### Returns `Promise`<[`FileEntry`](../interfaces/fs.FileEntry.md)[]\\> A\npromise resolving to the directory entries. #### Defined in\n[fs.ts:233](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L233)\n___ ### readTextFile ▸ **readTextFile**(`filePath`, `options?`):\n`Promise`<`string`\\> Reads a file as UTF-8 encoded string. #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `filePath` |\n`string` | Path to the file. | | `options` |\n[`FsOptions`](../interfaces/fs.FsOptions.md) | Configuration object. | ####\nReturns `Promise`<`string`\\> A promise resolving to the file content as a UTF-8\nencoded string. #### Defined in\n[fs.ts:97](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L97)\n___ ### removeDir ▸ **removeDir**(`dir`, `options?`): `Promise`<`void`\\> Removes\na directory. If the directory is not empty and the `recursive` option isn't set\nto true, the promise will be rejected. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `dir` | `string` | Path to the\ndirectory to remove. | | `options` |\n[`FsDirOptions`](../interfaces/fs.FsDirOptions.md) | Configuration object. |\n#### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Defined in\n[fs.ts:278](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L278)\n___ ### removeFile ▸ **removeFile**(`file`, `options?`): `Promise`<`void`\\>\nRemoves a file. #### Parameters | Name | Type | Description | | :------ |\n:------ | :------ | | `file` | `string` | Path to the file to remove. | |\n`options` | [`FsOptions`](../interfaces/fs.FsOptions.md) | Configuration object.\n| #### Returns `Promise`<`void`\\> A promise indicating the success or failure of\nthe operation. #### Defined in\n[fs.ts:323](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L323)\n___ ### renameFile ▸ **renameFile**(`oldPath`, `newPath`, `options?`):\n`Promise`<`void`\\> Renames a file. #### Parameters | Name | Type | Description |\n| :------ | :------ | :------ | | `oldPath` | `string` | A path of the file to\nrename. | | `newPath` | `string` | A path of the new file name. | | `options` |\n[`FsOptions`](../interfaces/fs.FsOptions.md) | Configuration object. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[fs.ts:345](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L345)\n___ ### writeBinaryFile ▸ **writeBinaryFile**(`file`, `options?`):\n`Promise`<`void`\\> Writes a binary file. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `file` |\n[`FsBinaryFileOption`](../interfaces/fs.FsBinaryFileOption.md) | Write\nconfiguration object. | | `options` |\n[`FsOptions`](../interfaces/fs.FsOptions.md) | Configuration object. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[fs.ts:204](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L204)\n___ ### writeFile ▸ **writeFile**(`file`, `options?`): `Promise`<`void`\\> Writes\na text file. #### Parameters | Name | Type | Description | | :------ | :------ |\n:------ | | `file` | [`FsTextFileOption`](../interfaces/fs.FsTextFileOption.md)\n| File configuration object. | | `options` |\n[`FsOptions`](../interfaces/fs.FsOptions.md) | Configuration object. | ####\nReturns `Promise`<`void`\\> A promise indicating the success or failure of the\noperation. #### Defined in\n[fs.ts:139](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/fs.ts#L139)","url":"https://tauri.studio/docs/api/js/modules/fs"},{"id":"prose_docs_api_js_modules_globalShortcut_md","title":{"content":"Module","type":"text"},"sections":["Type aliases","Functions"],"subSections":["ShortcutHandler","isRegistered","register","registerAll","unregister","unregisterAll"],"code":[],"text":"[@tauri-apps/api](../index.md) / globalShortcut # Module: globalShortcut\nRegister global shortcuts. This package is also accessible with\n`window.__TAURI__.globalShortcut` when `tauri.conf.json > build >\nwithGlobalTauri` is set to true. The APIs must be allowlisted on\n`tauri.conf.json`: ```json { \"tauri\": { \"allowlist\": { \"globalShortcut\": {\n\"all\": true // enable all global shortcut APIs } } } } ``` It is recommended to\nallowlist only the APIs you use for optimal bundle size and security. ## Type\naliases ### ShortcutHandler Ƭ **ShortcutHandler**: (`shortcut`: `string`) =>\n`void` #### Type declaration ▸ (`shortcut`): `void` ##### Parameters | Name |\nType | | :------ | :------ | | `shortcut` | `string` | ##### Returns `void` ####\nDefined in\n[globalShortcut.ts:29](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L29)\n## Functions ### isRegistered ▸ **isRegistered**(`shortcut`):\n`Promise`<`boolean`\\> Determines whether the given shortcut is registered by\nthis application or not. #### Parameters | Name | Type | Description | | :------\n| :------ | :------ | | `shortcut` | `string` | Array of shortcut definitions,\nmodifiers and key separated by \"+\" e.g. CmdOrControl+Q | #### Returns\n`Promise`<`boolean`\\> A promise resolving to the state. #### Defined in\n[globalShortcut.ts:79](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L79)\n___ ### register ▸ **register**(`shortcut`, `handler`): `Promise`<`void`\\>\nRegister a global shortcut. #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `shortcut` | `string` | Shortcut definition,\nmodifiers and key separated by \"+\" e.g. CmdOrControl+Q | | `handler` |\n[`ShortcutHandler`](globalShortcut.md#shortcuthandler) | Shortcut handler\ncallback - takes the triggered shortcut as argument | #### Returns\n`Promise`<`void`\\> #### Defined in\n[globalShortcut.ts:38](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L38)\n___ ### registerAll ▸ **registerAll**(`shortcuts`, `handler`):\n`Promise`<`void`\\> Register a collection of global shortcuts. #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `shortcuts` |\n`string`[] | Array of shortcut definitions, modifiers and key separated by \"+\"\ne.g. CmdOrControl+Q | | `handler` |\n[`ShortcutHandler`](globalShortcut.md#shortcuthandler) | Shortcut handler\ncallback - takes the triggered shortcut as argument | #### Returns\n`Promise`<`void`\\> #### Defined in\n[globalShortcut.ts:59](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L59)\n___ ### unregister ▸ **unregister**(`shortcut`): `Promise`<`void`\\> Unregister a\nglobal shortcut. #### Parameters | Name | Type | Description | | :------ |\n:------ | :------ | | `shortcut` | `string` | shortcut definition, modifiers and\nkey separated by \"+\" e.g. CmdOrControl+Q | #### Returns `Promise`<`void`\\> ####\nDefined in\n[globalShortcut.ts:95](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L95)\n___ ### unregisterAll ▸ **unregisterAll**(): `Promise`<`void`\\> Unregisters all\nshortcuts registered by the application. #### Returns `Promise`<`void`\\> ####\nDefined in\n[globalShortcut.ts:110](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/globalShortcut.ts#L110)","url":"https://tauri.studio/docs/api/js/modules/globalShortcut"},{"id":"prose_docs_api_js_modules_helpers_event_md","title":{"content":"Module","type":"text"},"sections":["Functions"],"subSections":["emit"],"code":[],"text":"[@tauri-apps/api](../index.md) / helpers/event # Module: helpers/event ##\nFunctions ### emit ▸ **emit**(`event`, `windowLabel`, `payload?`):\n`Promise`<`void`\\> Emits an event to the backend. #### Parameters | Name | Type\n| Description | | :------ | :------ | :------ | | `event` | `string` | Event\nname | | `windowLabel` | `WindowLabel` | - | | `payload?` | `string` | - | ####\nReturns `Promise`<`void`\\> #### Defined in\n[helpers/event.ts:18](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/event.ts#L18)","url":"https://tauri.studio/docs/api/js/modules/helpers_event"},{"id":"prose_docs_api_js_modules_helpers_os_check_md","title":{"content":"Module","type":"text"},"sections":["Functions"],"subSections":["isMacOS","isWindows"],"code":[],"text":"[@tauri-apps/api](../index.md) / helpers/os-check # Module: helpers/os-check ##\nFunctions ### isMacOS ▸ **isMacOS**(): `boolean` #### Returns `boolean` ####\nDefined in\n[helpers/os-check.ts:15](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/os-check.ts#L15)\n___ ### isWindows ▸ **isWindows**(): `boolean` #### Returns `boolean` ####\nDefined in\n[helpers/os-check.ts:11](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/os-check.ts#L11)","url":"https://tauri.studio/docs/api/js/modules/helpers_os_check"},{"id":"prose_docs_api_js_modules_helpers_tauri_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Type aliases","Functions"],"subSections":["TauriModule","invokeTauriCommand"],"code":[],"text":"[@tauri-apps/api](../index.md) / helpers/tauri # Module: helpers/tauri ##\nInterfaces - [TauriCommand](../interfaces/helpers_tauri.TauriCommand.md) ## Type\naliases ### TauriModule Ƭ **TauriModule**: ``\"App\"`` \\| ``\"Fs\"`` \\| ``\"Path\"``\n\\| ``\"Os\"`` \\| ``\"Window\"`` \\| ``\"Shell\"`` \\| ``\"Event\"`` \\| ``\"Internal\"`` \\|\n``\"Dialog\"`` \\| ``\"Cli\"`` \\| ``\"Notification\"`` \\| ``\"Http\"`` \\|\n``\"GlobalShortcut\"`` \\| ``\"Process\"`` \\| ``\"Clipboard\"`` #### Defined in\n[helpers/tauri.ts:9](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/tauri.ts#L9)\n## Functions ### invokeTauriCommand ▸ **invokeTauriCommand**<`T`\\>(`command`):\n`Promise`<`T`\\> #### Type parameters | Name | | :------ | | `T` | ####\nParameters | Name | Type | | :------ | :------ | | `command` |\n[`TauriCommand`](../interfaces/helpers_tauri.TauriCommand.md) | #### Returns\n`Promise`<`T`\\> #### Defined in\n[helpers/tauri.ts:31](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/helpers/tauri.ts#L31)","url":"https://tauri.studio/docs/api/js/modules/helpers_tauri"},{"id":"prose_docs_api_js_modules_http_md","title":{"content":"Module","type":"text"},"sections":["Enumerations","Classes","Interfaces","Type aliases","Functions"],"subSections":["FetchOptions","HttpVerb","Part","RequestOptions","fetch","getClient"],"code":[],"text":"[@tauri-apps/api](../index.md) / http # Module: http Access the HTTP client\nwritten in Rust. This package is also accessible with `window.__TAURI__.http`\nwhen `tauri.conf.json > build > withGlobalTauri` is set to true. The APIs must\nbe allowlisted on `tauri.conf.json`: ```json { \"tauri\": { \"allowlist\": { \"http\":\n{ \"all\": true, // enable all http APIs \"request\": true // enable HTTP request\nAPI } } } } ``` It is recommended to allowlist only the APIs you use for optimal\nbundle size and security. ## Enumerations -\n[ResponseType](../enums/http.ResponseType.md) ## Classes -\n[Body](../classes/http.Body.md) - [Client](../classes/http.Client.md) -\n[Response](../classes/http.Response.md) ## Interfaces -\n[ClientOptions](../interfaces/http.ClientOptions.md) -\n[HttpOptions](../interfaces/http.HttpOptions.md) ## Type aliases ###\nFetchOptions Ƭ **FetchOptions**:\n`Omit`<[`HttpOptions`](../interfaces/http.HttpOptions.md), ``\"url\"``\\> Options\nfor the `fetch` API. #### Defined in\n[http.ts:124](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L124)\n___ ### HttpVerb Ƭ **HttpVerb**: ``\"GET\"`` \\| ``\"POST\"`` \\| ``\"PUT\"`` \\|\n``\"DELETE\"`` \\| ``\"PATCH\"`` \\| ``\"HEAD\"`` \\| ``\"OPTIONS\"`` \\| ``\"CONNECT\"`` \\|\n``\"TRACE\"`` The request HTTP verb. #### Defined in\n[http.ts:99](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L99)\n___ ### Part Ƭ **Part**: ``\"string\"`` \\| `number`[] #### Defined in\n[http.ts:40](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L40)\n___ ### RequestOptions Ƭ **RequestOptions**:\n`Omit`<[`HttpOptions`](../interfaces/http.HttpOptions.md), ``\"method\"`` \\|\n``\"url\"``\\> Request options. #### Defined in\n[http.ts:122](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L122)\n## Functions ### fetch ▸ **fetch**<`T`\\>(`url`, `options?`):\n`Promise`<[`Response`](../classes/http.Response.md)<`T`\\>\\> Perform an HTTP\nrequest using the default client. #### Type parameters | Name | | :------ | |\n`T` | #### Parameters | Name | Type | Description | | :------ | :------ |\n:------ | | `url` | `string` | The request URL. | | `options?` |\n[`FetchOptions`](http.md#fetchoptions) | The fetch options. | #### Returns\n`Promise`<[`Response`](../classes/http.Response.md)<`T`\\>\\> The response object.\n#### Defined in\n[http.ts:335](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L335)\n___ ### getClient ▸ **getClient**(`options?`):\n`Promise`<[`Client`](../classes/http.Client.md)\\> Creates a new client using the\nspecified options. #### Parameters | Name | Type | Description | | :------ |\n:------ | :------ | | `options?` |\n[`ClientOptions`](../interfaces/http.ClientOptions.md) | Client configuration. |\n#### Returns `Promise`<[`Client`](../classes/http.Client.md)\\> A promise\nresolving to the client instance. #### Defined in\n[http.ts:315](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/http.ts#L315)","url":"https://tauri.studio/docs/api/js/modules/http"},{"id":"prose_docs_api_js_modules_index_md","title":{"content":"Module","type":"text"},"sections":["References"],"subSections":["app","clipboard","event","globalShortcut","notification","process","tauri","window"],"code":[],"text":"[@tauri-apps/api](../index.md) / index # Module: index The Tauri API allows you\nto interface with the backend layer. This module exposes all other modules as an\nobject where the key is the module name, and the value is the module exports.\n**`example`** ```typescript import { app, dialog, event, fs, globalShortcut }\nfrom '@tauri-apps/api' ``` ## References ### app Re-exports: [app](app.md) ___\n### clipboard Re-exports: [clipboard](clipboard.md) ___ ### event Re-exports:\n[event](event.md) ___ ### globalShortcut Re-exports:\n[globalShortcut](globalShortcut.md) ___ ### notification Re-exports:\n[notification](notification.md) ___ ### process Re-exports:\n[process](process.md) ___ ### tauri Re-exports: [tauri](tauri.md) ___ ### window\nRe-exports: [window](window.md)","url":"https://tauri.studio/docs/api/js/modules/index"},{"id":"prose_docs_api_js_modules_notification_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Type aliases","Functions"],"subSections":["Permission","isPermissionGranted","requestPermission","sendNotification"],"code":[],"text":"[@tauri-apps/api](../index.md) / notification # Module: notification Send toast\nnotifications (brief auto-expiring OS window element) to your user. Can also be\nused with the Notification Web API. This package is also accessible with\n`window.__TAURI__.notification` when `tauri.conf.json > build > withGlobalTauri`\nis set to true. The APIs must be allowlisted on `tauri.conf.json`: ```json {\n\"tauri\": { \"allowlist\": { \"notification\": { \"all\": true // enable all\nnotification APIs } } } } ``` It is recommended to allowlist only the APIs you\nuse for optimal bundle size and security. ## Interfaces -\n[Options](../interfaces/notification.Options.md) ## Type aliases ### Permission\nƬ **Permission**: ``\"granted\"`` \\| ``\"denied\"`` \\| ``\"default\"`` Possible\npermission values. #### Defined in\n[notification.ts:42](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L42)\n## Functions ### isPermissionGranted ▸ **isPermissionGranted**():\n`Promise`<`boolean` \\| ``null``\\> Checks if the permission to send notifications\nis granted. #### Returns `Promise`<`boolean` \\| ``null``\\> #### Defined in\n[notification.ts:49](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L49)\n___ ### requestPermission ▸ **requestPermission**():\n`Promise`<[`Permission`](notification.md#permission)\\> Requests the permission\nto send notifications. #### Returns\n`Promise`<[`Permission`](notification.md#permission)\\> A promise resolving to\nwhether the user granted the permission or not. #### Defined in\n[notification.ts:66](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L66)\n___ ### sendNotification ▸ **sendNotification**(`options`): `void` Sends a\nnotification to the user. #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `options` |\n[`Options`](../interfaces/notification.Options.md) \\| `string` | Notification\noptions. | #### Returns `void` #### Defined in\n[notification.ts:75](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/notification.ts#L75)","url":"https://tauri.studio/docs/api/js/modules/notification"},{"id":"prose_docs_api_js_modules_os_md","title":{"content":"Module","type":"text"},"sections":["Variables","Functions"],"subSections":["EOL","arch","platform","tempdir","type","version"],"code":[],"text":"[@tauri-apps/api](../index.md) / os # Module: os Provides operating\nsystem-related utility methods and properties. This package is also accessible\nwith `window.__TAURI__.os` when `tauri.conf.json > build > withGlobalTauri` is\nset to true. The APIs must be allowlisted on `tauri.conf.json`: ```json {\n\"tauri\": { \"allowlist\": { \"os\": { \"all\": true, // enable all Os APIs } } } } ```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and\nsecurity. ## Variables ### EOL • `Const` **EOL**: ``\"\\r\\n\"`` \\| ``\"\\n\"`` The\noperating system-specific end-of-line marker. - `\\n` on POSIX - `\\r\\n` on\nWindows #### Defined in\n[os.ts:34](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L34)\n## Functions ### arch ▸ **arch**(): `Promise`<`string`\\> Returns the operating\nsystem CPU architecture for which the tauri app was compiled. Possible values\nare `'x86'`, `'x86_64'`, `'arm'`, `'aarch64'`, `'mips'`, `'mips64'`,\n`'powerpc'`, `'powerpc64'`, `'riscv64'`, `'s390x'`, `'sparc64'` #### Returns\n`Promise`<`string`\\> #### Defined in\n[os.ts:76](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L76)\n___ ### platform ▸ **platform**(): `Promise`<`string`\\> Returns a string\nidentifying the operating system platform. The value is set at compile time.\nPossible values are `'aix'`, `'darwin'`, `'freebsd'`, `'linux'`, `'openbsd'`,\n`'sunos'`, and `'win32'`. #### Returns `Promise`<`string`\\> #### Defined in\n[os.ts:40](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L40)\n___ ### tempdir ▸ **tempdir**(): `Promise`<`string`\\> Returns the operating\nsystem's default directory for temporary files as a string. #### Returns\n`Promise`<`string`\\> #### Defined in\n[os.ts:88](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L88)\n___ ### type ▸ **type**(): `Promise`<`string`\\> Returns `'Linux'` on Linux,\n`'Darwin'` on macOS, and `'Windows_NT'` on Windows. #### Returns\n`Promise`<`string`\\> #### Defined in\n[os.ts:64](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L64)\n___ ### version ▸ **version**(): `Promise`<`string`\\> Returns a string\nidentifying the kernel version. #### Returns `Promise`<`string`\\> #### Defined\nin\n[os.ts:52](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/os.ts#L52)","url":"https://tauri.studio/docs/api/js/modules/os"},{"id":"prose_docs_api_js_modules_path_md","title":{"content":"Module","type":"text"},"sections":["References","Variables","Functions","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform","Platform"],"subSections":["BaseDirectory","delimiter","sep","appDir","audioDir","basename","cacheDir","configDir","currentDir","dataDir","desktopDir","dirname","documentDir","downloadDir","executableDir","extname","fontDir","homeDir","isAbsolute","join","localDataDir","normalize","pictureDir","publicDir","resolve","resourceDir","runtimeDir","templateDir","videoDir"],"code":[],"text":"[@tauri-apps/api](../index.md) / path # Module: path ## References ###\nBaseDirectory Re-exports: [BaseDirectory](../enums/fs.BaseDirectory.md) ##\nVariables ### delimiter • `Const` **delimiter**: ``\";\"`` \\| ``\":\"`` Provides the\nplatform-specific path segment delimiter: - `;` on Windows - `:` on POSIX ####\nDefined in\n[path.ts:443](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L443)\n___ ### sep • `Const` **sep**: ``\"\\\\\"`` \\| ``\"/\"`` Provides the\nplatform-specific path segment separator: - `\\` on Windows - `/` on POSIX ####\nDefined in\n[path.ts:436](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L436)\n## Functions ### appDir ▸ **appDir**(): `Promise`<`string`\\> Returns the path to\nthe suggested directory for your app config files. Resolves to\n`${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value\nconfigured on `tauri.conf.json > tauri > bundle > identifier`. #### Returns\n`Promise`<`string`\\> #### Defined in\n[path.ts:36](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L36)\n___ ### audioDir ▸ **audioDir**(): `Promise`<`string`\\> Returns the path to the\nuser's audio directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_MUSIC_DIR`. - **macOS:** Resolves to `$HOME/Music`. - **Windows:**\nResolves to `{FOLDERID_Music}`. #### Returns `Promise`<`string`\\> #### Defined\nin\n[path.ts:58](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L58)\n___ ### basename ▸ **basename**(`path`, `ext?`): `Promise`<`string`\\> Returns\nthe last portion of a `path`. Trailing directory separators are ignored. ####\nParameters | Name | Type | Description | | :------ | :------ | :------ | |\n`path` | `string` | - | | `ext?` | `string` | An optional file extension to be\nremoved from the returned path. | #### Returns `Promise`<`string`\\> #### Defined\nin\n[path.ts:519](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L519)\n___ ### cacheDir ▸ **cacheDir**(): `Promise`<`string`\\> Returns the path to the\nuser's cache directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_CACHE_HOME` or `$HOME/.cache`. - **macOS:** Resolves to\n`$HOME/Library/Caches`. - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n#### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:80](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L80)\n___ ### configDir ▸ **configDir**(): `Promise`<`string`\\> Returns the path to\nthe user's config directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_CONFIG_HOME` or `$HOME/.config`. - **macOS:** Resolves to\n`$HOME/Library/Application Support`. - **Windows:** Resolves to\n`{FOLDERID_LocalAppData}`. #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:102](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L102)\n___ ### currentDir ▸ **currentDir**(): `Promise`<`string`\\> Returns the path to\nthe current working directory. #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:420](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L420)\n___ ### dataDir ▸ **dataDir**(): `Promise`<`string`\\> Returns the path to the\nuser's data directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_DATA_HOME` or `$HOME/.local/share`. - **macOS:** Resolves to\n`$HOME/Library/Application Support`. - **Windows:** Resolves to\n`{FOLDERID_RoamingAppData}`. #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:124](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L124)\n___ ### desktopDir ▸ **desktopDir**(): `Promise`<`string`\\> Returns the path to\nthe user's desktop directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_DESKTOP_DIR`. - **macOS:** Resolves to `$HOME/Library/Desktop`. -\n**Windows:** Resolves to `{FOLDERID_Desktop}`. #### Returns `Promise`<`string`\\>\n#### Defined in\n[path.ts:146](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L146)\n___ ### dirname ▸ **dirname**(`path`): `Promise`<`string`\\> Returns the\ndirectory name of a `path`. Trailing directory separators are ignored. ####\nParameters | Name | Type | | :------ | :------ | | `path` | `string` | ####\nReturns `Promise`<`string`\\> #### Defined in\n[path.ts:491](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L491)\n___ ### documentDir ▸ **documentDir**(): `Promise`<`string`\\> Returns the path\nto the user's document directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_DOCUMENTS_DIR`. - **macOS:** Resolves to `$HOME/Documents`. - **Windows:**\nResolves to `{FOLDERID_Documents}`. #### Returns `Promise`<`string`\\> ####\nDefined in\n[path.ts:168](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L168)\n___ ### downloadDir ▸ **downloadDir**(): `Promise`<`string`\\> Returns the path\nto the user's download directory. ## Platform-specific - **Linux**: Resolves to\n`$XDG_DOWNLOAD_DIR`. - **macOS**: Resolves to `$HOME/Downloads`. - **Windows**:\nResolves to `{FOLDERID_Downloads}`. #### Returns `Promise`<`string`\\> ####\nDefined in\n[path.ts:190](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L190)\n___ ### executableDir ▸ **executableDir**(): `Promise`<`string`\\> Returns the\npath to the user's executable directory. ## Platform-specific - **Linux:**\nResolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or\n`$HOME/.local/bin`. - **macOS:** Not supported. - **Windows:** Not supported.\n#### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:212](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L212)\n___ ### extname ▸ **extname**(`path`): `Promise`<`string`\\> Returns the\nextension of the `path`. #### Parameters | Name | Type | | :------ | :------ | |\n`path` | `string` | #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:504](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L504)\n___ ### fontDir ▸ **fontDir**(): `Promise`<`string`\\> Returns the path to the\nuser's font directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`. - **macOS:** Resolves to\n`$HOME/Library/Fonts`. - **Windows:** Not supported. #### Returns\n`Promise`<`string`\\> #### Defined in\n[path.ts:234](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L234)\n___ ### homeDir ▸ **homeDir**(): `Promise`<`string`\\> Returns the path to the\nuser's home directory. ## Platform-specific - **Linux:** Resolves to `$HOME`. -\n**macOS:** Resolves to `$HOME`. - **Windows:** Resolves to `{FOLDERID_Profile}`.\n#### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:256](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L256)\n___ ### isAbsolute ▸ **isAbsolute**(`path`): `Promise`<`boolean`\\> ####\nParameters | Name | Type | | :------ | :------ | | `path` | `string` | ####\nReturns `Promise`<`boolean`\\> #### Defined in\n[path.ts:530](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L530)\n___ ### join ▸ **join**(...`paths`): `Promise`<`string`\\> Joins all given `path`\nsegments together using the platform-specific separator as a delimiter, then\nnormalizes the resulting path. #### Parameters | Name | Type | Description | |\n:------ | :------ | :------ | | `...paths` | `string`[] | A sequence of path\nsegments. | #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:478](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L478)\n___ ### localDataDir ▸ **localDataDir**(): `Promise`<`string`\\> Returns the path\nto the user's local data directory. ## Platform-specific - **Linux:** Resolves\nto `$XDG_DATA_HOME` or `$HOME/.local/share`. - **macOS:** Resolves to\n`$HOME/Library/Application Support`. - **Windows:** Resolves to\n`{FOLDERID_LocalAppData}`. #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:278](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L278)\n___ ### normalize ▸ **normalize**(`path`): `Promise`<`string`\\> Normalizes the\ngiven `path`, resolving `'..'` and `'.'` segments and resolve symolic links.\n#### Parameters | Name | Type | | :------ | :------ | | `path` | `string` | ####\nReturns `Promise`<`string`\\> #### Defined in\n[path.ts:463](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L463)\n___ ### pictureDir ▸ **pictureDir**(): `Promise`<`string`\\> Returns the path to\nthe user's picture directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_PICTURES_DIR`. - **macOS:** Resolves to `$HOME/Pictures`. - **Windows:**\nResolves to `{FOLDERID_Pictures}`. #### Returns `Promise`<`string`\\> ####\nDefined in\n[path.ts:300](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L300)\n___ ### publicDir ▸ **publicDir**(): `Promise`<`string`\\> Returns the path to\nthe user's public directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_PUBLICSHARE_DIR`. - **macOS:** Resolves to `$HOME/Public`. - **Windows:**\nResolves to `{FOLDERID_Public}`. #### Returns `Promise`<`string`\\> #### Defined\nin\n[path.ts:322](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L322)\n___ ### resolve ▸ **resolve**(...`paths`): `Promise`<`string`\\> Resolves a\nsequence of `paths` or `path` segments into an absolute path. #### Parameters |\nName | Type | Description | | :------ | :------ | :------ | | `...paths` |\n`string`[] | A sequence of paths or path segments. | #### Returns\n`Promise`<`string`\\> #### Defined in\n[path.ts:450](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L450)\n___ ### resourceDir ▸ **resourceDir**(): `Promise`<`string`\\> Returns the path\nto the user's resource directory. #### Returns `Promise`<`string`\\> #### Defined\nin\n[path.ts:338](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L338)\n___ ### runtimeDir ▸ **runtimeDir**(): `Promise`<`string`\\> Returns the path to\nthe user's runtime directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_RUNTIME_DIR`. - **macOS:** Not supported. - **Windows:** Not supported.\n#### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:360](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L360)\n___ ### templateDir ▸ **templateDir**(): `Promise`<`string`\\> Returns the path\nto the user's template directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_TEMPLATES_DIR`. - **macOS:** Not supported. - **Windows:** Resolves to\n`{FOLDERID_Templates}`. #### Returns `Promise`<`string`\\> #### Defined in\n[path.ts:382](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L382)\n___ ### videoDir ▸ **videoDir**(): `Promise`<`string`\\> Returns the path to the\nuser's video directory. ## Platform-specific - **Linux:** Resolves to\n`$XDG_VIDEOS_DIR`. - **macOS:** Resolves to `$HOME/Movies`. - **Windows:**\nResolves to `{FOLDERID_Videos}`. #### Returns `Promise`<`string`\\> #### Defined\nin\n[path.ts:404](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/path.ts#L404)","url":"https://tauri.studio/docs/api/js/modules/path"},{"id":"prose_docs_api_js_modules_process_md","title":{"content":"Module","type":"text"},"sections":["Functions"],"subSections":["exit","relaunch"],"code":[],"text":"[@tauri-apps/api](../index.md) / process # Module: process ## Functions ### exit\n▸ **exit**(`exitCode?`): `Promise`<`void`\\> Exits immediately with the given\n`exitCode`. #### Parameters | Name | Type | Default value | Description | |\n:------ | :------ | :------ | :------ | | `exitCode` | `number` | `0` | The exit\ncode to use. | #### Returns `Promise`<`void`\\> A promise indicating the success\nor failure of the operation. #### Defined in\n[process.ts:20](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/process.ts#L20)\n___ ### relaunch ▸ **relaunch**(): `Promise`<`void`\\> Exits the current instance\nof the app then relaunches it. #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Defined in\n[process.ts:35](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/process.ts#L35)","url":"https://tauri.studio/docs/api/js/modules/process"},{"id":"prose_docs_api_js_modules_shell_md","title":{"content":"Module","type":"text"},"sections":["Classes","Interfaces","Functions"],"subSections":["open"],"code":[],"text":"[@tauri-apps/api](../index.md) / shell # Module: shell ## Classes -\n[Child](../classes/shell.Child.md) - [Command](../classes/shell.Command.md) ##\nInterfaces - [ChildProcess](../interfaces/shell.ChildProcess.md) -\n[SpawnOptions](../interfaces/shell.SpawnOptions.md) ## Functions ### open ▸\n**open**(`path`, `openWith?`): `Promise`<`void`\\> Opens a path or URL with the\nsystem's default app, or the one specified with `openWith`. **`example`**\n```typescript // opens the given URL on the default browser: await\nopen('https://github.com/tauri-apps/tauri') // opens the given URL using\n`firefox`: await open('https://github.com/tauri-apps/tauri', 'firefox') // opens\na file using the default program: await open('/path/to/file') ``` ####\nParameters | Name | Type | Description | | :------ | :------ | :------ | |\n`path` | `string` | The path or URL to open. | | `openWith?` | `string` | The\napp to open the file or URL with. Defaults to the system default application for\nthe specified path type. | #### Returns `Promise`<`void`\\> #### Defined in\n[shell.ts:358](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/shell.ts#L358)","url":"https://tauri.studio/docs/api/js/modules/shell"},{"id":"prose_docs_api_js_modules_tauri_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Functions"],"subSections":["convertFileSrc","invoke","transformCallback"],"code":[],"text":"[@tauri-apps/api](../index.md) / tauri # Module: tauri Invoke your custom\ncommands. This package is also accessible with `window.__TAURI__.tauri` when\n`tauri.conf.json > build > withGlobalTauri` is set to true. ## Interfaces -\n[InvokeArgs](../interfaces/tauri.InvokeArgs.md) ## Functions ### convertFileSrc\n▸ **convertFileSrc**(`filePath`): `string` Convert a device file path to an URL\nthat can be loaded by the webview. Note that `asset:` must be allowed on the\n`csp` value configured on `tauri.conf.json`. #### Parameters | Name | Type |\nDescription | | :------ | :------ | :------ | | `filePath` | `string` | the file\npath. On Windows, the drive name must be omitted, i.e. using\n`/Users/user/file.png` instead of `C:/Users/user/file.png`. | #### Returns\n`string` the URL that can be used as source on the webview #### Defined in\n[tauri.ts:102](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/tauri.ts#L102)\n___ ### invoke ▸ **invoke**<`T`\\>(`cmd`, `args?`): `Promise`<`T`\\> Sends a\nmessage to the backend. #### Type parameters | Name | | :------ | | `T` | ####\nParameters | Name | Type | Description | | :------ | :------ | :------ | | `cmd`\n| `string` | The command name. | | `args` |\n[`InvokeArgs`](../interfaces/tauri.InvokeArgs.md) | The optional arguments to\npass to the command. | #### Returns `Promise`<`T`\\> A promise resolving or\nrejecting to the backend response. #### Defined in\n[tauri.ts:74](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/tauri.ts#L74)\n___ ### transformCallback ▸ **transformCallback**(`callback?`, `once?`):\n`string` Transforms a callback function to a string identifier that can be\npassed to the backend. The backend uses the identifier to `eval()` the callback.\n#### Parameters | Name | Type | Default value | | :------ | :------ | :------ |\n| `callback?` | (`response`: `any`) => `void` | `undefined` | | `once` |\n`boolean` | `false` | #### Returns `string` A unique identifier associated with\nthe callback function. #### Defined in\n[tauri.ts:41](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/tauri.ts#L41)","url":"https://tauri.studio/docs/api/js/modules/tauri"},{"id":"prose_docs_api_js_modules_updater_md","title":{"content":"Module","type":"text"},"sections":["Interfaces","Type aliases","Functions"],"subSections":["UpdateStatus","checkUpdate","installUpdate"],"code":[],"text":"[@tauri-apps/api](../index.md) / updater # Module: updater Customize the auto\nupdater flow. This package is also accessible with `window.__TAURI__.updater`\nwhen `tauri.conf.json > build > withGlobalTauri` is set to true. ## Interfaces -\n[UpdateManifest](../interfaces/updater.UpdateManifest.md) -\n[UpdateResult](../interfaces/updater.UpdateResult.md) -\n[UpdateStatusResult](../interfaces/updater.UpdateStatusResult.md) ## Type\naliases ### UpdateStatus Ƭ **UpdateStatus**: ``\"PENDING\"`` \\| ``\"ERROR\"`` \\|\n``\"DONE\"`` \\| ``\"UPTODATE\"`` #### Defined in\n[updater.ts:14](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L14)\n## Functions ### checkUpdate ▸ **checkUpdate**():\n`Promise`<[`UpdateResult`](../interfaces/updater.UpdateResult.md)\\> Checks if an\nupdate is available. #### Returns\n`Promise`<[`UpdateResult`](../interfaces/updater.UpdateResult.md)\\> Promise\nresolving to the update status. #### Defined in\n[updater.ts:89](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L89)\n___ ### installUpdate ▸ **installUpdate**(): `Promise`<`void`\\> Install the\nupdate if there's one available. #### Returns `Promise`<`void`\\> A promise\nindicating the success or failure of the operation. #### Defined in\n[updater.ts:37](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/updater.ts#L37)","url":"https://tauri.studio/docs/api/js/modules/updater"},{"id":"prose_docs_api_js_modules_window_md","title":{"content":"Module","type":"text"},"sections":["Enumerations","Classes","Interfaces","Variables","Functions"],"subSections":["appWindow","availableMonitors","currentMonitor","getAll","getCurrent","primaryMonitor"],"code":[],"text":"[@tauri-apps/api](../index.md) / window # Module: window Provides APIs to create\nwindows, communicate with other windows and manipulate the current window. This\npackage is also accessible with `window.__TAURI__.window` when `tauri.conf.json\n> build > withGlobalTauri` is set to true. The APIs must be allowlisted on\n`tauri.conf.json`: ```json { \"tauri\": { \"allowlist\": { \"window\": { \"all\": true,\n// enable all window APIs \"create\": true // enable window creation } } } } ```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and\nsecurity. # Window events Events can be listened using `appWindow.listen`:\n```typescript import { appWindow } from '@tauri-apps/api/window'\nappWindow.listen('tauri://move', ({ event, payload }) => { const { x, y } =\npayload // payload here is a `PhysicalPosition` }) ``` Window-specific events\nemitted by the backend: #### 'tauri://resize' Emitted when the size of the\nwindow has changed. *EventPayload*: ```typescript type ResizePayload =\nPhysicalSize ``` #### 'tauri://move' Emitted when the position of the window has\nchanged. *EventPayload*: ```typescript type MovePayload = PhysicalPosition ```\n#### 'tauri://close-requested' Emitted when the user requests the window to be\nclosed. #### 'tauri://destroyed' Emitted after the window is closed. ####\n'tauri://focus' Emitted when the window gains focus. #### 'tauri://blur' Emitted\nwhen the window loses focus. #### 'tauri://scale-change' Emitted when the\nwindow's scale factor has changed. The following user actions can cause DPI\nchanges: - Changing the display's resolution. - Changing the display's scale\nfactor (e.g. in Control Panel on Windows). - Moving the window to a display with\na different scale factor. *Event payload*: ```typescript interface\nScaleFactorChanged { scaleFactor: number size: PhysicalSize } ``` ####\n'tauri://menu' Emitted when a menu item is clicked. *EventPayload*:\n```typescript type MenuClicked = string ``` ## Enumerations -\n[UserAttentionType](../enums/window.UserAttentionType.md) ## Classes -\n[LogicalPosition](../classes/window.LogicalPosition.md) -\n[LogicalSize](../classes/window.LogicalSize.md) -\n[PhysicalPosition](../classes/window.PhysicalPosition.md) -\n[PhysicalSize](../classes/window.PhysicalSize.md) -\n[WebviewWindow](../classes/window.WebviewWindow.md) -\n[WebviewWindowHandle](../classes/window.WebviewWindowHandle.md) -\n[WindowManager](../classes/window.WindowManager.md) ## Interfaces -\n[Monitor](../interfaces/window.Monitor.md) -\n[WindowOptions](../interfaces/window.WindowOptions.md) ## Variables ###\nappWindow • `Const` **appWindow**:\n[`WebviewWindow`](../classes/window.WebviewWindow.md) The WebviewWindow for the\ncurrent window. #### Defined in\n[window.ts:1132](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1132)\n## Functions ### availableMonitors ▸ **availableMonitors**():\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md)[]\\> Returns the list of\nall the monitors available on the system. #### Returns\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md)[]\\> #### Defined in\n[window.ts:1220](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1220)\n___ ### currentMonitor ▸ **currentMonitor**():\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md) \\| ``null``\\> Returns the\nmonitor on which the window currently resides. Returns `null` if current monitor\ncan't be detected. #### Returns\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md) \\| ``null``\\> ####\nDefined in\n[window.ts:1187](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1187)\n___ ### getAll ▸ **getAll**():\n[`WebviewWindow`](../classes/window.WebviewWindow.md)[] Gets an instance of\n`WebviewWindow` for all available webview windows. #### Returns\n[`WebviewWindow`](../classes/window.WebviewWindow.md)[] The list of\nWebviewWindow. #### Defined in\n[window.ts:209](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L209)\n___ ### getCurrent ▸ **getCurrent**():\n[`WebviewWindow`](../classes/window.WebviewWindow.md) Get an instance of\n`WebviewWindow` for the current webview window. #### Returns\n[`WebviewWindow`](../classes/window.WebviewWindow.md) The current WebviewWindow.\n#### Defined in\n[window.ts:197](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L197)\n___ ### primaryMonitor ▸ **primaryMonitor**():\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md) \\| ``null``\\> Returns the\nprimary monitor of the system. Returns `null` if it can't identify any monitor\nas a primary one. #### Returns\n`Promise`<[`Monitor`](../interfaces/window.Monitor.md) \\| ``null``\\> ####\nDefined in\n[window.ts:1205](https://github.com/tauri-apps/tauri/blob/52723ee8/tooling/api/src/window.ts#L1205)","url":"https://tauri.studio/docs/api/js/modules/window"},{"id":"prose_docs_api_rust_tauri_attr_command_md","title":"Attr tauri::command","sections":["Stability"],"subSections":[],"code":["rs"],"text":"# Attribute Macro tauri::command, ```rs #[command] ``` Expand description Mark a\nfunction as a command handler. It creates a wrapper function with the necessary\nglue code. ## Stability The output of this macro is managed internally by Tauri,\nand should not be accessed directly on normal applications. It may have breaking\nchanges in the future.","url":"https://tauri.studio/docs/api/rust/tauri/attr.command"},{"id":"prose_docs_api_rust_tauri_enum_Error_md","title":"Enum tauri::Error","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::Error, ```rs #[non_exhaustive] pub enum Error { Show variants\nRuntime(Error), CreateWebview(Box), CreateWindow,\nWindowLabelAlreadyExists(String), WebviewNotFound, FailedToSendMessage,\nAssetNotFound(String), Json(Error), UnknownApi(Option),\nFailedToExecuteApi(Error), Io(Error), InvalidIcon(Box),\nHttpClientNotInitialized, ApiNotEnabled(String), ApiNotAllowlisted(String),\nInvalidArgs(&'static str, Error), Setup(Box),\nPluginInitialization(String, String), DialogDefaultPathNotExists(PathBuf),\nSystemTray(Box), InvalidUrl(ParseError), JoinError(Box), } ``` Expand\ndescription Runtime errors that can happen inside a Tauri application. ##\nVariants (Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive\nenums could have additional variants added in future. Therefore, when matching\nagainst variants of non-exhaustive enums, an extra wildcard arm must be added to\naccount for any future variants. `Runtime(Error)` Runtime error.\n`CreateWebview(Box)` Failed to create webview. `CreateWindow` Failed to create\nwindow. `WindowLabelAlreadyExists(String)` Window label must be unique.\n`WebviewNotFound` Can’t access webview dispatcher because the webview was closed\nor not found. `FailedToSendMessage` Failed to send message to webview.\n`AssetNotFound(String)` Embedded asset not found. `Json(Error)` Failed to\nserialize/deserialize. `UnknownApi(Option)` Unknown API type.\n`FailedToExecuteApi(Error)` Failed to execute tauri API. `Io(Error)` IO error.\n`InvalidIcon(Box)` Failed to load window icon. `HttpClientNotInitialized` Client\nwith specified ID not found. `ApiNotEnabled(String)` API not enabled by Tauri.\n`ApiNotAllowlisted(String)` API not whitelisted on tauri.conf.json\n`InvalidArgs(&'static str, Error)` Invalid args when running a command.\n`Setup(Box)` Encountered an error in the setup hook,\n`PluginInitialization(String, String)` Error initializing plugin.\n`DialogDefaultPathNotExists(PathBuf)` `default_path` provided to dialog API\ndoesn’t exist. `SystemTray(Box)` Encountered an error creating the app system\ntray, `InvalidUrl(ParseError)` A part of the URL is malformed or invalid. This\nmay occur when parsing and combining user-provided URLs and paths.\n`JoinError(Box)` Task join error. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\n\\_\\_formatter: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto source\ncode\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<Error> for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\nError) -> Self[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](/docs/api/rust/tauri/api/enum.Error \"enum\ntauri::api::Error\")> for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](/docs/api/rust/tauri/api/enum.Error \"enum tauri::api::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto source code\")\nPerforms the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](https://doc.rust-lang.org/1.54.0/std/io/error/struct.Error.html\n\"struct std::io::error::Error\")> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](https://doc.rust-lang.org/1.54.0/std/io/error/struct.Error.html \"struct\nstd::io::error::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#8 \"goto source code\")\nPerforms the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\")> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#89-97\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(error:\n[Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/error.rs#90-96 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")> for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#72-77\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(error:\n[Error](/docs/api/rust/tauri/enum.Error \"enum tauri::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#74-76 \"goto source\ncode\") Performs the conversion. ## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::Error\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::Error\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.Error"},{"id":"prose_docs_api_rust_tauri_enum_Event_md","title":"Enum tauri::Event","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["Fields of ","Fields of ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::Event, ```rs #[non_exhaustive] pub enum Event { Exit,\nExitRequested { window_label: String, api: ExitRequestApi, }, CloseRequested {\nlabel: String, api: CloseRequestApi, }, WindowClosed(String), Ready, Resumed,\nMainEventsCleared, } ``` Expand description An application event, triggered from\nthe event loop. ## Variants (Non-exhaustive) This enum is marked as\nnon-exhaustive Non-exhaustive enums could have additional variants added in\nfuture. Therefore, when matching against variants of non-exhaustive enums, an\nextra wildcard arm must be added to account for any future variants. `Exit`\nEvent loop is exiting. `ExitRequested` The app is about to exit This variant is\nmarked as non-exhaustive Non-exhaustive enum variants could have additional\nfields added in future. Therefore, non-exhaustive enum variants cannot be\nconstructed in external crates and cannot be matched against. Show fields ###\nFields of **ExitRequested** `window_label: String` The label of the window that\nrequested the exit. It is the last window managed by tauri. `api:\nExitRequestApi` Event API `CloseRequested` Window close was requested by the\nuser. This variant is marked as non-exhaustive Non-exhaustive enum variants\ncould have additional fields added in future. Therefore, non-exhaustive enum\nvariants cannot be constructed in external crates and cannot be matched against.\nShow fields ### Fields of **CloseRequested** `label: String` The window label.\n`api: CloseRequestApi` Event API. `WindowClosed(String)` Window closed. `Ready`\nApplication ready. `Resumed` Sent if the event loop is being resumed.\n`MainEventsCleared` Emitted when all of the event loop’s input events have been\nprocessed and redraw processing is about to begin. This event is useful as a\nplace to put your code that should be run after all state-changing events have\nbeen handled and you want to do stuff (updating state, performing calculations,\netc) that happens as the “main body” of your event loop. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Event](/docs/api/rust/tauri/enum.Event \"enum\ntauri::Event\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#75 \"goto source\ncode\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#75 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Event](/docs/api/rust/tauri/enum.Event\n\"enum tauri::Event\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Event](/docs/api/rust/tauri/enum.Event \"enum\ntauri::Event\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Event](/docs/api/rust/tauri/enum.Event \"enum\ntauri::Event\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Event](/docs/api/rust/tauri/enum.Event \"enum\ntauri::Event\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Event](/docs/api/rust/tauri/enum.Event\n\"enum tauri::Event\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.Event"},{"id":"prose_docs_api_rust_tauri_enum_Icon_md","title":"Enum tauri::Icon","sections":["Variants ","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::Icon, ```rs #[non_exhaustive] pub enum Icon { File(PathBuf),\nRaw(Vec), } ``` Expand description A icon definition. ## Variants\n(Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive enums\ncould have additional variants added in future. Therefore, when matching against\nvariants of non-exhaustive enums, an extra wildcard arm must be added to account\nfor any future variants. `File(PathBuf)` Icon from file path. `Raw(Vec)` Icon\nfrom raw bytes. ## Implementations ### impl\n[Icon](/docs/api/rust/tauri/enum.Icon \"enum tauri::Icon\") #### pub fn\n[into_tray_icon](/docs/api/rust/tauri/about:blank#method.into_tray_icon)(self)\n-> [PathBuf](https://doc.rust-lang.org/1.54.0/std/path/struct.PathBuf.html\n\"struct std::path::PathBuf\") Converts the icon to a the expected system tray\nformat. We expect the code that passes the Icon enum to have already checked the\nplatform. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Icon](/docs/api/rust/tauri/enum.Icon \"enum tauri::Icon\") Returns a copy of\nthe value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Icon](/docs/api/rust/tauri/enum.Icon\n\"enum tauri::Icon\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.Icon"},{"id":"prose_docs_api_rust_tauri_enum_InvokeResponse_md","title":"Enum tauri::InvokeResponse","sections":["Variants","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::InvokeResponse, ```rs pub enum InvokeResponse { Ok(JsonValue),\nErr(InvokeError), } ``` Expand description Response from a\n[`InvokeMessage`](/docs/api/rust/tauri/struct.InvokeMessage \"InvokeMessage\")\npassed to the [`InvokeResolver`](/docs/api/rust/tauri/struct.InvokeResolver\n\"InvokeResolver\"). ## Variants `Ok(JsonValue)` Resolve the promise.\n`Err(InvokeError)` Reject the promise. ## Implementations ### impl\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#88-97\n\"goto source code\") #### pub fn\n[into_result](/docs/api/rust/tauri/about:blank#method.into_result)(self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[JsonValue](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html\n\"enum serde_json::value::Value\"),\n[JsonValue](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html\n\"enum\nserde_json::value::Value\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#91-96\n\"goto source code\") Turn a\n[`InvokeResponse`](/docs/api/rust/tauri/enum.InvokeResponse \"InvokeResponse\")\nback into a serializable result. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse\n\"enum\ntauri::InvokeResponse\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#80\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#80 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait\ncore::convert::From\")<[InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\")> for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#112-116\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(error:\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#113-115 \"goto source\ncode\") Performs the conversion. ### impl<T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T,\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")>> for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#99-110\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(result:\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#101-109 \"goto source\ncode\") Performs the conversion. ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.InvokeResponse"},{"id":"prose_docs_api_rust_tauri_enum_MenuItem_md","title":"Enum tauri::MenuItem","sections":["Variants ",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::MenuItem, ```rs #[non_exhaustive] pub enum MenuItem { Show\nvariants About(String), Hide, Services, HideOthers, ShowAll, CloseWindow, Quit,\nCopy, Cut, Undo, Redo, SelectAll, Paste, EnterFullScreen, Minimize, Zoom,\nSeparator, } ``` Expand description A menu item, bound to a pre-defined action\nor `Custom` emit an event. Note that status bar only supports `Custom` menu item\nvariants. And on the menu bar, some platforms might not support some of the\nvariants. Unsupported variant will be no-op on such platform. ## Variants\n(Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive enums\ncould have additional variants added in future. Therefore, when matching against\nvariants of non-exhaustive enums, an extra wildcard arm must be added to account\nfor any future variants. `About(String)` Shows a standard “About” item ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific) -\n**Windows / Android / iOS:** Unsupported `Hide` A standard “hide the app” menu\nitem. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-1) -\n**Windows / Android / iOS:** Unsupported `Services` A standard “Services” menu\nitem. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-2) -\n**Windows / Linux / Android / iOS:** Unsupported `HideOthers` A “hide all other\nwindows” menu item. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-3) -\n**Windows / Linux / Android / iOS:** Unsupported `ShowAll` A menu item to show\nall the windows for this app. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-4) -\n**Windows / Linux / Android / iOS:** Unsupported `CloseWindow` Close the current\nwindow. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-5) -\n**Windows / Android / iOS:** Unsupported `Quit` A “quit this app” menu icon. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-6) -\n**Windows / Android / iOS:** Unsupported `Copy` A menu item for enabling copying\n(often text) from responders. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-7) -\n**Windows / Android / iOS:** Unsupported `Cut` A menu item for enabling cutting\n(often text) from responders. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-8) -\n**Windows / Android / iOS:** Unsupported `Undo` An “undo” menu item;\nparticularly useful for supporting the cut/copy/paste/undo lifecycle of events.\n## [Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-9) -\n**Windows / Linux / Android / iOS:** Unsupported `Redo` An “redo” menu item;\nparticularly useful for supporting the cut/copy/paste/undo lifecycle of events.\n## [Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-10) -\n**Windows / Linux / Android / iOS:** Unsupported `SelectAll` A menu item for\nselecting all (often text) from responders. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-11) -\n**Windows / Android / iOS:** Unsupported `Paste` A menu item for pasting (often\ntext) into responders. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-12) -\n**Windows / Android / iOS:** Unsupported `EnterFullScreen` A standard “enter\nfull screen” item. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-13) -\n**Windows / Linux / Android / iOS:** Unsupported `Minimize` An item for\nminimizing the window with the standard system controls. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-14) -\n**Windows / Android / iOS:** Unsupported `Zoom` An item for instructing the app\nto zoom ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-15) -\n**Windows / Linux / Android / iOS:** Unsupported `Separator` Represents a\nSeparator ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-16) -\n**Windows / Android / iOS:** Unsupported ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum\ntauri::MenuItem\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum tauri::MenuItem\") Returns\na copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [MenuItem](/docs/api/rust/tauri/enum.MenuItem\n\"enum tauri::MenuItem\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum tauri::MenuItem\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum\ntauri::MenuItem\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum\ntauri::MenuItem\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum\ntauri::MenuItem\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum tauri::MenuItem\") ## Blanket\nImplementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.MenuItem"},{"id":"prose_docs_api_rust_tauri_enum_Position_md","title":"Enum tauri::Position","sections":["Variants","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::Position, ```rs pub enum Position { Physical(PhysicalPosition),\nLogical(LogicalPosition), } ``` Expand description A position that’s either\nphysical or logical. ## Variants `Physical(PhysicalPosition)` Physical position.\n`Logical(LogicalPosition)` Logical position. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\") Returns\na copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Position](/docs/api/rust/tauri/enum.Position\n\"enum tauri::Position\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\") #### pub\nfn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\"), <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Position](/docs/api/rust/tauri/enum.Position\n\"enum tauri::Position\")> for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\"))\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\"))\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for [Position](/docs/api/rust/tauri/enum.Position\n\"enum tauri::Position\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\") ## Auto\nTrait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Position](/docs/api/rust/tauri/enum.Position \"enum\ntauri::Position\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Position](/docs/api/rust/tauri/enum.Position \"enum tauri::Position\") ## Blanket\nImplementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/enum.Position"},{"id":"prose_docs_api_rust_tauri_enum_Size_md","title":"Enum tauri::Size","sections":["Variants","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::Size, ```rs pub enum Size { Physical(PhysicalSize),\nLogical(LogicalSize), } ``` Expand description A size that’s either physical or\nlogical. ## Variants `Physical(PhysicalSize)` Physical size.\n`Logical(LogicalSize)` Logical size. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Size](/docs/api/rust/tauri/enum.Size \"enum tauri::Size\") Returns a copy of\nthe value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for [Size](/docs/api/rust/tauri/enum.Size\n\"enum tauri::Size\") #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\"), <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\")> for [Size](/docs/api/rust/tauri/enum.Size \"enum tauri::Size\")\n#### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Size](/docs/api/rust/tauri/enum.Size \"enum tauri::Size\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[Size](/docs/api/rust/tauri/enum.Size \"enum tauri::Size\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Size](/docs/api/rust/tauri/enum.Size \"enum tauri::Size\") ## Auto Trait\nImplementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Size](/docs/api/rust/tauri/enum.Size\n\"enum tauri::Size\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Size](/docs/api/rust/tauri/enum.Size \"enum\ntauri::Size\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/enum.Size"},{"id":"prose_docs_api_rust_tauri_enum_UserAttentionType_md","title":"Enum tauri::UserAttentionType","sections":["Variants",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::UserAttentionType, ```rs pub enum UserAttentionType { Critical,\nInformational, } ``` Expand description Type of user attention requested on a\nwindow. ## Variants `Critical` ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific) -\n**macOS:** Bounces the dock icon until the application is in focus. -\n**Windows:** Flashes both the window and the taskbar button until the\napplication is in focus. `Informational` ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-1) -\n**macOS:** Bounces the dock icon once. - **Windows:** Flashes the taskbar button\nuntil the application is in focus. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType\n\"enum tauri::UserAttentionType\"), <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType\n\"enum tauri::UserAttentionType\")> for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType \"enum\ntauri::UserAttentionType\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/enum.UserAttentionType"},{"id":"prose_docs_api_rust_tauri_enum_WindowEvent_md","title":"Enum tauri::WindowEvent","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["Fields of ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::WindowEvent, ```rs #[non_exhaustive] pub enum WindowEvent {\nResized(PhysicalSize), Moved(PhysicalPosition), CloseRequested, Destroyed,\nFocused(bool), ScaleFactorChanged { scale_factor: f64, new_inner_size:\nPhysicalSize, }, } ``` Expand description An event from a window. ## Variants\n(Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive enums\ncould have additional variants added in future. Therefore, when matching against\nvariants of non-exhaustive enums, an extra wildcard arm must be added to account\nfor any future variants. `Resized(PhysicalSize)` The size of the window has\nchanged. Contains the client area’s new dimensions. `Moved(PhysicalPosition)`\nThe position of the window has changed. Contains the window’s new position.\n`CloseRequested` The window has been requested to close. `Destroyed` The window\nhas been destroyed. `Focused(bool)` The window gained or lost focus. The\nparameter is true if the window has gained focus, and false if it has lost\nfocus. `ScaleFactorChanged` The window’s scale factor has changed. The following\nuser actions can cause DPI changes: - Changing the display’s resolution. -\nChanging the display’s scale factor (e.g. in Control Panel on Windows). - Moving\nthe window to a display with a different scale factor. Show fields ### Fields of\n**ScaleFactorChanged** `scale_factor: f64` The new scale factor.\n`new_inner_size: PhysicalSize` The window inner size. ## Trait Implementations\n### impl [Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html\n\"trait core::clone::Clone\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n#### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum\ntauri::WindowEvent\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n#### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n### impl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n### impl [Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html\n\"trait core::marker::Sync\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n### impl [Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html\n\"trait core::marker::Unpin\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum tauri::WindowEvent\")\n## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/enum.WindowEvent"},{"id":"prose_docs_api_rust_tauri_enum_WindowUrl_md","title":"Enum tauri::WindowUrl","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::WindowUrl, ```rs #[non_exhaustive] pub enum WindowUrl {\nExternal(Url), App(PathBuf), } ``` Expand description The window webview URL\noptions. ## Variants (Non-exhaustive) This enum is marked as non-exhaustive\nNon-exhaustive enums could have additional variants added in future. Therefore,\nwhen matching against variants of non-exhaustive enums, an extra wildcard arm\nmust be added to account for any future variants. `External(Url)` An external\nURL. `App(PathBuf)` An app URL. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\")\nReturns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl\n\"enum tauri::WindowUrl\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ####\npub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\")\nReturns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ####\npub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\"), <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl\n\"enum tauri::WindowUrl\")> for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl\n\"enum tauri::WindowUrl\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl\n[ToTokens](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html\n\"trait quote::to_tokens::ToTokens\") for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ####\npub fn\n[to_tokens](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens)(&self,\ntokens: &mut\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct proc_macro2::TokenStream\")) Write `self` to the given `TokenStream`.\n[Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens)\n#### fn\n[to_token_stream](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.to_token_stream)(&self)\n->\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct\nproc_macro2::TokenStream\")[\\[src\\]](https://docs.rs/quote/1.0.9/src/quote/to_tokens.rs.html#61\n\"goto source code\") Convert `self` directly into a `TokenStream` object. [Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.to_token_stream)\n#### fn\n[into_token_stream](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.into_token_stream)(self)\n->\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct\nproc_macro2::TokenStream\")[\\[src\\]](https://docs.rs/quote/1.0.9/src/quote/to_tokens.rs.html#71-73\n\"goto source code\") Convert `self` directly into a `TokenStream` object. [Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.into_token_stream)\n### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ## Auto\nTrait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ###\nimpl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum\ntauri::WindowUrl\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\") ##\nBlanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/enum.WindowUrl"},{"id":"prose_docs_api_rust_tauri_index_md","title":"Table of contents","sections":[],"subSections":["Structs","Enums","Traits","Macros","Attribute Macros","Functions","Typedefs","Constants"],"code":[],"text":"# List of all items, ### Structs - [App](/docs/api/rust/tauri/struct.App) -\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle) -\n[Builder](/docs/api/rust/tauri/struct.Builder) -\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi) -\n[Config](/docs/api/rust/tauri/struct.Config) -\n[Context](/docs/api/rust/tauri/struct.Context) -\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem) -\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent) -\n[Invoke](/docs/api/rust/tauri/struct.Invoke) -\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError) -\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage) -\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver) -\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition) -\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize) -\n[Menu](/docs/api/rust/tauri/struct.Menu) -\n[MenuEvent](/docs/api/rust/tauri/struct.MenuEvent) -\n[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo) -\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload) -\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver) -\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition) -\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize) -\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration) -\n[State](/docs/api/rust/tauri/struct.State) -\n[StateManager](/docs/api/rust/tauri/struct.StateManager) -\n[Submenu](/docs/api/rust/tauri/struct.Submenu) -\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes) -\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent) -\n[Wry](/docs/api/rust/tauri/struct.Wry) -\n[api::dir::DiskEntry](/docs/api/rust/tauri/api/dir/struct.DiskEntry) -\n[api::file::Extract](/docs/api/rust/tauri/api/file/struct.Extract) -\n[api::file::Move](/docs/api/rust/tauri/api/file/struct.Move) -\n[api::http::Client](/docs/api/rust/tauri/api/http/struct.Client) -\n[api::http::ClientBuilder](/docs/api/rust/tauri/api/http/struct.ClientBuilder) -\n[api::http::FormBody](/docs/api/rust/tauri/api/http/struct.FormBody) -\n[api::http::HttpRequestBuilder](/docs/api/rust/tauri/api/http/struct.HttpRequestBuilder)\n- [api::http::RawResponse](/docs/api/rust/tauri/api/http/struct.RawResponse) -\n[api::http::Response](/docs/api/rust/tauri/api/http/struct.Response) -\n[api::http::ResponseData](/docs/api/rust/tauri/api/http/struct.ResponseData) -\n[async_runtime::Handle](/docs/api/rust/tauri/async_runtime/struct.Handle) -\n[async_runtime::JoinHandle](/docs/api/rust/tauri/async_runtime/struct.JoinHandle)\n- [async_runtime::Mutex](/docs/api/rust/tauri/async_runtime/struct.Mutex) -\n[async_runtime::Receiver](/docs/api/rust/tauri/async_runtime/struct.Receiver) -\n[async_runtime::RwLock](/docs/api/rust/tauri/async_runtime/struct.RwLock) -\n[async_runtime::Sender](/docs/api/rust/tauri/async_runtime/struct.Sender) -\n[async_runtime::TokioJoinHandle](/docs/api/rust/tauri/async_runtime/struct.TokioJoinHandle)\n- [command::CommandItem](/docs/api/rust/tauri/command/struct.CommandItem) -\n[http::HttpRange](http/struct.HttpRange.html) -\n[http::InvalidUri](http/struct.InvalidUri.html) -\n[http::Request](http/struct.Request.html) -\n[http::RequestParts](http/struct.RequestParts.html) -\n[http::Response](http/struct.Response.html) -\n[http::ResponseBuilder](http/struct.ResponseBuilder.html) -\n[http::ResponseParts](http/struct.ResponseParts.html) -\n[http::Uri](http/struct.Uri.html) -\n[http::header::Drain](http/header/struct.Drain.html) -\n[http::header::GetAll](http/header/struct.GetAll.html) -\n[http::header::HeaderMap](http/header/struct.HeaderMap.html) -\n[http::header::HeaderName](http/header/struct.HeaderName.html) -\n[http::header::HeaderValue](http/header/struct.HeaderValue.html) -\n[http::header::IntoIter](http/header/struct.IntoIter.html) -\n[http::header::InvalidHeaderName](http/header/struct.InvalidHeaderName.html) -\n[http::header::InvalidHeaderValue](http/header/struct.InvalidHeaderValue.html) -\n[http::header::Iter](http/header/struct.Iter.html) -\n[http::header::IterMut](http/header/struct.IterMut.html) -\n[http::header::Keys](http/header/struct.Keys.html) -\n[http::header::OccupiedEntry](http/header/struct.OccupiedEntry.html) -\n[http::header::ToStrError](http/header/struct.ToStrError.html) -\n[http::header::VacantEntry](http/header/struct.VacantEntry.html) -\n[http::header::ValueDrain](http/header/struct.ValueDrain.html) -\n[http::header::ValueIter](http/header/struct.ValueIter.html) -\n[http::header::ValueIterMut](http/header/struct.ValueIterMut.html) -\n[http::header::Values](http/header/struct.Values.html) -\n[http::header::ValuesMut](http/header/struct.ValuesMut.html) -\n[http::method::InvalidMethod](http/method/struct.InvalidMethod.html) -\n[http::method::Method](http/method/struct.Method.html) -\n[http::status::InvalidStatusCode](http/status/struct.InvalidStatusCode.html) -\n[http::status::StatusCode](http/status/struct.StatusCode.html) -\n[http::version::Version](http/version/struct.Version.html) -\n[settings::Settings](/docs/api/rust/tauri/settings/struct.Settings) -\n[window::MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent) -\n[window::MenuHandle](/docs/api/rust/tauri/window/struct.MenuHandle) -\n[window::Monitor](/docs/api/rust/tauri/window/struct.Monitor) -\n[window::Window](/docs/api/rust/tauri/window/struct.Window) ### Enums -\n[Error](/docs/api/rust/tauri/enum.Error) -\n[Event](/docs/api/rust/tauri/enum.Event) -\n[Icon](/docs/api/rust/tauri/enum.Icon) -\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse) -\n[MenuItem](/docs/api/rust/tauri/enum.MenuItem) -\n[Position](/docs/api/rust/tauri/enum.Position) -\n[Size](/docs/api/rust/tauri/enum.Size) -\n[UserAttentionType](/docs/api/rust/tauri/enum.UserAttentionType) -\n[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent) -\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl) -\n[api::Error](/docs/api/rust/tauri/api/enum.Error) -\n[api::file::ArchiveFormat](/docs/api/rust/tauri/api/file/enum.ArchiveFormat) -\n[api::file::Compression](/docs/api/rust/tauri/api/file/enum.Compression) -\n[api::http::Body](/docs/api/rust/tauri/api/http/enum.Body) -\n[api::http::FormPart](/docs/api/rust/tauri/api/http/enum.FormPart) -\n[api::http::ResponseType](/docs/api/rust/tauri/api/http/enum.ResponseType) -\n[api::path::BaseDirectory](/docs/api/rust/tauri/api/path/enum.BaseDirectory) -\n[http::MimeType](http/enum.MimeType.html) -\n[http::header::Entry](http/header/enum.Entry.html) ### Traits -\n[Assets](/docs/api/rust/tauri/trait.Assets) -\n[ClipboardManager](/docs/api/rust/tauri/trait.ClipboardManager) -\n[GlobalShortcutManager](/docs/api/rust/tauri/trait.GlobalShortcutManager) -\n[Manager](/docs/api/rust/tauri/trait.Manager) -\n[Pixel](/docs/api/rust/tauri/trait.Pixel) -\n[Runtime](/docs/api/rust/tauri/trait.Runtime) -\n[WindowBuilder](/docs/api/rust/tauri/trait.WindowBuilder) -\n[async_runtime::RuntimeHandle](/docs/api/rust/tauri/async_runtime/trait.RuntimeHandle)\n- [command::CommandArg](/docs/api/rust/tauri/command/trait.CommandArg) -\n[http::header::AsHeaderName](http/header/trait.AsHeaderName.html) -\n[http::header::IntoHeaderName](http/header/trait.IntoHeaderName.html) -\n[plugin::Plugin](/docs/api/rust/tauri/plugin/trait.Plugin) ### Macros -\n[generate_context](/docs/api/rust/tauri/macro.generate_context) -\n[generate_handler](/docs/api/rust/tauri/macro.generate_handler) -\n[tauri_build_context](/docs/api/rust/tauri/macro.tauri_build_context) ###\nAttribute Macros - [command](/docs/api/rust/tauri/attr.command) ### Functions -\n[api::dialog::ask](/docs/api/rust/tauri/api/dialog/fn.ask) -\n[api::dialog::message](/docs/api/rust/tauri/api/dialog/fn.message) -\n[api::dir::is_dir](/docs/api/rust/tauri/api/dir/fn.is_dir) -\n[api::dir::read_dir](/docs/api/rust/tauri/api/dir/fn.read_dir) -\n[api::dir::with_temp_dir](/docs/api/rust/tauri/api/dir/fn.with_temp_dir) -\n[api::file::read_binary](/docs/api/rust/tauri/api/file/fn.read_binary) -\n[api::file::read_string](/docs/api/rust/tauri/api/file/fn.read_string) -\n[api::path::app_dir](/docs/api/rust/tauri/api/path/fn.app_dir) -\n[api::path::audio_dir](/docs/api/rust/tauri/api/path/fn.audio_dir) -\n[api::path::cache_dir](/docs/api/rust/tauri/api/path/fn.cache_dir) -\n[api::path::config_dir](/docs/api/rust/tauri/api/path/fn.config_dir) -\n[api::path::data_dir](/docs/api/rust/tauri/api/path/fn.data_dir) -\n[api::path::desktop_dir](/docs/api/rust/tauri/api/path/fn.desktop_dir) -\n[api::path::document_dir](/docs/api/rust/tauri/api/path/fn.document_dir) -\n[api::path::download_dir](/docs/api/rust/tauri/api/path/fn.download_dir) -\n[api::path::executable_dir](/docs/api/rust/tauri/api/path/fn.executable_dir) -\n[api::path::font_dir](/docs/api/rust/tauri/api/path/fn.font_dir) -\n[api::path::home_dir](/docs/api/rust/tauri/api/path/fn.home_dir) -\n[api::path::local_data_dir](/docs/api/rust/tauri/api/path/fn.local_data_dir) -\n[api::path::picture_dir](/docs/api/rust/tauri/api/path/fn.picture_dir) -\n[api::path::public_dir](/docs/api/rust/tauri/api/path/fn.public_dir) -\n[api::path::resolve_path](/docs/api/rust/tauri/api/path/fn.resolve_path) -\n[api::path::resource_dir](/docs/api/rust/tauri/api/path/fn.resource_dir) -\n[api::path::runtime_dir](/docs/api/rust/tauri/api/path/fn.runtime_dir) -\n[api::path::template_dir](/docs/api/rust/tauri/api/path/fn.template_dir) -\n[api::path::video_dir](/docs/api/rust/tauri/api/path/fn.video_dir) -\n[api::process::current_binary](/docs/api/rust/tauri/api/process/fn.current_binary)\n- [api::process::restart](/docs/api/rust/tauri/api/process/fn.restart) -\n[api::rpc::format_callback](/docs/api/rust/tauri/api/rpc/fn.format_callback) -\n[api::rpc::format_callback_result](/docs/api/rust/tauri/api/rpc/fn.format_callback_result)\n- [api::version::compare](/docs/api/rust/tauri/api/version/fn.compare) -\n[api::version::is_compatible](/docs/api/rust/tauri/api/version/fn.is_compatible)\n- [api::version::is_greater](/docs/api/rust/tauri/api/version/fn.is_greater) -\n[api::version::is_major](/docs/api/rust/tauri/api/version/fn.is_major) -\n[api::version::is_minor](/docs/api/rust/tauri/api/version/fn.is_minor) -\n[api::version::is_patch](/docs/api/rust/tauri/api/version/fn.is_patch) -\n[async_runtime::block_on](/docs/api/rust/tauri/async_runtime/fn.block_on) -\n[async_runtime::channel](/docs/api/rust/tauri/async_runtime/fn.channel) -\n[async_runtime::handle](/docs/api/rust/tauri/async_runtime/fn.handle) -\n[async_runtime::spawn](/docs/api/rust/tauri/async_runtime/fn.spawn) -\n[settings::read_settings](/docs/api/rust/tauri/settings/fn.read_settings) ###\nTypedefs - [InvokeHandler](/docs/api/rust/tauri/type.InvokeHandler) -\n[OnPageLoad](/docs/api/rust/tauri/type.OnPageLoad) -\n[Result](/docs/api/rust/tauri/type.Result) -\n[SetupHook](/docs/api/rust/tauri/type.SetupHook) -\n[SyncTask](/docs/api/rust/tauri/type.SyncTask) -\n[api::Result](/docs/api/rust/tauri/api/type.Result) -\n[plugin::Result](/docs/api/rust/tauri/plugin/type.Result) ### Constants -\n[http::header::ACCEPT](http/header/constant.ACCEPT.html) -\n[http::header::ACCEPT_CHARSET](http/header/constant.ACCEPT_CHARSET.html) -\n[http::header::ACCEPT_ENCODING](http/header/constant.ACCEPT_ENCODING.html) -\n[http::header::ACCEPT_LANGUAGE](http/header/constant.ACCEPT_LANGUAGE.html) -\n[http::header::ACCEPT_RANGES](http/header/constant.ACCEPT_RANGES.html) -\n[http::header::ACCESS_CONTROL_ALLOW_CREDENTIALS](http/header/constant.ACCESS_CONTROL_ALLOW_CREDENTIALS.html)\n-\n[http::header::ACCESS_CONTROL_ALLOW_HEADERS](http/header/constant.ACCESS_CONTROL_ALLOW_HEADERS.html)\n-\n[http::header::ACCESS_CONTROL_ALLOW_METHODS](http/header/constant.ACCESS_CONTROL_ALLOW_METHODS.html)\n-\n[http::header::ACCESS_CONTROL_ALLOW_ORIGIN](http/header/constant.ACCESS_CONTROL_ALLOW_ORIGIN.html)\n-\n[http::header::ACCESS_CONTROL_EXPOSE_HEADERS](http/header/constant.ACCESS_CONTROL_EXPOSE_HEADERS.html)\n-\n[http::header::ACCESS_CONTROL_MAX_AGE](http/header/constant.ACCESS_CONTROL_MAX_AGE.html)\n-\n[http::header::ACCESS_CONTROL_REQUEST_HEADERS](http/header/constant.ACCESS_CONTROL_REQUEST_HEADERS.html)\n-\n[http::header::ACCESS_CONTROL_REQUEST_METHOD](http/header/constant.ACCESS_CONTROL_REQUEST_METHOD.html)\n- [http::header::AGE](http/header/constant.AGE.html) -\n[http::header::ALLOW](http/header/constant.ALLOW.html) -\n[http::header::ALT_SVC](http/header/constant.ALT_SVC.html) -\n[http::header::AUTHORIZATION](http/header/constant.AUTHORIZATION.html) -\n[http::header::CACHE_CONTROL](http/header/constant.CACHE_CONTROL.html) -\n[http::header::CONNECTION](http/header/constant.CONNECTION.html) -\n[http::header::CONTENT_DISPOSITION](http/header/constant.CONTENT_DISPOSITION.html)\n- [http::header::CONTENT_ENCODING](http/header/constant.CONTENT_ENCODING.html) -\n[http::header::CONTENT_LANGUAGE](http/header/constant.CONTENT_LANGUAGE.html) -\n[http::header::CONTENT_LENGTH](http/header/constant.CONTENT_LENGTH.html) -\n[http::header::CONTENT_LOCATION](http/header/constant.CONTENT_LOCATION.html) -\n[http::header::CONTENT_RANGE](http/header/constant.CONTENT_RANGE.html) -\n[http::header::CONTENT_SECURITY_POLICY](http/header/constant.CONTENT_SECURITY_POLICY.html)\n-\n[http::header::CONTENT_SECURITY_POLICY_REPORT_ONLY](http/header/constant.CONTENT_SECURITY_POLICY_REPORT_ONLY.html)\n- [http::header::CONTENT_TYPE](http/header/constant.CONTENT_TYPE.html) -\n[http::header::COOKIE](http/header/constant.COOKIE.html) -\n[http::header::DATE](http/header/constant.DATE.html) -\n[http::header::DNT](http/header/constant.DNT.html) -\n[http::header::ETAG](http/header/constant.ETAG.html) -\n[http::header::EXPECT](http/header/constant.EXPECT.html) -\n[http::header::EXPIRES](http/header/constant.EXPIRES.html) -\n[http::header::FORWARDED](http/header/constant.FORWARDED.html) -\n[http::header::FROM](http/header/constant.FROM.html) -\n[http::header::HOST](http/header/constant.HOST.html) -\n[http::header::IF_MATCH](http/header/constant.IF_MATCH.html) -\n[http::header::IF_MODIFIED_SINCE](http/header/constant.IF_MODIFIED_SINCE.html) -\n[http::header::IF_NONE_MATCH](http/header/constant.IF_NONE_MATCH.html) -\n[http::header::IF_RANGE](http/header/constant.IF_RANGE.html) -\n[http::header::IF_UNMODIFIED_SINCE](http/header/constant.IF_UNMODIFIED_SINCE.html)\n- [http::header::LAST_MODIFIED](http/header/constant.LAST_MODIFIED.html) -\n[http::header::LINK](http/header/constant.LINK.html) -\n[http::header::LOCATION](http/header/constant.LOCATION.html) -\n[http::header::MAX_FORWARDS](http/header/constant.MAX_FORWARDS.html) -\n[http::header::ORIGIN](http/header/constant.ORIGIN.html) -\n[http::header::PRAGMA](http/header/constant.PRAGMA.html) -\n[http::header::PROXY_AUTHENTICATE](http/header/constant.PROXY_AUTHENTICATE.html)\n-\n[http::header::PROXY_AUTHORIZATION](http/header/constant.PROXY_AUTHORIZATION.html)\n- [http::header::PUBLIC_KEY_PINS](http/header/constant.PUBLIC_KEY_PINS.html) -\n[http::header::PUBLIC_KEY_PINS_REPORT_ONLY](http/header/constant.PUBLIC_KEY_PINS_REPORT_ONLY.html)\n- [http::header::RANGE](http/header/constant.RANGE.html) -\n[http::header::REFERER](http/header/constant.REFERER.html) -\n[http::header::REFERRER_POLICY](http/header/constant.REFERRER_POLICY.html) -\n[http::header::REFRESH](http/header/constant.REFRESH.html) -\n[http::header::RETRY_AFTER](http/header/constant.RETRY_AFTER.html) -\n[http::header::SEC_WEBSOCKET_ACCEPT](http/header/constant.SEC_WEBSOCKET_ACCEPT.html)\n-\n[http::header::SEC_WEBSOCKET_EXTENSIONS](http/header/constant.SEC_WEBSOCKET_EXTENSIONS.html)\n- [http::header::SEC_WEBSOCKET_KEY](http/header/constant.SEC_WEBSOCKET_KEY.html)\n-\n[http::header::SEC_WEBSOCKET_PROTOCOL](http/header/constant.SEC_WEBSOCKET_PROTOCOL.html)\n-\n[http::header::SEC_WEBSOCKET_VERSION](http/header/constant.SEC_WEBSOCKET_VERSION.html)\n- [http::header::SERVER](http/header/constant.SERVER.html) -\n[http::header::SET_COOKIE](http/header/constant.SET_COOKIE.html) -\n[http::header::STRICT_TRANSPORT_SECURITY](http/header/constant.STRICT_TRANSPORT_SECURITY.html)\n- [http::header::TE](http/header/constant.TE.html) -\n[http::header::TRAILER](http/header/constant.TRAILER.html) -\n[http::header::TRANSFER_ENCODING](http/header/constant.TRANSFER_ENCODING.html) -\n[http::header::UPGRADE](http/header/constant.UPGRADE.html) -\n[http::header::UPGRADE_INSECURE_REQUESTS](http/header/constant.UPGRADE_INSECURE_REQUESTS.html)\n- [http::header::USER_AGENT](http/header/constant.USER_AGENT.html) -\n[http::header::VARY](http/header/constant.VARY.html) -\n[http::header::VIA](http/header/constant.VIA.html) -\n[http::header::WARNING](http/header/constant.WARNING.html) -\n[http::header::WWW_AUTHENTICATE](http/header/constant.WWW_AUTHENTICATE.html) -\n[http::header::X_CONTENT_TYPE_OPTIONS](http/header/constant.X_CONTENT_TYPE_OPTIONS.html)\n-\n[http::header::X_DNS_PREFETCH_CONTROL](http/header/constant.X_DNS_PREFETCH_CONTROL.html)\n- [http::header::X_FRAME_OPTIONS](http/header/constant.X_FRAME_OPTIONS.html) -\n[http::header::X_XSS_PROTECTION](http/header/constant.X_XSS_PROTECTION.html)","url":"https://tauri.studio/docs/api/rust/tauri/index"},{"id":"prose_docs_api_rust_tauri_macro_generate_context_md","title":"Macro tauri::generate_context","sections":["Custom Config Path","Note","Stability"],"subSections":[],"code":["rs"],"text":"# Macro tauri::generate_context, ```rs generate_context!() { /* proc-macro */ }\n``` Expand description Reads the config file at compile time and generates a\n[`Context`](/docs/api/rust/tauri/struct.Context \"Context\") based on its content.\nThe default config file path is a `tauri.conf.json` file inside the Cargo\nmanifest directory of the crate being built. ## Custom Config Path You may pass\na string literal to this macro to specify a custom path for the Tauri config\nfile. If the path is relative, it will be search for relative to the Cargo\nmanifest of the compiling crate. ## Note This macro should not be called if you\nare using [`tauri-build`](https://docs.rs/tauri-build) to generate the context\nfrom inside your build script as it will just cause excess computations that\nwill be discarded. Use either the \\[\\`tauri-build] method or this macro - not\nboth. Reads a Tauri config file and generates a `::tauri::Context` based on the\ncontent. ## Stability The output of this macro is managed internally by Tauri,\nand should not be accessed directly on normal applications. It may have breaking\nchanges in the future.","url":"https://tauri.studio/docs/api/rust/tauri/macro.generate_context"},{"id":"prose_docs_api_rust_tauri_macro_generate_handler_md","title":"Macro tauri::generate_handler","sections":["Example","Stability"],"subSections":[],"code":["rs"],"text":"# Macro tauri::generate_handler, ```rs generate_handler!() { /* proc-macro */ }\n``` Expand description Accepts a list of commands functions. Creates a handler\nthat allows commands to be called from JS with invoke(). ## Example ⓘ ```rs use\ntauri::command; #[command] fn command_one() {} #[command] fn command_two() {} fn\nmain() { tauri::Builder::default()\n.invoke_handler(tauri::generate_handler![command_one, command_two])\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ## Stability The output of this macro is managed internally\nby Tauri, and should not be accessed directly on normal applications. It may\nhave breaking changes in the future.","url":"https://tauri.studio/docs/api/rust/tauri/macro.generate_handler"},{"id":"prose_docs_api_rust_tauri_macro_tauri_build_context_md","title":"Macro tauri::tauri_build_context","sections":[],"subSections":[],"code":["rs"],"text":"# Macro tauri::tauri_build_context, ```rs macro_rules! tauri_build_context { ()\n=> { ... }; } ``` Expand description Include a\n[`Context`](/docs/api/rust/tauri/struct.Context \"Context\") that was generated by\n[`tauri-build`](https://docs.rs/tauri-build) inside your build script. You\nshould either use [`tauri-build`](https://docs.rs/tauri-build) and this macro to\ninclude the compile time generated code, or\n[`generate_context!`](/docs/api/rust/tauri/macro.generate_context\n\"generate_context!\"). Do not use both at the same time, as they generate the\nsame code and will cause excess computations that will be discarded.","url":"https://tauri.studio/docs/api/rust/tauri/macro.tauri_build_context"},{"id":"prose_docs_api_rust_tauri_struct_App_md","title":"Struct tauri::App","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::App, ```rs pub struct App { /* fields omitted */ } ``` Expand\ndescription The instance of the currently running application. This type\nimplements [`Manager`](/docs/api/rust/tauri/trait.Manager \"Manager\") which\nallows for manipulation of global application items. ## Implementations ###\nimpl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395 \"goto\nsource code\") #### pub fn\n[create_window](/docs/api/rust/tauri/about:blank#method.create_window)<F>(\n&self, label: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, url:\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\"), setup:\nF ) -> [Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>\nwhere F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html),[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395\n\"goto source code\") Creates a new webview window. #### pub fn\n[path_resolver](/docs/api/rust/tauri/about:blank#method.path_resolver)(&self) ->\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395\n\"goto source code\") The path resolver for the application. #### pub fn\n[global_shortcut_manager](/docs/api/rust/tauri/about:blank#method.global_shortcut_manager)(&self)\n->\nR::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type\ntauri::Runtime::GlobalShortcutManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395\n\"goto source code\") Gets a copy of the global shortcut manager instance. ####\npub fn\n[clipboard_manager](/docs/api/rust/tauri/about:blank#method.clipboard_manager)(&self)\n->\nR::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type\ntauri::Runtime::ClipboardManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395\n\"goto source code\") Gets a copy of the clipboard manager instance. #### pub fn\n[config](/docs/api/rust/tauri/about:blank#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395 \"goto\nsource code\") Gets the app’s configuration, defined on the `tauri.conf.json`\nfile. #### pub fn\n[package_info](/docs/api/rust/tauri/about:blank#method.package_info)(&self) ->\n&[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#395 \"goto\nsource code\") Gets the app’s package information. ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#398-490 \"goto\nsource code\") #### pub fn\n[handle](/docs/api/rust/tauri/about:blank#method.handle)(&self) ->\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#400-402\n\"goto source code\") Gets a handle to the application instance. #### pub fn\n[run](/docs/api/rust/tauri/about:blank#method.run)<F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(&[AppHandle](/docs/api/rust/tauri/struct.AppHandle\n\"struct tauri::AppHandle\")<R>, [Event](/docs/api/rust/tauri/enum.Event \"enum\ntauri::Event\")) + 'static>(self, callback:\nF)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#428-459 \"goto source code\")\nRuns the application. ## Trait Implementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R> where\nR::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),\nR::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#297 \"goto\nsource code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#297 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")> [Manager](/docs/api/rust/tauri/trait.Manager \"trait\ntauri::Manager\")<R> for [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#308 \"goto\nsource code\") #### fn\n[config](/docs/api/rust/tauri/trait.Manager#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#256-258 \"goto\nsource code\") The [`Config`](/docs/api/rust/tauri/struct.Config \"Config\") the\nmanager was created with. #### fn\n[emit_all](/docs/api/rust/tauri/trait.Manager#method.emit_all)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#261-263\n\"goto source code\") Emits a event to all windows. #### fn\n[emit_to](/docs/api/rust/tauri/trait.Manager#method.emit_to)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>( &self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S ) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#266-270\n\"goto source code\") Emits an event to a window with the specified label. #### fn\n[listen_global](/docs/api/rust/tauri/trait.Manager#method.listen_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#273-278 \"goto source\ncode\") Listen to a global event. #### fn\n[once_global](/docs/api/rust/tauri/trait.Manager#method.once_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#281-286 \"goto source\ncode\") Listen to a global event only once. #### fn\n[trigger_global](/docs/api/rust/tauri/trait.Manager#method.trigger_global)(&self,\nevent: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), data:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#289-291\n\"goto source code\") Trigger a global event. #### fn\n[unlisten](/docs/api/rust/tauri/trait.Manager#method.unlisten)(&self,\nhandler_id:\nEventHandler)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#294-296 \"goto\nsource code\") Remove an event listener. #### fn\n[get_window](/docs/api/rust/tauri/trait.Manager#method.get_window)(&self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Window](/docs/api/rust/tauri/window/struct.Window\n\"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#299-301\n\"goto source code\") Fetch a single window from the manager. #### fn\n[windows](/docs/api/rust/tauri/trait.Manager#method.windows)(&self) ->\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\n[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#304-306\n\"goto source code\") Fetch all managed windows. #### fn\n[manage](/docs/api/rust/tauri/trait.Manager#method.manage)<T>(&self, state: T)\nwhere T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#310-315 \"goto source\ncode\") Add `state` to the state managed by the application. See\n[`crate::Builder`](/docs/api/rust/tauri/struct.Builder#manage \"crate::Builder\")\nfor instructions. [Read more](/docs/api/rust/tauri/trait.Manager#method.manage)\n#### fn [state](/docs/api/rust/tauri/trait.Manager#method.state)<T>(&self) ->\n[State](/docs/api/rust/tauri/struct.State \"struct tauri::State\")<'\\_, T> where\nT: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#318-323 \"goto source\ncode\") Gets the managed state for the type `T`. Panics if the type is not\nmanaged. #### fn\n[try_state](/docs/api/rust/tauri/trait.Manager#method.try_state)<T>(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_, T>> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#326-331 \"goto source\ncode\") Tries to get the managed state for the type `T`. Returns `None` if the\ntype is not managed. ## Auto Trait Implementations ### impl<R =\n[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [App](/docs/api/rust/tauri/struct.App\n\"struct tauri::App\")<R> ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R> where R:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R> where R:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R> where R:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [App](/docs/api/rust/tauri/struct.App\n\"struct tauri::App\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.App"},{"id":"prose_docs_api_rust_tauri_struct_AppHandle_md","title":"Struct tauri::AppHandle","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::AppHandle, ```rs pub struct AppHandle { /* fields omitted */ }\n``` Expand description A handle to the currently running application. This type\nimplements [`Manager`](/docs/api/rust/tauri/trait.Manager \"Manager\") which\nallows for manipulation of global application items. ## Implementations ### impl\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#183-205 \"goto\nsource code\") #### pub fn\n[create_tao_window](/docs/api/rust/tauri/about:blank#method.create_tao_window)<F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")() ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\nWryWindowBuilder[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static>( &self, f: F ) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html\n\"struct\nalloc::sync::Arc\")<Window>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#185-192\n\"goto source code\") Create a new tao window using a callback. The event loop\nmust be running at this point. #### pub fn\n[send_tao_window_event](/docs/api/rust/tauri/about:blank#method.send_tao_window_event)(\n&self, window_id: WindowId, message: WindowMessage ) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#195-204\n\"goto source code\") Sends a window message to the event loop. ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#227-276\n\"goto source code\") #### pub fn\n[plugin](/docs/api/rust/tauri/about:blank#method.plugin)<P:\n[Plugin](/docs/api/rust/tauri/plugin/trait.Plugin \"trait\ntauri::plugin::Plugin\")<R> + 'static>(&self, plugin: P) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#236-257\n\"goto source code\") Adds a plugin to the runtime. #### pub fn\n[exit](/docs/api/rust/tauri/about:blank#method.exit)(&self, exit_code:\n[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html))[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#260-263\n\"goto source code\") Exits the app ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396\n\"goto source code\") #### pub fn\n[create_window](/docs/api/rust/tauri/about:blank#method.create_window)<F>(\n&self, label: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, url:\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\"), setup:\nF ) -> [Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>\nwhere F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html),[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396\n\"goto source code\") Creates a new webview window. #### pub fn\n[path_resolver](/docs/api/rust/tauri/about:blank#method.path_resolver)(&self) ->\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396\n\"goto source code\") The path resolver for the application. #### pub fn\n[global_shortcut_manager](/docs/api/rust/tauri/about:blank#method.global_shortcut_manager)(&self)\n->\nR::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type\ntauri::Runtime::GlobalShortcutManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396\n\"goto source code\") Gets a copy of the global shortcut manager instance. ####\npub fn\n[clipboard_manager](/docs/api/rust/tauri/about:blank#method.clipboard_manager)(&self)\n->\nR::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type\ntauri::Runtime::ClipboardManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396\n\"goto source code\") Gets a copy of the clipboard manager instance. #### pub fn\n[config](/docs/api/rust/tauri/about:blank#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396 \"goto\nsource code\") Gets the app’s configuration, defined on the `tauri.conf.json`\nfile. #### pub fn\n[package_info](/docs/api/rust/tauri/about:blank#method.package_info)(&self) ->\n&[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#396 \"goto\nsource code\") Gets the app’s package information. ## Trait Implementations ###\nimpl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [AppHandle](/docs/api/rust/tauri/struct.AppHandle\n\"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#207-218\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> Self[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#208-217 \"goto source\ncode\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<'de, R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#220-225\n\"goto source code\") #### fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/command/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#222-224\n\"goto source code\") Grabs the\n[`Window`](/docs/api/rust/tauri/window/struct.Window \"Window\") from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\")\nand returns the associated [`AppHandle`](/docs/api/rust/tauri/struct.AppHandle\n\"AppHandle\"). This will never fail. ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct\ntauri::AppHandle\")<R> where\nR::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle \"type\ntauri::Runtime::Handle\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),\nR::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),\nR::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#172 \"goto\nsource code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#172 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")> [Manager](/docs/api/rust/tauri/trait.Manager \"trait\ntauri::Manager\")<R> for [AppHandle](/docs/api/rust/tauri/struct.AppHandle\n\"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#278\n\"goto source code\") #### fn\n[config](/docs/api/rust/tauri/trait.Manager#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#256-258 \"goto\nsource code\") The [`Config`](/docs/api/rust/tauri/struct.Config \"Config\") the\nmanager was created with. #### fn\n[emit_all](/docs/api/rust/tauri/trait.Manager#method.emit_all)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#261-263\n\"goto source code\") Emits a event to all windows. #### fn\n[emit_to](/docs/api/rust/tauri/trait.Manager#method.emit_to)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>( &self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S ) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#266-270\n\"goto source code\") Emits an event to a window with the specified label. #### fn\n[listen_global](/docs/api/rust/tauri/trait.Manager#method.listen_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#273-278 \"goto source\ncode\") Listen to a global event. #### fn\n[once_global](/docs/api/rust/tauri/trait.Manager#method.once_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#281-286 \"goto source\ncode\") Listen to a global event only once. #### fn\n[trigger_global](/docs/api/rust/tauri/trait.Manager#method.trigger_global)(&self,\nevent: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), data:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#289-291\n\"goto source code\") Trigger a global event. #### fn\n[unlisten](/docs/api/rust/tauri/trait.Manager#method.unlisten)(&self,\nhandler_id:\nEventHandler)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#294-296 \"goto\nsource code\") Remove an event listener. #### fn\n[get_window](/docs/api/rust/tauri/trait.Manager#method.get_window)(&self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Window](/docs/api/rust/tauri/window/struct.Window\n\"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#299-301\n\"goto source code\") Fetch a single window from the manager. #### fn\n[windows](/docs/api/rust/tauri/trait.Manager#method.windows)(&self) ->\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\n[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#304-306\n\"goto source code\") Fetch all managed windows. #### fn\n[manage](/docs/api/rust/tauri/trait.Manager#method.manage)<T>(&self, state: T)\nwhere T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#310-315 \"goto source\ncode\") Add `state` to the state managed by the application. See\n[`crate::Builder`](/docs/api/rust/tauri/struct.Builder#manage \"crate::Builder\")\nfor instructions. [Read more](/docs/api/rust/tauri/trait.Manager#method.manage)\n#### fn [state](/docs/api/rust/tauri/trait.Manager#method.state)<T>(&self) ->\n[State](/docs/api/rust/tauri/struct.State \"struct tauri::State\")<'\\_, T> where\nT: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#318-323 \"goto source\ncode\") Gets the managed state for the type `T`. Panics if the type is not\nmanaged. #### fn\n[try_state](/docs/api/rust/tauri/trait.Manager#method.try_state)<T>(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_, T>> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#326-331 \"goto source\ncode\") Tries to get the managed state for the type `T`. Returns `None` if the\ntype is not managed. ## Auto Trait Implementations ### impl<R =\n[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct tauri::AppHandle\")<R>\n### impl<R> [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct tauri::AppHandle\")<R>\n### impl<R> [Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html\n\"trait core::marker::Sync\") for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct tauri::AppHandle\")<R>\nwhere <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [AppHandle](/docs/api/rust/tauri/struct.AppHandle\n\"struct tauri::AppHandle\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct tauri::AppHandle\")<R>\n## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.AppHandle"},{"id":"prose_docs_api_rust_tauri_struct_Builder_md","title":"Struct tauri::Builder","sections":["Implementations","Panics","Mutability","Example","Arguments","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Builder, ```rs pub struct Builder { /* fields omitted */ } ```\nExpand description Builds a Tauri application. ## Implementations ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[Builder](/docs/api/rust/tauri/struct.Builder \"struct\ntauri::Builder\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#589-1043\n\"goto source code\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)() ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#591-608 \"goto source\ncode\") Creates a new App builder. #### pub fn\n[invoke_handler](/docs/api/rust/tauri/about:blank#method.invoke_handler)<F>(self,\ninvoke_handler: F) -> Self where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")([Invoke](/docs/api/rust/tauri/struct.Invoke \"struct\ntauri::Invoke\")<R>) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#611-617 \"goto source\ncode\") Defines the JS message handler callback. #### pub fn\n[setup](/docs/api/rust/tauri/about:blank#method.setup)<F>(self, setup: F) ->\nSelf where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(&mut [App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html \"struct\nalloc::boxed::Box\")<dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\")>> +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#620-626 \"goto source\ncode\") Defines the setup hook. #### pub fn\n[on_page_load](/docs/api/rust/tauri/about:blank#method.on_page_load)<F>(self,\non_page_load: F) -> Self where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")([Window](/docs/api/rust/tauri/window/struct.Window\n\"struct tauri::window::Window\")<R>,\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#629-635 \"goto source\ncode\") Defines the page load hook. #### pub fn\n[plugin](/docs/api/rust/tauri/about:blank#method.plugin)<P:\n[Plugin](/docs/api/rust/tauri/plugin/trait.Plugin \"trait\ntauri::plugin::Plugin\")<R> + 'static>(self, plugin: P) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#638-641 \"goto source\ncode\") Adds a plugin to the runtime. #### pub fn\n[manage](/docs/api/rust/tauri/about:blank#method.manage)<T>(self, state: T) ->\nSelf where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#718-728 \"goto source\ncode\") Add `state` to the state managed by the application. This method can be\ncalled any number of times as long as each call refers to a different `T`.\nManaged state can be retrieved by any request handler via the\n[`State`](/docs/api/rust/tauri/struct.State) request guard. In particular, if a\nvalue of type `T` is managed by Tauri, adding `State` to the list of arguments\nin a request handler instructs Tauri to retrieve the managed value. ## Panics\nPanics if state of type `T` is already being managed. ## Mutability Since the\nmanaged state is global and must be\n[`Send`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"Send\") +\n[`Sync`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"Sync\"),\nmutations can only happen through interior mutability: ⓘ ```rs use\nstd::{collections::HashMap, sync::Mutex}; use tauri::State; // here we use Mutex\nto achieve interior mutability struct Storage(Mutex>); struct Connection; struct\nDbConnection(Mutex>); #[tauri::command] fn connect(connection: State) { //\ninitialize the connection, mutating the state with interior mutability\n*connection.0.lock().unwrap() = Some(Connection {}); } #[tauri::command] fn\nstorage_insert(key: u64, value: String, storage: State) { // mutate the storage\nbehind the Mutex storage.0.lock().unwrap().insert(key, value); } fn main() {\nBuilder::default() .manage(Storage(Default::default()))\n.manage(DbConnection(Default::default()))\n.invoke_handler(tauri::generate_handler![connect, storage_insert])\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ## Example ⓘ ```rs use tauri::State; struct MyInt(isize);\nstruct MyString(String); #[tauri::command] fn int_command(state: State) ->\nString { format!(\"The stateful int is: {}\", state.0) } #[tauri::command] fn\nstring_command<'r>(state: State<'r, MyString>) { println!(\"state: {}\",\nstate.inner().0); } fn main() { tauri::Builder::default() .manage(MyInt(10))\n.manage(MyString(\"Hello, managed state!\".to_string()))\n.invoke_handler(tauri::generate_handler![int_command, string_command])\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` #### pub fn\n[create_window](/docs/api/rust/tauri/about:blank#method.create_window)<F>( self,\nlabel: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, url:\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\"), setup:\nF ) -> Self where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)<R::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html),[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#731-751\n\"goto source code\") Creates a new webview window. #### pub fn\n[menu](/docs/api/rust/tauri/about:blank#method.menu)(self, menu:\n[Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#762-765 \"goto source\ncode\") Sets the menu to use on all windows. #### pub fn\n[on_menu_event](/docs/api/rust/tauri/about:blank#method.on_menu_event)<F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")([WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent\n\"struct tauri::WindowMenuEvent\")<R>) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>( self, handler: F ) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#768-774 \"goto source\ncode\") Registers a menu event handler for all windows. #### pub fn\n[on_window_event](/docs/api/rust/tauri/about:blank#method.on_window_event)<F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")([GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent\n\"struct tauri::GlobalWindowEvent\")<R>) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>( self, handler: F ) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#777-783 \"goto source\ncode\") Registers a window event handler for all windows. #### pub fn\n[register_uri_scheme_protocol](/docs/api/rust/tauri/about:blank#method.register_uri_scheme_protocol)<N:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, H:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(&[AppHandle](/docs/api/rust/tauri/struct.AppHandle\n\"struct tauri::AppHandle\")<R>, &[HttpRequest](http/struct.Request.html \"struct\ntauri::http::Request\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HttpResponse](http/struct.Response.html \"struct\ntauri::http::Response\"),\n[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html \"struct\nalloc::boxed::Box\")<dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>> +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>( self, uri_scheme: N, protocol: H ) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#807-825 \"goto source\ncode\") Registers a URI scheme protocol available to all webviews. Leverages\n[setURLSchemeHandler](https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/2875766-seturlschemehandler)\non macOS,\n[AddWebResourceRequestedFilter](https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.addwebresourcerequestedfilter?view=webview2-dotnet-1.0.774.44)\non Windows and\n[webkit-web-context-register-uri-scheme](https://webkitgtk.org/reference/webkit2gtk/stable/WebKitWebContext.html#webkit-web-context-register-uri-scheme)\non Linux. ## Arguments - `uri_scheme` The URI scheme to register, such as\n`example`. - `protocol` the protocol associated with the given URI scheme. It’s\na function that takes an URL such as `example://localhost/asset.css`. #### pub\nfn [build](/docs/api/rust/tauri/about:blank#method.build)<A:\n[Assets](/docs/api/rust/tauri/trait.Assets \"trait tauri::Assets\")>(self,\ncontext: [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A>) -> [Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[App](/docs/api/rust/tauri/struct.App \"struct\ntauri::App\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#829-1036\n\"goto source code\") Builds the application. #### pub fn\n[run](/docs/api/rust/tauri/about:blank#method.run)<A:\n[Assets](/docs/api/rust/tauri/trait.Assets \"trait tauri::Assets\")>(self,\ncontext: [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A>) -> [Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#1039-1042\n\"goto source code\") Runs the configured Tauri application. ## Trait\nImplementations ### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Builder](/docs/api/rust/tauri/struct.Builder \"struct\ntauri::Builder\")<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#1054-1058 \"goto\nsource code\") Make `Wry` the default `Runtime` for `Builder` #### fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> Self[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#1055-1057 \"goto source\ncode\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl<R>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Builder](/docs/api/rust/tauri/struct.Builder \"struct tauri::Builder\")<R> ###\nimpl<R> [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Builder](/docs/api/rust/tauri/struct.Builder\n\"struct tauri::Builder\")<R> where <<R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<R>\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Builder](/docs/api/rust/tauri/struct.Builder \"struct\ntauri::Builder\")<R> ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Builder](/docs/api/rust/tauri/struct.Builder \"struct\ntauri::Builder\")<R> where <<R as [Runtime](/docs/api/rust/tauri/trait.Runtime\n\"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Builder](/docs/api/rust/tauri/struct.Builder \"struct tauri::Builder\")<R> ##\nBlanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Builder"},{"id":"prose_docs_api_rust_tauri_struct_CloseRequestApi_md","title":"Struct tauri::CloseRequestApi","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::CloseRequestApi, ```rs pub struct CloseRequestApi(_); ``` Expand\ndescription Api exposed on the `CloseRequested` event. ## Implementations ###\nimpl [CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#67-72\n\"goto source code\") #### pub fn\n[prevent_close](/docs/api/rust/tauri/about:blank#method.prevent_close)(&self)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#69-71\n\"goto source code\") Prevents the window from being closed. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#64\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#64 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[CloseRequestApi](/docs/api/rust/tauri/struct.CloseRequestApi \"struct\ntauri::CloseRequestApi\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.CloseRequestApi"},{"id":"prose_docs_api_rust_tauri_struct_Config_md","title":"Struct tauri::Config","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Config, ```rs pub struct Config { pub package: PackageConfig,\npub tauri: TauriConfig, pub build: BuildConfig, pub plugins: PluginConfig, } ```\nExpand description The config type mapped to `tauri.conf.json`. ## Fields\n`package: PackageConfig` Package settings. `tauri: TauriConfig` The Tauri\nconfiguration. `build: BuildConfig` The build configuration. `plugins:\nPluginConfig` The plugins config. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [Config](/docs/api/rust/tauri/struct.Config\n\"struct tauri::Config\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\") Returns\nthe “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\") #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\"), <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Config](/docs/api/rust/tauri/struct.Config\n\"struct tauri::Config\")> for [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl\n[ToTokens](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html\n\"trait quote::to_tokens::ToTokens\") for\n[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\") #### pub fn\n[to_tokens](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens)(&self,\ntokens: &mut\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct proc_macro2::TokenStream\")) Write `self` to the given `TokenStream`.\n[Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens)\n#### fn\n[to_token_stream](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.to_token_stream)(&self)\n->\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct\nproc_macro2::TokenStream\")[\\[src\\]](https://docs.rs/quote/1.0.9/src/quote/to_tokens.rs.html#61\n\"goto source code\") Convert `self` directly into a `TokenStream` object. [Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.to_token_stream)\n#### fn\n[into_token_stream](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.into_token_stream)(self)\n->\n[TokenStream](https://docs.rs/proc-macro2/1.0.28/proc_macro2/struct.TokenStream.html\n\"struct\nproc_macro2::TokenStream\")[\\[src\\]](https://docs.rs/quote/1.0.9/src/quote/to_tokens.rs.html#71-73\n\"goto source code\") Convert `self` directly into a `TokenStream` object. [Read\nmore](https://docs.rs/quote/1.0.9/quote/to_tokens/trait.ToTokens.html#method.into_token_stream)\n### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\") ## Auto\nTrait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Config](/docs/api/rust/tauri/struct.Config\n\"struct tauri::Config\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.Config"},{"id":"prose_docs_api_rust_tauri_struct_Context_md","title":"Struct tauri::Context","sections":["Stability","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Context, ```rs pub struct Context { /* fields omitted */ } ```\nExpand description User supplied data required inside of a Tauri application. ##\nStability This is the output of the `tauri::generate_context!` macro, and is not\nconsidered part of the stable API. Unless you know what you are doing and are\nprepared for this type to have breaking changes, do not create it yourself. ##\nImplementations ### impl<A: [Assets](/docs/api/rust/tauri/trait.Assets \"trait\ntauri::Assets\")> [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#170-250\n\"goto source code\") #### pub fn\n[config](/docs/api/rust/tauri/about:blank#method.config)(&self) ->\n&[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#173-175 \"goto\nsource code\") The config the application was prepared with. #### pub fn\n[config_mut](/docs/api/rust/tauri/about:blank#method.config_mut)(&mut self) ->\n&mut [Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#179-181 \"goto\nsource code\") A mutable reference to the config the application was prepared\nwith. #### pub fn\n[assets](/docs/api/rust/tauri/about:blank#method.assets)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<A>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#185-187\n\"goto source code\") The assets to be served directly by Tauri. #### pub fn\n[assets_mut](/docs/api/rust/tauri/about:blank#method.assets_mut)(&mut self) ->\n&mut [Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<A>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#191-193\n\"goto source code\") A mutable reference to the assets to be served directly by\nTauri. #### pub fn\n[default_window_icon](/docs/api/rust/tauri/about:blank#method.default_window_icon)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#197-199\n\"goto source code\") The default window icon Tauri should use when creating\nwindows. #### pub fn\n[default_window_icon_mut](/docs/api/rust/tauri/about:blank#method.default_window_icon_mut)(&mut\nself) -> &mut\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#203-205\n\"goto source code\") A mutable reference to the default window icon Tauri should\nuse when creating windows. #### pub fn\n[system_tray_icon](/docs/api/rust/tauri/about:blank#method.system_tray_icon)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#209-211 \"goto\nsource code\") The icon to use on the system tray UI. #### pub fn\n[system_tray_icon_mut](/docs/api/rust/tauri/about:blank#method.system_tray_icon_mut)(&mut\nself) -> &mut\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#215-217 \"goto\nsource code\") A mutable reference to the icon to use on the system tray UI. ####\npub fn\n[package_info](/docs/api/rust/tauri/about:blank#method.package_info)(&self) ->\n&[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#221-223\n\"goto source code\") Package information. #### pub fn\n[package_info_mut](/docs/api/rust/tauri/about:blank#method.package_info_mut)(&mut\nself) -> &mut [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#227-229\n\"goto source code\") A mutable reference to the package information. #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)( config:\n[Config](/docs/api/rust/tauri/struct.Config \"struct tauri::Config\"), assets:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<A>, default_window_icon:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)>>,\nsystem_tray_icon:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Icon](/docs/api/rust/tauri/enum.Icon \"enum\ntauri::Icon\")>, package_info:\n[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\"), info_plist:\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html) ) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#233-249 \"goto source\ncode\") Create a new [`Context`](/docs/api/rust/tauri/struct.Context \"Context\")\nfrom the minimal required items. ## Trait Implementations ### impl<A:\n[Assets](/docs/api/rust/tauri/trait.Assets \"trait tauri::Assets\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#159-168\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#160-167\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<A>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Context](/docs/api/rust/tauri/struct.Context \"struct tauri::Context\")<A> where\nA:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<A>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A> ### impl<A>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A> ### impl<A>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Context](/docs/api/rust/tauri/struct.Context \"struct\ntauri::Context\")<A> ### impl<A>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Context](/docs/api/rust/tauri/struct.Context \"struct tauri::Context\")<A> where\nA:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Context"},{"id":"prose_docs_api_rust_tauri_struct_CustomMenuItem_md","title":"Struct tauri::CustomMenuItem","sections":["Fields ","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::CustomMenuItem, ```rs #[non_exhaustive] pub struct\nCustomMenuItem { pub id: u16, pub id_str: String, pub title: String, pub\nkeyboard_accelerator: Option, pub enabled: bool, pub selected: bool, } ```\nExpand description A custom menu item. ## Fields (Non-exhaustive) This struct is\nmarked as non-exhaustive Non-exhaustive structs could have additional fields\nadded in future. Therefore, non-exhaustive structs cannot be constructed in\nexternal crates using the traditional `Struct { .. }` syntax; cannot be matched\nagainst without a wildcard `..`; and struct update syntax will not work. `id:\nu16``id_str: String``title: String``keyboard_accelerator: Option``enabled:\nbool``selected: bool` ## Implementations ### impl\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)<I, T>(id: I, title: T) ->\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") where T:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, I:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Create new custom menu item. #### pub fn\n[accelerator](/docs/api/rust/tauri/about:blank#method.accelerator)<T>(self,\naccelerator: T) -> [CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem\n\"struct tauri::CustomMenuItem\") where T:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Assign a keyboard shortcut to the menu action.\n#### pub fn [disabled](/docs/api/rust/tauri/about:blank#method.disabled)(self)\n-> [CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") Mark the item as disabled. #### pub fn\n[selected](/docs/api/rust/tauri/about:blank#method.selected)(self) ->\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") Mark the item as selected. ## Trait Implementations ###\nimpl [Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.CustomMenuItem"},{"id":"prose_docs_api_rust_tauri_struct_GlobalWindowEvent_md","title":"Struct tauri::GlobalWindowEvent","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::GlobalWindowEvent, ```rs pub struct GlobalWindowEvent { /*\nfields omitted */ } ``` Expand description A window event that was triggered on\nthe specified window. ## Implementations ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#137-147\n\"goto source code\") #### pub fn\n[event](/docs/api/rust/tauri/about:blank#method.event)(&self) ->\n&[WindowEvent](/docs/api/rust/tauri/enum.WindowEvent \"enum\ntauri::WindowEvent\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#139-141\n\"goto source code\") The event payload. #### pub fn\n[window](/docs/api/rust/tauri/about:blank#method.window)(&self) ->\n&[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#144-146\n\"goto source code\") The window that the menu belongs to. ## Trait\nImplementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#131\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#131 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R> ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[GlobalWindowEvent](/docs/api/rust/tauri/struct.GlobalWindowEvent \"struct\ntauri::GlobalWindowEvent\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.GlobalWindowEvent"},{"id":"prose_docs_api_rust_tauri_struct_Invoke_md","title":"Struct tauri::Invoke","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Invoke, ```rs pub struct Invoke { pub message: InvokeMessage,\npub resolver: InvokeResolver, } ``` Expand description The message and resolver\ngiven to a custom command. ## Fields `message: InvokeMessage` The message\npassed. `resolver: InvokeResolver` The resolver of the message. ## Trait\nImplementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Invoke](/docs/api/rust/tauri/struct.Invoke \"struct\ntauri::Invoke\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#42 \"goto\nsource code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#42 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Invoke](/docs/api/rust/tauri/struct.Invoke \"struct tauri::Invoke\")<R> ###\nimpl<R> [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Invoke](/docs/api/rust/tauri/struct.Invoke\n\"struct tauri::Invoke\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Invoke](/docs/api/rust/tauri/struct.Invoke \"struct\ntauri::Invoke\")<R> where <R as [Runtime](/docs/api/rust/tauri/trait.Runtime\n\"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Invoke](/docs/api/rust/tauri/struct.Invoke \"struct\ntauri::Invoke\")<R> where <R as [Runtime](/docs/api/rust/tauri/trait.Runtime\n\"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Invoke](/docs/api/rust/tauri/struct.Invoke\n\"struct tauri::Invoke\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Invoke"},{"id":"prose_docs_api_rust_tauri_struct_InvokeError_md","title":"Struct tauri::InvokeError","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::InvokeError, ```rs pub struct InvokeError(_); ``` Expand\ndescription Error response from an\n[`InvokeMessage`](/docs/api/rust/tauri/struct.InvokeMessage \"InvokeMessage\"). ##\nImplementations ### impl [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#55-61\n\"goto source code\") #### pub fn\n[from_serde_json](/docs/api/rust/tauri/about:blank#method.from_serde_json)(error:\n[Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#58-60 \"goto source\ncode\") Create an [`InvokeError`](/docs/api/rust/tauri/struct.InvokeError\n\"InvokeError\") as a string of the\n[`serde_json::Error`](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"serde_json::Error\") message. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#52\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#52 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::Error\")> for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#72-77\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(error:\n[Error](/docs/api/rust/tauri/enum.Error \"enum tauri::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#74-76 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\")> for\n[InvokeResponse](/docs/api/rust/tauri/enum.InvokeResponse \"enum\ntauri::InvokeResponse\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#112-116\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(error:\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#113-115 \"goto source\ncode\") Performs the conversion. ### impl<T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T> for\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#63-70\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(value:\nT) -> Self[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#65-69 \"goto\nsource code\") Performs the conversion. ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.InvokeError"},{"id":"prose_docs_api_rust_tauri_struct_InvokeMessage_md","title":"Struct tauri::InvokeMessage","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::InvokeMessage, ```rs pub struct InvokeMessage { /* fields\nomitted */ } ``` Expand description An invoke message. ## Implementations ###\nimpl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#252-303\n\"goto source code\") #### pub fn\n[command](/docs/api/rust/tauri/about:blank#method.command)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#270-272\n\"goto source code\") The invoke command. #### pub fn\n[window](/docs/api/rust/tauri/about:blank#method.window)(&self) ->\n[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#276-278\n\"goto source code\") The window that received the invoke. #### pub fn\n[window_ref](/docs/api/rust/tauri/about:blank#method.window_ref)(&self) ->\n&[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#282-284\n\"goto source code\") A reference to window that received the invoke. #### pub fn\n[payload](/docs/api/rust/tauri/about:blank#method.payload)(&self) ->\n&[JsonValue](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html\n\"enum\nserde_json::value::Value\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#288-290\n\"goto source code\") A reference to the payload the invoke received. #### pub fn\n[state](/docs/api/rust/tauri/about:blank#method.state)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[StateManager](/docs/api/rust/tauri/struct.StateManager\n\"struct\ntauri::StateManager\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#294-296\n\"goto source code\") The state manager associated with the application #### pub\nfn [state_ref](/docs/api/rust/tauri/about:blank#method.state_ref)(&self) ->\n&[StateManager](/docs/api/rust/tauri/struct.StateManager \"struct\ntauri::StateManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#300-302\n\"goto source code\") A reference to the state manager associated with\napplication. ## Trait Implementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage\n\"struct\ntauri::InvokeMessage\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#240\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#240\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R> ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvokeMessage](/docs/api/rust/tauri/struct.InvokeMessage \"struct\ntauri::InvokeMessage\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.InvokeMessage"},{"id":"prose_docs_api_rust_tauri_struct_InvokeResolver_md","title":"Struct tauri::InvokeResolver","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::InvokeResolver, ```rs pub struct InvokeResolver { /* fields\nomitted */ } ``` Expand description Resolver of a invoke message. ##\nImplementations ### impl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")> [InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver\n\"struct\ntauri::InvokeResolver\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#127-236\n\"goto source code\") #### pub fn\n[respond_async](/docs/api/rust/tauri/about:blank#method.respond_async)<T,\nF>(self, task: F) where T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\")>> +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#137-145 \"goto\nsource code\") Reply to the invoke promise with an async task. #### pub fn\n[respond_async_serialized](/docs/api/rust/tauri/about:blank#method.respond_async_serialized)<F>(self,\ntask: F) where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[JsonValue](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html\n\"enum serde_json::value::Value\"),\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")>> +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#148-155 \"goto\nsource code\") Reply to the invoke promise with an async task which is already\nserialized. #### pub fn\n[respond](/docs/api/rust/tauri/about:blank#method.respond)<T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>(self, value:\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#158-160\n\"goto source code\") Reply to the invoke promise with a serializable value. ####\npub fn\n[respond_closure](/docs/api/rust/tauri/about:blank#method.respond_closure)<T,\nF>(self, f: F) where T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")() ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#163-169\n\"goto source code\") Reply to the invoke promise running the given closure. ####\npub fn [resolve](/docs/api/rust/tauri/about:blank#method.resolve)<T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>(self, value:\nT)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#172-174 \"goto source\ncode\") Resolve the invoke promise with a value. #### pub fn\n[reject](/docs/api/rust/tauri/about:blank#method.reject)<T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>(self, value:\nT)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#177-184 \"goto source\ncode\") Reject the invoke promise with a value. #### pub fn\n[invoke_error](/docs/api/rust/tauri/about:blank#method.invoke_error)(self,\nerror: [InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\"))[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#187-189\n\"goto source code\") Reject the invoke promise with an\n[`InvokeError`](/docs/api/rust/tauri/struct.InvokeError \"InvokeError\"). #### pub\nasync fn [return_task](/docs/api/rust/tauri/about:blank#method.return_task)<T,\nF>( window: [Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>, task: F, success_callback:\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"), error_callback:\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") ) where T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct tauri::InvokeError\")>> +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#196-207 \"goto\nsource code\") Asynchronously executes the given task and evaluates its Result to\nthe JS promise described by the `success_callback` and `error_callback` function\nnames. If the Result `is_ok()`, the callback will be the `success_callback`\nfunction name and the argument will be the Ok value. If the Result `is_err()`,\nthe callback will be the `error_callback` function name and the argument will be\nthe Err value. ## Trait Implementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#120\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#120\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R> ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvokeResolver](/docs/api/rust/tauri/struct.InvokeResolver \"struct\ntauri::InvokeResolver\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.InvokeResolver"},{"id":"prose_docs_api_rust_tauri_struct_LogicalPosition_md","title":"Struct tauri::LogicalPosition","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::LogicalPosition, ```rs pub struct LogicalPosition\n\n{ pub x: P, pub y: P, } ``` Expand description A position represented in logical\npixels. ## Fields `x: P` Vertical axis value. `y: P` Horizontal axis value. ##\nImplementations ### impl<T>\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<T> where T: [Pixel](/docs/api/rust/tauri/trait.Pixel\n\"trait tauri::Pixel\"), #### pub fn\n[cast](/docs/api/rust/tauri/about:blank#method.cast)<X>(&self) ->\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<X> where X: [Pixel](/docs/api/rust/tauri/trait.Pixel\n\"trait tauri::Pixel\"), Casts the logical size to another pixel type. ## Trait\nImplementations ### impl<P>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<P> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<P>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de, P>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>, #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition\n\"struct tauri::LogicalPosition\")<P>, <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl<P> [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\"), #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"), Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<P>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition\n\"struct tauri::LogicalPosition\")<P>> for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<P>, #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl<P>\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl<P> [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"), ### impl<P>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\"), ### impl<P>\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> ### impl<P>\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> ## Auto Trait Implementations ### impl<P>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<P>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<P>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<P>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<P>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<P> where P:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.LogicalPosition"},{"id":"prose_docs_api_rust_tauri_struct_LogicalSize_md","title":"Struct tauri::LogicalSize","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::LogicalSize, ```rs pub struct LogicalSize { pub width: T, pub\nheight: T, } ``` Expand description A size represented in logical pixels. ##\nFields `width: T` Width. `height: T` Height. ## Implementations ### impl<T>\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T: [Pixel](/docs/api/rust/tauri/trait.Pixel \"trait\ntauri::Pixel\"), #### pub fn\n[cast](/docs/api/rust/tauri/about:blank#method.cast)<X>(&self) ->\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<X> where X: [Pixel](/docs/api/rust/tauri/trait.Pixel \"trait\ntauri::Pixel\"), Casts the logical size to another pixel type. ## Trait\nImplementations ### impl<T>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T> where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de, T>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>, #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T>, <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl<T> [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\"), #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"), Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<T>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T>> for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<T>, #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl<T>\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl<T> [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"), ### impl<T>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T> where T:\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\"), ### impl<T>\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> ### impl<T>\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> ## Auto Trait Implementations ### impl<T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [LogicalSize](/docs/api/rust/tauri/struct.LogicalSize\n\"struct tauri::LogicalSize\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<T> where T:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.LogicalSize"},{"id":"prose_docs_api_rust_tauri_struct_Menu_md","title":"Struct tauri::Menu","sections":["Fields ","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Menu, ```rs #[non_exhaustive] pub struct Menu { pub items: Vec,\n} ``` Expand description A window menu. ## Fields (Non-exhaustive) This struct\nis marked as non-exhaustive Non-exhaustive structs could have additional fields\nadded in future. Therefore, non-exhaustive structs cannot be constructed in\nexternal crates using the traditional `Struct { .. }` syntax; cannot be matched\nagainst without a wildcard `..`; and struct update syntax will not work. `items:\nVec` ## Implementations ### impl [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") #### pub fn [new](/docs/api/rust/tauri/about:blank#method.new)()\n-> [Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\") Creates a new\nwindow menu. #### pub fn\n[add_item](/docs/api/rust/tauri/about:blank#method.add_item)(self, item:\n[CustomMenuItem](/docs/api/rust/tauri/struct.CustomMenuItem \"struct\ntauri::CustomMenuItem\")) -> [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") Adds the custom menu item to the menu. #### pub fn\n[add_native_item](/docs/api/rust/tauri/about:blank#method.add_native_item)(self,\nitem: [MenuItem](/docs/api/rust/tauri/enum.MenuItem \"enum tauri::MenuItem\")) ->\n[Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\") Adds a native item\nto the menu. #### pub fn\n[add_submenu](/docs/api/rust/tauri/about:blank#method.add_submenu)(self,\nsubmenu: [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\"))\n-> [Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\") Adds an entry\nwith submenu. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\") Returns a copy\nof the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [Menu](/docs/api/rust/tauri/struct.Menu\n\"struct tauri::Menu\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\") Returns the\n“default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Menu](/docs/api/rust/tauri/struct.Menu\n\"struct tauri::Menu\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Menu](/docs/api/rust/tauri/struct.Menu \"struct\ntauri::Menu\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Menu](/docs/api/rust/tauri/struct.Menu\n\"struct tauri::Menu\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Menu"},{"id":"prose_docs_api_rust_tauri_struct_MenuEvent_md","title":"Struct tauri::MenuEvent","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::MenuEvent, ```rs pub struct MenuEvent { /* fields omitted */ }\n``` Expand description The window menu event. ## Implementations ### impl\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#20-25\n\"goto source code\") #### pub fn\n[menu_item_id](/docs/api/rust/tauri/about:blank#method.menu_item_id)(&self) ->\nMenuIdRef<'\\_>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#22-24\n\"goto source code\") The menu item id. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#15\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#15\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#15\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window/menu.rs#15\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[MenuEvent](/docs/api/rust/tauri/window/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.MenuEvent"},{"id":"prose_docs_api_rust_tauri_struct_PackageInfo_md","title":"Struct tauri::PackageInfo","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::PackageInfo, ```rs pub struct PackageInfo { pub name: String,\npub version: String, } ``` Expand description `tauri::App` package information.\n## Fields `name: String` App name `version: String` App version ##\nImplementations ### impl [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo\n\"struct tauri::PackageInfo\") #### pub fn\n[package_name](/docs/api/rust/tauri/about:blank#method.package_name)(&self) ->\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") Returns the application package name. On macOS\nand Windows it’s the `name` field, and on Linux it’s the `name` in `kebab-case`.\n## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo\n\"struct tauri::PackageInfo\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo\n\"struct tauri::PackageInfo\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo\n\"struct tauri::PackageInfo\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [PackageInfo](/docs/api/rust/tauri/struct.PackageInfo\n\"struct tauri::PackageInfo\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[PackageInfo](/docs/api/rust/tauri/struct.PackageInfo \"struct\ntauri::PackageInfo\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.PackageInfo"},{"id":"prose_docs_api_rust_tauri_struct_PageLoadPayload_md","title":"Struct tauri::PageLoadPayload","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::PageLoadPayload, ```rs pub struct PageLoadPayload { /* fields\nomitted */ } ``` Expand description The payload for the\n[`OnPageLoad`](/docs/api/rust/tauri/type.OnPageLoad \"OnPageLoad\") hook. ##\nImplementations ### impl\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#33-38\n\"goto source code\") #### pub fn\n[url](/docs/api/rust/tauri/about:blank#method.url)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#35-37\n\"goto source code\") The page URL. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/hooks.rs#28\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[PageLoadPayload](/docs/api/rust/tauri/struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.PageLoadPayload"},{"id":"prose_docs_api_rust_tauri_struct_PathResolver_md","title":"Struct tauri::PathResolver","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::PathResolver, ```rs pub struct PathResolver { /* fields omitted\n*/ } ``` Expand description The path resolver is a helper for the\napplication-specific [`crate::api::path`](/docs/api/rust/tauri/api/path/index\n\"crate::api::path\") APIs. ## Implementations ### impl\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#156-166\n\"goto source code\") #### pub fn\n[resource_dir](/docs/api/rust/tauri/about:blank#method.resource_dir)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[PathBuf](https://doc.rust-lang.org/1.54.0/std/path/struct.PathBuf.html\n\"struct\nstd::path::PathBuf\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#158-160\n\"goto source code\") Returns the path to the resource directory of this app. ####\npub fn [app_dir](/docs/api/rust/tauri/about:blank#method.app_dir)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[PathBuf](https://doc.rust-lang.org/1.54.0/std/path/struct.PathBuf.html\n\"struct\nstd::path::PathBuf\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#163-165\n\"goto source code\") Returns the path to the suggested directory for your app\nconfig files. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [PathResolver](/docs/api/rust/tauri/struct.PathResolver\n\"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#150\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#150\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#150\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#150 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [PathResolver](/docs/api/rust/tauri/struct.PathResolver\n\"struct tauri::PathResolver\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [PathResolver](/docs/api/rust/tauri/struct.PathResolver\n\"struct tauri::PathResolver\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[PathResolver](/docs/api/rust/tauri/struct.PathResolver \"struct\ntauri::PathResolver\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.PathResolver"},{"id":"prose_docs_api_rust_tauri_struct_PhysicalPosition_md","title":"Struct tauri::PhysicalPosition","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::PhysicalPosition, ```rs pub struct PhysicalPosition\n\n{ pub x: P, pub y: P, } ``` Expand description A position represented in\nphysical pixels. ## Fields `x: P` Vertical axis value. `y: P` Horizontal axis\nvalue. ## Implementations ### impl<P>\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P: [Pixel](/docs/api/rust/tauri/trait.Pixel\n\"trait tauri::Pixel\"), #### pub fn\n[to_logical](/docs/api/rust/tauri/about:blank#method.to_logical)<X>(self,\nscale_factor: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[LogicalPosition](/docs/api/rust/tauri/struct.LogicalPosition \"struct\ntauri::LogicalPosition\")<X> where X: [Pixel](/docs/api/rust/tauri/trait.Pixel\n\"trait tauri::Pixel\"), Converts the physical position to a logical one, using\nthe scale factor. ## Trait Implementations ### impl<P>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<P> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<P>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de, P>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>, #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition\n\"struct tauri::PhysicalPosition\")<P>, <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<PhysicalPositionWrapper<T>> for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<T> #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(position:\nPhysicalPositionWrapper<T>) ->\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<T> Performs the conversion. ### impl<P>\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\"), #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"), Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<P>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition\n\"struct tauri::PhysicalPosition\")<P>> for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<P>, #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl<P>\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl<P> [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"), ### impl<P>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\"), ### impl<P>\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> ### impl<P>\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> ## Auto Trait Implementations ### impl<P>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<P>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<P>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<P>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<P>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[PhysicalPosition](/docs/api/rust/tauri/struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<P> where P:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.PhysicalPosition"},{"id":"prose_docs_api_rust_tauri_struct_PhysicalSize_md","title":"Struct tauri::PhysicalSize","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::PhysicalSize, ```rs pub struct PhysicalSize { pub width: T, pub\nheight: T, } ``` Expand description A size represented in physical pixels. ##\nFields `width: T` Width. `height: T` Height. ## Implementations ### impl<T>\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T: [Pixel](/docs/api/rust/tauri/trait.Pixel\n\"trait tauri::Pixel\"), #### pub fn\n[to_logical](/docs/api/rust/tauri/about:blank#method.to_logical)<X>(self,\nscale_factor: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[LogicalSize](/docs/api/rust/tauri/struct.LogicalSize \"struct\ntauri::LogicalSize\")<X> where X: [Pixel](/docs/api/rust/tauri/trait.Pixel \"trait\ntauri::Pixel\"), Converts the physical size to a logical one, applying the scale\nfactor. ## Trait Implementations ### impl<T>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T> where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de, T>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>, #### pub fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\n\\_\\_deserializer: \\_\\_D ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T>, <\\_\\_D as\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>>::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de>, Deserialize this value from the given\nSerde deserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<PhysicalSizeWrapper<T>> for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(size:\nPhysicalSizeWrapper<T>) ->\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> Performs the conversion. ### impl<T>\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\") for [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T> where T:\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\"), #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"), Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<T>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T>> for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<T>, #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `self` and `other` values to be equal, and is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) This method\ntests for `!=`. ### impl<T>\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\"), #### pub fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(\n&self, \\_\\_serializer: \\_\\_S ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"), <\\_\\_S as\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\")>::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait serde::ser::Serializer\"), Serialize this value into the given Serde\nserializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n### impl<T> [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"), ### impl<T>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T> where T:\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\"), ### impl<T>\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> ### impl<T>\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> ## Auto Trait Implementations ### impl<T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize\n\"struct tauri::PhysicalSize\")<T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[PhysicalSize](/docs/api/rust/tauri/struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<T> where T:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R> [CommandArg](/docs/api/rust/tauri/command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D, [InvokeError](/docs/api/rust/tauri/struct.InvokeError\n\"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\n[Read more](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/struct.PhysicalSize"},{"id":"prose_docs_api_rust_tauri_struct_RunIteration_md","title":"Struct tauri::RunIteration","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::RunIteration, ```rs pub struct RunIteration { pub window_count:\nusize, } ``` Expand description Metadata for a runtime event loop iteration on\n`run_iteration`. ## Fields `window_count: usize` ## Trait Implementations ###\nimpl [Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [RunIteration](/docs/api/rust/tauri/struct.RunIteration\n\"struct tauri::RunIteration\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [RunIteration](/docs/api/rust/tauri/struct.RunIteration\n\"struct tauri::RunIteration\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [RunIteration](/docs/api/rust/tauri/struct.RunIteration\n\"struct tauri::RunIteration\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[RunIteration](/docs/api/rust/tauri/struct.RunIteration \"struct\ntauri::RunIteration\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.RunIteration"},{"id":"prose_docs_api_rust_tauri_struct_State_md","title":"Struct tauri::State","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::State, ```rs pub struct State<'r, T: Send + Sync + 'static>(_);\n``` Expand description A guard for a state value. ## Implementations ###\nimpl<'r, T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static> [State](/docs/api/rust/tauri/struct.State\n\"struct tauri::State\")<'r,\nT>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#15-23 \"goto source code\")\n#### pub fn [inner](/docs/api/rust/tauri/about:blank#method.inner)(&self) ->\n[&'r](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#20-22\n\"goto source code\") Retrieve a borrow to the underlying value with a lifetime of\n`'r`. Using this method is typically unnecessary as `State` implements\n[`std::ops::Deref`](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html\n\"std::ops::Deref\") with a\n[`std::ops::Deref::Target`](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html#associatedtype.Target\n\"std::ops::Deref::Target\") of `T`. ## Trait Implementations ### impl<T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_, T>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#34-38\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> Self[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#35-37 \"goto source\ncode\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<'r, 'de: 'r, T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static, R: [Runtime](/docs/api/rust/tauri/trait.Runtime\n\"trait tauri::Runtime\")>\n[CommandArg](/docs/api/rust/tauri/command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for\n[State](/docs/api/rust/tauri/struct.State \"struct tauri::State\")<'r,\nT>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#40-45 \"goto source code\")\n#### fn\n[from_command](/docs/api/rust/tauri/command/trait.CommandArg#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/command/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#42-44\n\"goto source code\") Grabs the [`State`](/docs/api/rust/tauri/struct.State\n\"State\") from the\n[`CommandItem`](/docs/api/rust/tauri/command/struct.CommandItem \"CommandItem\").\nThis will never fail. ### impl<T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>\n[Deref](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html \"trait\ncore::ops::deref::Deref\") for [State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_, T>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#25-32\n\"goto source code\") #### type\n[Target](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html#associatedtype.Target)\n= T The resulting type after dereferencing. #### fn\n[deref](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html#tymethod.deref)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#29-31\n\"goto source code\") Dereferences the value. ## Auto Trait Implementations ###\nimpl<'r, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [State](/docs/api/rust/tauri/struct.State\n\"struct tauri::State\")<'r, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'r, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'r, T> ### impl<'r, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'r, T> ### impl<'r, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'r, T> ### impl<'r, T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [State](/docs/api/rust/tauri/struct.State\n\"struct tauri::State\")<'r, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.State"},{"id":"prose_docs_api_rust_tauri_struct_StateManager_md","title":"Struct tauri::StateManager","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::StateManager, ```rs pub struct StateManager(_); ``` Expand\ndescription The Tauri state manager. ## Implementations ### impl\n[StateManager](/docs/api/rust/tauri/struct.StateManager \"struct\ntauri::StateManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#51-69\n\"goto source code\") #### pub fn\n[get](/docs/api/rust/tauri/about:blank#method.get)<T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>(&self) ->\n[State](/docs/api/rust/tauri/struct.State \"struct tauri::State\")<'\\_,\nT>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#61-63 \"goto source code\")\nGets the state associated with the specified type. #### pub fn\n[try_get](/docs/api/rust/tauri/about:blank#method.try_get)<T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static>(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_,\nT>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#66-68 \"goto source\ncode\") Gets the state associated with the specified type. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [StateManager](/docs/api/rust/tauri/struct.StateManager\n\"struct\ntauri::StateManager\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#48\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/state.rs#48 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[StateManager](/docs/api/rust/tauri/struct.StateManager \"struct\ntauri::StateManager\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [StateManager](/docs/api/rust/tauri/struct.StateManager\n\"struct tauri::StateManager\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [StateManager](/docs/api/rust/tauri/struct.StateManager\n\"struct tauri::StateManager\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[StateManager](/docs/api/rust/tauri/struct.StateManager \"struct\ntauri::StateManager\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[StateManager](/docs/api/rust/tauri/struct.StateManager \"struct\ntauri::StateManager\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.StateManager"},{"id":"prose_docs_api_rust_tauri_struct_Submenu_md","title":"Struct tauri::Submenu","sections":["Fields ","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Submenu, ```rs #[non_exhaustive] pub struct Submenu { pub title:\nString, pub enabled: bool, pub inner: Menu, } ``` ## Fields (Non-exhaustive)\nThis struct is marked as non-exhaustive Non-exhaustive structs could have\nadditional fields added in future. Therefore, non-exhaustive structs cannot be\nconstructed in external crates using the traditional `Struct { .. }` syntax;\ncannot be matched against without a wildcard `..`; and struct update syntax will\nnot work. `title: String``enabled: bool``inner: Menu` ## Implementations ###\nimpl [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\") ####\npub fn [new](/docs/api/rust/tauri/about:blank#method.new)<S>(title: S, menu:\n[Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\")) ->\n[Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\") where S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Creates a new submenu with the given title and\nmenu items. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct\ntauri::Submenu\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\")\nReturns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Submenu](/docs/api/rust/tauri/struct.Submenu\n\"struct tauri::Submenu\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct\ntauri::Submenu\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct\ntauri::Submenu\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Submenu](/docs/api/rust/tauri/struct.Submenu \"struct\ntauri::Submenu\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Submenu](/docs/api/rust/tauri/struct.Submenu \"struct tauri::Submenu\") ##\nBlanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Submenu"},{"id":"prose_docs_api_rust_tauri_struct_WebviewAttributes_md","title":"Struct tauri::WebviewAttributes","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::WebviewAttributes, ```rs pub struct WebviewAttributes { pub url:\nWindowUrl, pub initialization_scripts: Vec, pub data_directory: Option, pub\nfile_drop_handler_enabled: bool, } ``` Expand description The attributes used to\ncreate an webview. ## Fields `url: WindowUrl``initialization_scripts:\nVec``data_directory: Option``file_drop_handler_enabled: bool` ## Implementations\n### impl [WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes\n\"struct tauri::WebviewAttributes\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(url:\n[WindowUrl](/docs/api/rust/tauri/enum.WindowUrl \"enum tauri::WindowUrl\")) ->\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") Initializes the default attributes for a webview.\n#### pub fn\n[initialization_script](/docs/api/rust/tauri/about:blank#method.initialization_script)(self,\nscript: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") Sets the init script. #### pub fn\n[data_directory](/docs/api/rust/tauri/about:blank#method.data_directory)(self,\ndata_directory:\n[PathBuf](https://doc.rust-lang.org/1.54.0/std/path/struct.PathBuf.html \"struct\nstd::path::PathBuf\")) ->\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") Data directory for the webview. #### pub fn\n[disable_file_drop_handler](/docs/api/rust/tauri/about:blank#method.disable_file_drop_handler)(self)\n-> [WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") Disables the file drop handler. This is required to\nuse drag and drop APIs on the front end on Windows. ## Trait Implementations ###\nimpl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[WebviewAttributes](/docs/api/rust/tauri/struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.WebviewAttributes"},{"id":"prose_docs_api_rust_tauri_struct_WindowMenuEvent_md","title":"Struct tauri::WindowMenuEvent","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::WindowMenuEvent, ```rs pub struct WindowMenuEvent { /* fields\nomitted */ } ``` Expand description A menu event that was triggered on a window.\n## Implementations ### impl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime\n\"trait tauri::Runtime\")>\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#117-127\n\"goto source code\") #### pub fn\n[menu_item_id](/docs/api/rust/tauri/about:blank#method.menu_item_id)(&self) ->\nMenuIdRef<'\\_>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#119-121 \"goto\nsource code\") The menu item id. #### pub fn\n[window](/docs/api/rust/tauri/about:blank#method.window)(&self) ->\n&[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#124-126\n\"goto source code\") The window that the menu belongs to. ## Trait\nImplementations ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#111\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#111 \"goto\nsource code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R> ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[WindowMenuEvent](/docs/api/rust/tauri/struct.WindowMenuEvent \"struct\ntauri::WindowMenuEvent\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.WindowMenuEvent"},{"id":"prose_docs_api_rust_tauri_struct_Wry_md","title":"Struct tauri::Wry","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::Wry, ```rs pub struct Wry { /* fields omitted */ } ``` Expand\ndescription A Tauri [`Runtime`](/docs/api/rust/tauri/trait.Runtime \"Runtime\")\nwrapper around wry. ## Trait Implementations ### impl\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\") for\n[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") #### type\n[Dispatcher](/docs/api/rust/tauri/trait.Runtime#associatedtype.Dispatcher) =\nWryDispatcher The message dispatcher. #### type\n[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle) = WryHandle\nThe runtime handle type. #### type\n[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager)\n= GlobalShortcutManagerHandle The global shortcut manager type. #### type\n[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager)\n= ClipboardManagerWrapper The clipboard manager type. #### pub fn\n[new](/docs/api/rust/tauri/trait.Runtime#tymethod.new)() ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\"), Error> Creates a new webview runtime. #### pub fn\n[handle](/docs/api/rust/tauri/trait.Runtime#tymethod.handle)(&self) ->\n<[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\") Gets a runtime handle. #### pub fn\n[global_shortcut_manager](/docs/api/rust/tauri/trait.Runtime#tymethod.global_shortcut_manager)(&self)\n-> <[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\") Gets the global shortcut manager.\n#### pub fn\n[clipboard_manager](/docs/api/rust/tauri/trait.Runtime#tymethod.clipboard_manager)(&self)\n-> <[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\") Gets the clipboard manager. #### pub fn\n[create_window](/docs/api/rust/tauri/trait.Runtime#tymethod.create_window)(\n&self, pending: PendingWindow<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\")> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<DetachedWindow<[Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>, Error> Create a new webview window. #### pub fn\n[run](/docs/api/rust/tauri/trait.Runtime#tymethod.run)<F>(self, callback: F)\nwhere F: 'static +\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(RunEvent), Run the webview runtime. ## Auto Trait\nImplementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\") ### impl\n\\![Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/struct.Wry"},{"id":"prose_docs_api_rust_tauri_trait_Assets_md","title":"Trait tauri::Assets","sections":["Required methods","Implementations on Foreign Types","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::Assets, ```rs pub trait Assets: 'static + Send + Sync { fn\nget(&self, key: &AssetKey) -> Option>; } ``` Expand description Represents a\ncontainer of file assets that are retrievable during runtime. ## Required\nmethods #### fn [get](/docs/api/rust/tauri/about:blank#tymethod.get)(&self, key:\n&AssetKey) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Cow](https://doc.rust-lang.org/1.54.0/alloc/borrow/enum.Cow.html\n\"enum alloc::borrow::Cow\")<'\\_,\n[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>\nGet the content of the passed \\[`AssetKey`]. ## Implementations on Foreign Types\n### impl [Assets](/docs/api/rust/tauri/trait.Assets \"trait tauri::Assets\") for\nEmbeddedAssets #### pub fn\n[get](/docs/api/rust/tauri/about:blank#tymethod.get)(&self, key: &AssetKey) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Cow](https://doc.rust-lang.org/1.54.0/alloc/borrow/enum.Cow.html\n\"enum alloc::borrow::Cow\")<'\\_,\n[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>\n## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/trait.Assets"},{"id":"prose_docs_api_rust_tauri_trait_ClipboardManager_md","title":"Trait tauri::ClipboardManager","sections":["Required methods","Panics","Panics","Implementations on Foreign Types","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::ClipboardManager, ```rs pub trait ClipboardManager: Debug { fn\nwrite_text(&mut self, text: T) -> Result<(), Error>     where         T: Into;\nfn read_text(&self) -> Result, Error>; } ``` Expand description Clipboard\nmanager. ## Required methods #### fn\n[write_text](/docs/api/rust/tauri/about:blank#tymethod.write_text)<T>(&mut self,\ntext: T) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> where T:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Writes the text into the clipboard as plain\ntext. ## Panics - Panics if the event loop is not running yet, usually when\ncalled on the `tauri::Builder#setup` closure. - Panics when called on the main\nthread, usually on the `tauri::App#run`closure. You can spawn a task to use the\nAPI using `tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### fn\n[read_text](/docs/api/rust/tauri/about:blank#tymethod.read_text)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Error> Read the content in the clipboard as\nplain text. ## Panics - Panics if the event loop is not running yet, usually\nwhen called on the `tauri::Builder#setup` closure. - Panics when called on the\nmain thread, usually on the `tauri::App#run`closure. You can spawn a task to use\nthe API using `tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. ## Implementations on Foreign Types\n### impl [ClipboardManager](/docs/api/rust/tauri/trait.ClipboardManager \"trait\ntauri::ClipboardManager\") for ClipboardManagerWrapper #### pub fn\n[read_text](/docs/api/rust/tauri/about:blank#tymethod.read_text)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, Error> #### pub fn\n[write_text](/docs/api/rust/tauri/about:blank#tymethod.write_text)<T>(&mut self,\ntext: T) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> where T:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, ## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/trait.ClipboardManager"},{"id":"prose_docs_api_rust_tauri_trait_GlobalShortcutManager_md","title":"Trait tauri::GlobalShortcutManager","sections":["Required methods","Panics","Panics","Panics","Panics","Implementations on Foreign Types","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::GlobalShortcutManager, ```rs pub trait GlobalShortcutManager:\nDebug { fn is_registered(&self, accelerator: &str) -> Result; fn register(\n        &mut self,         accelerator: &str,         handler: F     ) ->\nResult<(), Error>     where         F: 'static + Fn() + Send; fn\nunregister_all(&mut self) -> Result<(), Error>; fn unregister(&mut self,\naccelerator: &str) -> Result<(), Error>; } ``` Expand description A global\nshortcut manager. ## Required methods #### fn\n[is_registered](/docs/api/rust/tauri/about:blank#tymethod.is_registered)(&self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),\nError> Whether the application has registered the given `accelerator`. ## Panics\n- Panics if the event loop is not running yet, usually when called on the\n`tauri::Builder#setup` closure. - Panics when called on the main thread, usually\non the `tauri::App#run`closure. You can spawn a task to use the API using\n`tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### fn\n[register](/docs/api/rust/tauri/about:blank#tymethod.register)<F>(&mut self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html),\nhandler: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> where F: 'static +\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")() +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), Register a global shortcut of `accelerator`. ## Panics -\nPanics if the event loop is not running yet, usually when called on the\n`tauri::Builder#setup` closure. - Panics when called on the main thread, usually\non the `tauri::App#run`closure. You can spawn a task to use the API using\n`tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### fn\n[unregister_all](/docs/api/rust/tauri/about:blank#tymethod.unregister_all)(&mut\nself) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> Unregister all accelerators registered by the manager instance. ## Panics\n- Panics if the event loop is not running yet, usually when called on the\n`tauri::Builder#setup` closure. - Panics when called on the main thread, usually\non the `tauri::App#run`closure. You can spawn a task to use the API using\n`tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### fn\n[unregister](/docs/api/rust/tauri/about:blank#tymethod.unregister)(&mut self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> Unregister the provided `accelerator`. ## Panics - Panics if the event\nloop is not running yet, usually when called on the `tauri::Builder#setup`\nclosure. - Panics when called on the main thread, usually on the\n`tauri::App#run`closure. You can spawn a task to use the API using\n`tauri::async_runtime::spawn` or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. ## Implementations on Foreign Types\n### impl\n[GlobalShortcutManager](/docs/api/rust/tauri/trait.GlobalShortcutManager \"trait\ntauri::GlobalShortcutManager\") for GlobalShortcutManagerHandle #### pub fn\n[is_registered](/docs/api/rust/tauri/about:blank#tymethod.is_registered)(&self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),\nError> #### pub fn\n[register](/docs/api/rust/tauri/about:blank#tymethod.register)<F>( &mut self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html),\nhandler: F ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> where F: 'static +\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")() +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), #### pub fn\n[unregister_all](/docs/api/rust/tauri/about:blank#tymethod.unregister_all)(&mut\nself) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> #### pub fn\n[unregister](/docs/api/rust/tauri/about:blank#tymethod.unregister)(&mut self,\naccelerator: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nError> ## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/trait.GlobalShortcutManager"},{"id":"prose_docs_api_rust_tauri_trait_Manager_md","title":"Trait tauri::Manager","sections":["Provided methods","Implementors"],"subSections":["impl","impl","impl"],"code":["rs"],"text":"# Trait tauri::Manager, ```rs pub trait Manager: ManagerBase { fn config(&self)\n-> Arc { ... } fn emit_all(         &self,         event: &str,         payload:\nS     ) -> Result<()> { ... } fn emit_to(         &self,         label: &str,\n        event: &str,         payload: S     ) -> Result<()> { ... } fn\nlisten_global(         &self,         event: impl Into,         handler: F     )\n-> EventHandler     where         F: Fn(EmittedEvent) + Send + 'static, { ... }\nfn once_global(         &self,         event: impl Into,         handler: F\n    ) -> EventHandler     where         F: Fn(EmittedEvent) + Send + 'static, {\n... } fn trigger_global(&self, event: &str, data: Option) { ... } fn\nunlisten(&self, handler_id: EventHandler) { ... } fn get_window(&self, label:\n&str) -> Option> { ... } fn windows(&self) -> HashMap> { ... } fn manage(&self,\nstate: T)     where         T: Send + Sync + 'static, { ... } fn state(&self) ->\nState<'_, T>     where         T: Send + Sync + 'static, { ... } fn\ntry_state(&self) -> Option>     where         T: Send + Sync + 'static, { ... }\n} ``` Expand description Manages a running application. ## Provided methods ####\nfn [config](/docs/api/rust/tauri/about:blank#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#256-258 \"goto\nsource code\") The [`Config`](/docs/api/rust/tauri/struct.Config \"Config\") the\nmanager was created with. #### fn\n[emit_all](/docs/api/rust/tauri/about:blank#method.emit_all)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#261-263\n\"goto source code\") Emits a event to all windows. #### fn\n[emit_to](/docs/api/rust/tauri/about:blank#method.emit_to)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>( &self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S ) ->\n[Result](/docs/api/rust/tauri/type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#266-270\n\"goto source code\") Emits an event to a window with the specified label. #### fn\n[listen_global](/docs/api/rust/tauri/about:blank#method.listen_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#273-278 \"goto source\ncode\") Listen to a global event. #### fn\n[once_global](/docs/api/rust/tauri/about:blank#method.once_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#281-286 \"goto source\ncode\") Listen to a global event only once. #### fn\n[trigger_global](/docs/api/rust/tauri/about:blank#method.trigger_global)(&self,\nevent: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), data:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#289-291\n\"goto source code\") Trigger a global event. #### fn\n[unlisten](/docs/api/rust/tauri/about:blank#method.unlisten)(&self, handler_id:\nEventHandler)[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#294-296 \"goto\nsource code\") Remove an event listener. #### fn\n[get_window](/docs/api/rust/tauri/about:blank#method.get_window)(&self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Window](/docs/api/rust/tauri/window/struct.Window\n\"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#299-301\n\"goto source code\") Fetch a single window from the manager. #### fn\n[windows](/docs/api/rust/tauri/about:blank#method.windows)(&self) ->\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\n[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#304-306\n\"goto source code\") Fetch all managed windows. #### fn\n[manage](/docs/api/rust/tauri/about:blank#method.manage)<T>(&self, state: T)\nwhere T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#310-315 \"goto source\ncode\") Add `state` to the state managed by the application. See\n[`crate::Builder`](/docs/api/rust/tauri/struct.Builder#manage \"crate::Builder\")\nfor instructions. #### fn\n[state](/docs/api/rust/tauri/about:blank#method.state)<T>(&self) ->\n[State](/docs/api/rust/tauri/struct.State \"struct tauri::State\")<'\\_, T> where\nT: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#318-323 \"goto source\ncode\") Gets the managed state for the type `T`. Panics if the type is not\nmanaged. #### fn\n[try_state](/docs/api/rust/tauri/about:blank#method.try_state)<T>(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[State](/docs/api/rust/tauri/struct.State \"struct\ntauri::State\")<'\\_, T>> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../src/tauri/lib.rs#326-331 \"goto source\ncode\") Tries to get the managed state for the type `T`. Returns `None` if the\ntype is not managed. ## Implementors ### impl<R:\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[Manager](/docs/api/rust/tauri/trait.Manager \"trait tauri::Manager\")<R> for\n[App](/docs/api/rust/tauri/struct.App \"struct tauri::App\")<R>\n[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#308 \"goto source code\") ###\nimpl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[Manager](/docs/api/rust/tauri/trait.Manager \"trait tauri::Manager\")<R> for\n[AppHandle](/docs/api/rust/tauri/struct.AppHandle \"struct tauri::AppHandle\")<R>\n[\\[src\\]](/docs/api/rust/tauri/../src/tauri/app.rs#278 \"goto source code\") ###\nimpl<R: [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")>\n[Manager](/docs/api/rust/tauri/trait.Manager \"trait tauri::Manager\")<R> for\n[Window](/docs/api/rust/tauri/window/struct.Window \"struct\ntauri::window::Window\")<R>\n[\\[src\\]](/docs/api/rust/tauri/../src/tauri/window.rs#121 \"goto source code\")","url":"https://tauri.studio/docs/api/rust/tauri/trait.Manager"},{"id":"prose_docs_api_rust_tauri_trait_Pixel_md","title":"Trait tauri::Pixel","sections":["Required methods","Provided methods","Implementations on Foreign Types","Implementors"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl "],"code":["rs"],"text":"# Trait tauri::Pixel, ```rs pub trait Pixel: Copy + Into { fn from_f64(f: f64)\n-> Self; fn cast\n\n(self) -> P     where         P: Pixel, { ... } } ``` Expand description A pixel\ndefinition. Must be created from a `f64` value. ## Required methods #### fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) -> Self Creates\nthe pixel from the `f64` value. ## Provided methods #### fn\n[cast](/docs/api/rust/tauri/about:blank#method.cast)<P>(self) -> P where P:\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\"), Casts a pixel.\n## Implementations on Foreign Types ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[i16](https://doc.rust-lang.org/1.54.0/std/primitive.i16.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[i16](https://doc.rust-lang.org/1.54.0/std/primitive.i16.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[f32](https://doc.rust-lang.org/1.54.0/std/primitive.f32.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[f32](https://doc.rust-lang.org/1.54.0/std/primitive.f32.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[i8](https://doc.rust-lang.org/1.54.0/std/primitive.i8.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[i8](https://doc.rust-lang.org/1.54.0/std/primitive.i8.html) ### impl\n[Pixel](/docs/api/rust/tauri/trait.Pixel \"trait tauri::Pixel\") for\n[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html) #### pub fn\n[from_f64](/docs/api/rust/tauri/about:blank#tymethod.from_f64)(f:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\n[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html) ## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/trait.Pixel"},{"id":"prose_docs_api_rust_tauri_trait_Runtime_md","title":"Trait tauri::Runtime","sections":["Associated Types","Required methods","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::Runtime, ```rs pub trait Runtime: 'static { type Dispatcher:\nDispatch; type Handle: RuntimeHandle; type GlobalShortcutManager:\nGlobalShortcutManager + Clone + Send; type ClipboardManager: ClipboardManager +\nClone + Send; fn new() -> Result; fn handle(&self) -> Self::Handle; fn\nglobal_shortcut_manager(&self) -> Self::GlobalShortcutManager; fn\nclipboard_manager(&self) -> Self::ClipboardManager; fn create_window(\n        &self,         pending: PendingWindow     ) -> Result, Error>; fn\nrun(self, callback: F)     where         F: 'static + Fn(RunEvent); } ``` Expand\ndescription The webview runtime interface. ## Associated Types #### type\n[Dispatcher](/docs/api/rust/tauri/about:blank#associatedtype.Dispatcher):\nDispatch The message dispatcher. #### type\n[Handle](/docs/api/rust/tauri/about:blank#associatedtype.Handle): RuntimeHandle\nThe runtime handle type. #### type\n[GlobalShortcutManager](/docs/api/rust/tauri/about:blank#associatedtype.GlobalShortcutManager):\n[GlobalShortcutManager](/docs/api/rust/tauri/trait.GlobalShortcutManager \"trait\ntauri::GlobalShortcutManager\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") The global shortcut manager type. #### type\n[ClipboardManager](/docs/api/rust/tauri/about:blank#associatedtype.ClipboardManager):\n[ClipboardManager](/docs/api/rust/tauri/trait.ClipboardManager \"trait\ntauri::ClipboardManager\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") The clipboard manager type. ## Required methods #### fn\n[new](/docs/api/rust/tauri/about:blank#tymethod.new)() ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self, Error> Creates a new webview runtime. #### fn\n[handle](/docs/api/rust/tauri/about:blank#tymethod.handle)(&self) ->\nSelf::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle \"type\ntauri::Runtime::Handle\") Gets a runtime handle. #### fn\n[global_shortcut_manager](/docs/api/rust/tauri/about:blank#tymethod.global_shortcut_manager)(&self)\n->\nSelf::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\") Gets the global shortcut manager.\n#### fn\n[clipboard_manager](/docs/api/rust/tauri/about:blank#tymethod.clipboard_manager)(&self)\n->\nSelf::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\") Gets the clipboard manager. #### fn\n[create_window](/docs/api/rust/tauri/about:blank#tymethod.create_window)( &self,\npending: PendingWindow<Self> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<DetachedWindow<Self>, Error> Create a new webview window.\n#### fn [run](/docs/api/rust/tauri/about:blank#tymethod.run)<F>(self, callback:\nF) where F: 'static +\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(RunEvent), Run the webview runtime. ## Implementors\n### impl [Runtime](/docs/api/rust/tauri/trait.Runtime \"trait tauri::Runtime\")\nfor [Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") #### type\n[Dispatcher](/docs/api/rust/tauri/about:blank#associatedtype.Dispatcher) =\nWryDispatcher #### type\n[Handle](/docs/api/rust/tauri/about:blank#associatedtype.Handle) = WryHandle\n#### type\n[GlobalShortcutManager](/docs/api/rust/tauri/about:blank#associatedtype.GlobalShortcutManager)\n= GlobalShortcutManagerHandle #### type\n[ClipboardManager](/docs/api/rust/tauri/about:blank#associatedtype.ClipboardManager)\n= ClipboardManagerWrapper #### pub fn\n[new](/docs/api/rust/tauri/about:blank#tymethod.new)() ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\"), Error> #### pub fn\n[handle](/docs/api/rust/tauri/about:blank#tymethod.handle)(&self) ->\n<[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\") #### pub fn\n[global_shortcut_manager](/docs/api/rust/tauri/about:blank#tymethod.global_shortcut_manager)(&self)\n-> <[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\") #### pub fn\n[clipboard_manager](/docs/api/rust/tauri/about:blank#tymethod.clipboard_manager)(&self)\n-> <[Wry](/docs/api/rust/tauri/struct.Wry \"struct tauri::Wry\") as\n[Runtime](/docs/api/rust/tauri/trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\") #### pub fn\n[create_window](/docs/api/rust/tauri/about:blank#tymethod.create_window)( &self,\npending: PendingWindow<[Wry](/docs/api/rust/tauri/struct.Wry \"struct\ntauri::Wry\")> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<DetachedWindow<[Wry](/docs/api/rust/tauri/struct.Wry\n\"struct tauri::Wry\")>, Error> #### pub fn\n[run](/docs/api/rust/tauri/about:blank#tymethod.run)<F>(self, callback: F) where\nF: 'static +\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(RunEvent),","url":"https://tauri.studio/docs/api/rust/tauri/trait.Runtime"},{"id":"prose_docs_api_rust_tauri_trait_WindowBuilder_md","title":"Trait tauri::WindowBuilder","sections":["Required methods","Implementations on Foreign Types","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::WindowBuilder, ```rs pub trait WindowBuilder: WindowBuilderBase {\nShow methods fn new() -> Self; fn with_config(config: WindowConfig) -> Self; fn\nmenu(self, menu: Menu) -> Self; fn center(self) -> Self; fn position(self, x:\nf64, y: f64) -> Self; fn inner_size(self, min_width: f64, min_height: f64) ->\nSelf; fn min_inner_size(self, min_width: f64, min_height: f64) -> Self; fn\nmax_inner_size(self, max_width: f64, max_height: f64) -> Self; fn\nresizable(self, resizable: bool) -> Self; fn title(self, title: S) -> Self    \nwhere         S: Into; fn fullscreen(self, fullscreen: bool) -> Self; fn\nfocus(self) -> Self; fn maximized(self, maximized: bool) -> Self; fn\nvisible(self, visible: bool) -> Self; fn transparent(self, transparent: bool) ->\nSelf; fn decorations(self, decorations: bool) -> Self; fn always_on_top(self,\nalways_on_top: bool) -> Self; fn icon(self, icon: Icon) -> Result; fn\nskip_taskbar(self, skip: bool) -> Self; fn has_icon(&self) -> bool; fn\nhas_menu(&self) -> bool; } ``` Expand description A builder for all attributes\nrelated to a single webview. This trait is only meant to be implemented by a\ncustom [`Runtime`](/docs/api/rust/tauri/trait.Runtime) and not by applications.\n## Required methods #### fn\n[new](/docs/api/rust/tauri/about:blank#tymethod.new)() -> Self Initializes a new\nwindow attributes builder. #### fn\n[with_config](/docs/api/rust/tauri/about:blank#tymethod.with_config)(config:\nWindowConfig) -> Self Initializes a new webview builder from a \\[`WindowConfig`]\n#### fn [menu](/docs/api/rust/tauri/about:blank#tymethod.menu)(self, menu:\n[Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\")) -> Self Sets the\nmenu for the window. #### fn\n[center](/docs/api/rust/tauri/about:blank#tymethod.center)(self) -> Self Show\nwindow in the center of the screen. #### fn\n[position](/docs/api/rust/tauri/about:blank#tymethod.position)(self, x:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html), y:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) -> Self The\ninitial position of the window’s. #### fn\n[inner_size](/docs/api/rust/tauri/about:blank#tymethod.inner_size)(self,\nmin_width: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html),\nmin_height: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\nSelf Window size. #### fn\n[min_inner_size](/docs/api/rust/tauri/about:blank#tymethod.min_inner_size)(self,\nmin_width: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html),\nmin_height: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\nSelf Window min inner size. #### fn\n[max_inner_size](/docs/api/rust/tauri/about:blank#tymethod.max_inner_size)(self,\nmax_width: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html),\nmax_height: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\nSelf Window max inner size. #### fn\n[resizable](/docs/api/rust/tauri/about:blank#tymethod.resizable)(self,\nresizable: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nSelf Whether the window is resizable or not. #### fn\n[title](/docs/api/rust/tauri/about:blank#tymethod.title)<S>(self, title: S) ->\nSelf where S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, The title of the window in the title bar. ####\nfn [fullscreen](/docs/api/rust/tauri/about:blank#tymethod.fullscreen)(self,\nfullscreen: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nSelf Whether to start the window in fullscreen or not. #### fn\n[focus](/docs/api/rust/tauri/about:blank#tymethod.focus)(self) -> Self Whether\nthe window will be initially hidden or focused. #### fn\n[maximized](/docs/api/rust/tauri/about:blank#tymethod.maximized)(self,\nmaximized: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nSelf Whether the window should be maximized upon creation. #### fn\n[visible](/docs/api/rust/tauri/about:blank#tymethod.visible)(self, visible:\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) -> Self\nWhether the window should be immediately visible upon creation. #### fn\n[transparent](/docs/api/rust/tauri/about:blank#tymethod.transparent)(self,\ntransparent: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> Self Whether the the window should be transparent. If this is true, writing\ncolors with alpha values different than `1.0` will produce a transparent window.\n#### fn\n[decorations](/docs/api/rust/tauri/about:blank#tymethod.decorations)(self,\ndecorations: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> Self Whether the window should have borders and bars. #### fn\n[always_on_top](/docs/api/rust/tauri/about:blank#tymethod.always_on_top)(self,\nalways_on_top: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> Self Whether the window should always be on top of other windows. #### fn\n[icon](/docs/api/rust/tauri/about:blank#tymethod.icon)(self, icon:\n[Icon](/docs/api/rust/tauri/enum.Icon \"enum tauri::Icon\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self, Error> Sets the window icon. #### fn\n[skip_taskbar](/docs/api/rust/tauri/about:blank#tymethod.skip_taskbar)(self,\nskip: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) -> Self\nSets whether or not the window icon should be added to the taskbar. #### fn\n[has_icon](/docs/api/rust/tauri/about:blank#tymethod.has_icon)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) Whether the\nicon was set or not. #### fn\n[has_menu](/docs/api/rust/tauri/about:blank#tymethod.has_menu)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) Whether the\nmenu was set or not. ## Implementations on Foreign Types ### impl\n[WindowBuilder](/docs/api/rust/tauri/trait.WindowBuilder \"trait\ntauri::WindowBuilder\") for WindowBuilderWrapper #### pub fn\n[focus](/docs/api/rust/tauri/about:blank#tymethod.focus)(self) ->\nWindowBuilderWrapper Deprecated since 0.1.4 (noop) Windows is automatically\nfocused when created. #### pub fn\n[new](/docs/api/rust/tauri/about:blank#tymethod.new)() -> WindowBuilderWrapper\n#### pub fn\n[with_config](/docs/api/rust/tauri/about:blank#tymethod.with_config)(config:\nWindowConfig) -> WindowBuilderWrapper #### pub fn\n[menu](/docs/api/rust/tauri/about:blank#tymethod.menu)(self, menu:\n[Menu](/docs/api/rust/tauri/struct.Menu \"struct tauri::Menu\")) ->\nWindowBuilderWrapper #### pub fn\n[center](/docs/api/rust/tauri/about:blank#tymethod.center)(self) ->\nWindowBuilderWrapper #### pub fn\n[position](/docs/api/rust/tauri/about:blank#tymethod.position)(self, x:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html), y:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\nWindowBuilderWrapper #### pub fn\n[inner_size](/docs/api/rust/tauri/about:blank#tymethod.inner_size)(self, width:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html), height:\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)) ->\nWindowBuilderWrapper #### pub fn\n[min_inner_size](/docs/api/rust/tauri/about:blank#tymethod.min_inner_size)(\nself, min_width: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html),\nmin_height: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html) ) ->\nWindowBuilderWrapper #### pub fn\n[max_inner_size](/docs/api/rust/tauri/about:blank#tymethod.max_inner_size)(\nself, max_width: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html),\nmax_height: [f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html) ) ->\nWindowBuilderWrapper #### pub fn\n[resizable](/docs/api/rust/tauri/about:blank#tymethod.resizable)(self,\nresizable: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nWindowBuilderWrapper #### pub fn\n[title](/docs/api/rust/tauri/about:blank#tymethod.title)<S>(self, title: S) ->\nWindowBuilderWrapper where S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, #### pub fn\n[fullscreen](/docs/api/rust/tauri/about:blank#tymethod.fullscreen)(self,\nfullscreen: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nWindowBuilderWrapper #### pub fn\n[maximized](/docs/api/rust/tauri/about:blank#tymethod.maximized)(self,\nmaximized: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nWindowBuilderWrapper #### pub fn\n[visible](/docs/api/rust/tauri/about:blank#tymethod.visible)(self, visible:\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nWindowBuilderWrapper #### pub fn\n[transparent](/docs/api/rust/tauri/about:blank#tymethod.transparent)(self,\ntransparent: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> WindowBuilderWrapper #### pub fn\n[decorations](/docs/api/rust/tauri/about:blank#tymethod.decorations)(self,\ndecorations: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> WindowBuilderWrapper #### pub fn\n[always_on_top](/docs/api/rust/tauri/about:blank#tymethod.always_on_top)(self,\nalways_on_top: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> WindowBuilderWrapper #### pub fn\n[icon](/docs/api/rust/tauri/about:blank#tymethod.icon)(self, icon:\n[Icon](/docs/api/rust/tauri/enum.Icon \"enum tauri::Icon\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<WindowBuilderWrapper, Error> #### pub fn\n[skip_taskbar](/docs/api/rust/tauri/about:blank#tymethod.skip_taskbar)(self,\nskip: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\nWindowBuilderWrapper #### pub fn\n[has_icon](/docs/api/rust/tauri/about:blank#tymethod.has_icon)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) #### pub fn\n[has_menu](/docs/api/rust/tauri/about:blank#tymethod.has_menu)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) ## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/trait.WindowBuilder"},{"id":"prose_docs_api_rust_tauri_type_InvokeHandler_md","title":"Type tauri::InvokeHandler","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::InvokeHandler, ```rs type InvokeHandler = dyn\nFn(Invoke) + Send + Sync + 'static; ``` Expand description A closure that is run\neverytime Tauri receives a message it doesn’t explicitly handle.","url":"https://tauri.studio/docs/api/rust/tauri/type.InvokeHandler"},{"id":"prose_docs_api_rust_tauri_type_OnPageLoad_md","title":"Type tauri::OnPageLoad","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::OnPageLoad, ```rs type OnPageLoad = dyn Fn(Window,\nPageLoadPayload) + Send + Sync + 'static; ``` Expand description A closure that\nis run once every time a window is created and loaded.","url":"https://tauri.studio/docs/api/rust/tauri/type.OnPageLoad"},{"id":"prose_docs_api_rust_tauri_type_Result_md","title":"Type tauri::Result","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::Result, ```rs type Result = Result; ``` Expand\ndescription `Result`","url":"https://tauri.studio/docs/api/rust/tauri/type.Result"},{"id":"prose_docs_api_rust_tauri_type_SetupHook_md","title":"Type tauri::SetupHook","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::SetupHook, ```rs type SetupHook = Box) -> Result<(),\nBox> + Send>; ``` Expand description A closure that is run when the Tauri\napplication is setting up.","url":"https://tauri.studio/docs/api/rust/tauri/type.SetupHook"},{"id":"prose_docs_api_rust_tauri_type_SyncTask_md","title":"Type tauri::SyncTask","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::SyncTask, ```rs type SyncTask = Box; ``` Expand\ndescription A task to run on the main thread.","url":"https://tauri.studio/docs/api/rust/tauri/type.SyncTask"},{"id":"prose_docs_api_rust_tauri_api_enum_Error_md","title":"Enum tauri::api::Error","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::Error, ```rs #[non_exhaustive] pub enum Error { Show variants\nCommand(String), Extract(String), Path(String), PathPrefix(StripPrefixError),\nDialog(String), DialogCancelled, Network(Error), HttpMethod(InvalidMethod),\nHttpHeader(InvalidHeaderName), Utf8(FromUtf8Error), InvalidHttpForm,\nSemver(Error), Json(Error), Bincode(Box), Io(Error), Ignore(Error),\nZip(ZipError), FailedToDetectPlatform(String), Shell(String), } ``` Expand\ndescription The error types. ## Variants (Non-exhaustive) This enum is marked as\nnon-exhaustive Non-exhaustive enums could have additional variants added in\nfuture. Therefore, when matching against variants of non-exhaustive enums, an\nextra wildcard arm must be added to account for any future variants.\n`Command(String)` Command error. `Extract(String)` The extract archive error.\n`Path(String)` The path operation error. `PathPrefix(StripPrefixError)` The path\nStripPrefixError error. `Dialog(String)` Error showing the dialog.\n`DialogCancelled` The dialog operation was cancelled by the user.\n`Network(Error)` The network error. `HttpMethod(InvalidMethod)` HTTP method\nerror. `HttpHeader(InvalidHeaderName)` Invalid HTTP header value.\n`Utf8(FromUtf8Error)` Failed to serialize header value as string.\n`InvalidHttpForm` HTTP form to must be an object. `Semver(Error)` Semver error.\n`Json(Error)` JSON error. `Bincode(Box)` Bincode error. `Io(Error)` IO error.\n`Ignore(Error)` Ignore error. `Zip(ZipError)` ZIP error.\n`FailedToDetectPlatform(String)` failed to detect the current platform.\n`Shell(String)` Shell error. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\n\\_\\_formatter: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto\nsource code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct\nalloc::boxed::Box\")<[ErrorKind](https://docs.rs/bincode/1.3.3/bincode/error/enum.ErrorKind.html\n\"enum bincode::error::ErrorKind\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html \"struct\nalloc::boxed::Box\")<[ErrorKind](https://docs.rs/bincode/1.3.3/bincode/error/enum.ErrorKind.html\n\"enum bincode::error::ErrorKind\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<Error> for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\nError) -> Self[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](https://docs.rs/semver/1.0.4/semver/parse/struct.Error.html\n\"struct semver::parse::Error\")> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](https://docs.rs/semver/1.0.4/semver/parse/struct.Error.html \"struct\nsemver::parse::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\")> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](https://doc.rust-lang.org/1.54.0/std/io/error/struct.Error.html\n\"struct std::io::error::Error\")> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](https://doc.rust-lang.org/1.54.0/std/io/error/struct.Error.html \"struct\nstd::io::error::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<Error> for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\nError) -> Self[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")> for [Error](/docs/api/rust/tauri/../enum.Error \"enum\ntauri::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/error.rs#8 \"goto\nsource code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[Error](/docs/api/rust/tauri/enum.Error \"enum tauri::api::Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/error.rs#8 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[FromUtf8Error](https://doc.rust-lang.org/1.54.0/alloc/string/struct.FromUtf8Error.html\n\"struct alloc::string::FromUtf8Error\")> for\n[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[FromUtf8Error](https://doc.rust-lang.org/1.54.0/alloc/string/struct.FromUtf8Error.html\n\"struct alloc::string::FromUtf8Error\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[InvalidHeaderName](/docs/api/rust/tauri/../http/header/struct.InvalidHeaderName\n\"struct tauri::http::header::InvalidHeaderName\")> for\n[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[InvalidHeaderName](/docs/api/rust/tauri/../http/header/struct.InvalidHeaderName\n\"struct tauri::http::header::InvalidHeaderName\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[InvalidMethod](/docs/api/rust/tauri/../http/method/struct.InvalidMethod\n\"struct tauri::http::method::InvalidMethod\")> for\n[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[InvalidMethod](/docs/api/rust/tauri/../http/method/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[StripPrefixError](https://doc.rust-lang.org/1.54.0/std/path/struct.StripPrefixError.html\n\"struct std::path::StripPrefixError\")> for\n[Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[StripPrefixError](https://doc.rust-lang.org/1.54.0/std/path/struct.StripPrefixError.html\n\"struct std::path::StripPrefixError\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6 \"goto source\ncode\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<ZipError> for [Error](/docs/api/rust/tauri/enum.Error\n\"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\nZipError) -> Self[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/api/error.rs#6\n\"goto source code\") Performs the conversion. ## Auto Trait Implementations ###\nimpl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::api::Error\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Error](/docs/api/rust/tauri/enum.Error \"enum\ntauri::api::Error\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Error](/docs/api/rust/tauri/enum.Error\n\"enum tauri::api::Error\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/enum.Error"},{"id":"prose_docs_api_rust_tauri_api_type_Result_md","title":"Type tauri::api::Result","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::api::Result, ```rs type Result = Result; ``` Expand\ndescription The result type of Tauri API module.","url":"https://tauri.studio/docs/api/rust/tauri/api/type.Result"},{"id":"prose_docs_api_rust_tauri_api_dialog_fn_ask_md","title":"Fn tauri::api::dialog::ask","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::dialog::ask, ```rs pub fn ask(     parent_window:\nOption<&Window>,     title: impl AsRef,     message: impl AsRef,     f: F ) ```\nExpand description Displays a dialog with a message and an optional title with a\n“yes” and a “no” button.","url":"https://tauri.studio/docs/api/rust/tauri/api/dialog/fn.ask"},{"id":"prose_docs_api_rust_tauri_api_dialog_fn_message_md","title":"Fn tauri::api::dialog::message","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::dialog::message, ```rs pub fn message(     parent_window:\nOption<&Window>,     title: impl AsRef,     message: impl AsRef ) ``` Expand\ndescription Displays a message dialog.","url":"https://tauri.studio/docs/api/rust/tauri/api/dialog/fn.message"},{"id":"prose_docs_api_rust_tauri_api_dir_fn_is_dir_md","title":"Fn tauri::api::dir::is_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::dir::is_dir, ```rs pub fn is_dir>(path: P) -> Result ```\nExpand description Checks if the given path is a directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/dir/fn.is_dir"},{"id":"prose_docs_api_rust_tauri_api_dir_fn_read_dir_md","title":"Fn tauri::api::dir::read_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::dir::read_dir, ```rs pub fn read_dir>(     path: P,\n    recursive: bool ) -> Result> ``` Expand description Reads a directory. Can\nperform recursive operations.","url":"https://tauri.studio/docs/api/rust/tauri/api/dir/fn.read_dir"},{"id":"prose_docs_api_rust_tauri_api_dir_fn_with_temp_dir_md","title":"Fn tauri::api::dir::with_temp_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::dir::with_temp_dir, ```rs pub fn with_temp_dir(callback:\nF) -> Result<()> ``` Expand description Runs a closure with a temporary\ndirectory argument.","url":"https://tauri.studio/docs/api/rust/tauri/api/dir/fn.with_temp_dir"},{"id":"prose_docs_api_rust_tauri_api_dir_struct_DiskEntry_md","title":"Struct tauri::api::dir::DiskEntry","sections":["Fields ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::dir::DiskEntry, ```rs #[non_exhaustive] pub struct\nDiskEntry { pub path: PathBuf, pub name: Option, pub children: Option>, } ```\nExpand description A disk entry which is either a file or a directory. This is\nthe result of the [`read_dir`](/docs/api/rust/tauri/fn.read_dir \"read_dir\"). The\n`children` field is always `Some` if the entry is a directory. ## Fields\n(Non-exhaustive) This struct is marked as non-exhaustive Non-exhaustive structs\ncould have additional fields added in future. Therefore, non-exhaustive structs\ncannot be constructed in external crates using the traditional `Struct { .. }`\nsyntax; cannot be matched against without a wildcard `..`; and struct update\nsyntax will not work. `path: PathBuf` The path to the entry. `name: Option` The\nname of the entry (file name with extension or directory name). `children:\nOption>` The children of this entry if it’s a directory. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [DiskEntry](/docs/api/rust/tauri/struct.DiskEntry \"struct\ntauri::api::dir::DiskEntry\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/dir.rs#17\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/dir.rs#17\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for [DiskEntry](/docs/api/rust/tauri/struct.DiskEntry\n\"struct\ntauri::api::dir::DiskEntry\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/dir.rs#17\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(&self,\n\\_\\_serializer: \\_\\_S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<\\_\\_S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\n\\_\\_S::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/dir.rs#17\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[DiskEntry](/docs/api/rust/tauri/struct.DiskEntry \"struct\ntauri::api::dir::DiskEntry\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [DiskEntry](/docs/api/rust/tauri/struct.DiskEntry\n\"struct tauri::api::dir::DiskEntry\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [DiskEntry](/docs/api/rust/tauri/struct.DiskEntry\n\"struct tauri::api::dir::DiskEntry\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [DiskEntry](/docs/api/rust/tauri/struct.DiskEntry\n\"struct tauri::api::dir::DiskEntry\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[DiskEntry](/docs/api/rust/tauri/struct.DiskEntry \"struct\ntauri::api::dir::DiskEntry\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/dir/struct.DiskEntry"},{"id":"prose_docs_api_rust_tauri_api_file_enum_ArchiveFormat_md","title":"Enum tauri::api::file::ArchiveFormat","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::file::ArchiveFormat, ```rs #[non_exhaustive] pub enum\nArchiveFormat { Tar(Option), Plain(Option), Zip, } ``` Expand description The\nsupported archive formats. ## Variants (Non-exhaustive) This enum is marked as\nnon-exhaustive Non-exhaustive enums could have additional variants added in\nfuture. Therefore, when matching against variants of non-exhaustive enums, an\nextra wildcard arm must be added to account for any future variants.\n`Tar(Option)` Tar archive. `Plain(Option)` Plain archive. `Zip` Zip archive. ##\nTrait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat\n\"enum\ntauri::api::file::ArchiveFormat\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat\n\"enum tauri::api::file::ArchiveFormat\")> for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") #### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10\n\"goto source code\") This method tests for `!=`. ### impl\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\") for [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat\n\"enum tauri::api::file::ArchiveFormat\")\n[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10 \"goto\nsource code\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")\n[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#10 \"goto\nsource code\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat\n\"enum tauri::api::file::ArchiveFormat\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat\n\"enum tauri::api::file::ArchiveFormat\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/file/enum.ArchiveFormat"},{"id":"prose_docs_api_rust_tauri_api_file_enum_Compression_md","title":"Enum tauri::api::file::Compression","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::file::Compression, ```rs #[non_exhaustive] pub enum\nCompression { Gz, } ``` Expand description The supported compression types. ##\nVariants (Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive\nenums could have additional variants added in future. Therefore, when matching\nagainst variants of non-exhaustive enums, an extra wildcard arm must be added to\naccount for any future variants. `Gz` Gz compression (e.g. `.tar.gz` archives)\n## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Compression](/docs/api/rust/tauri/enum.Compression\n\"enum\ntauri::api::file::Compression\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")> for\n[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") #### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\") for [Compression](/docs/api/rust/tauri/enum.Compression\n\"enum tauri::api::file::Compression\")\n[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22 \"goto\nsource code\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\")\n[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#22 \"goto\nsource code\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Compression](/docs/api/rust/tauri/enum.Compression\n\"enum tauri::api::file::Compression\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Compression](/docs/api/rust/tauri/enum.Compression\n\"enum tauri::api::file::Compression\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Compression](/docs/api/rust/tauri/enum.Compression\n\"enum tauri::api::file::Compression\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Compression](/docs/api/rust/tauri/enum.Compression \"enum\ntauri::api::file::Compression\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/file/enum.Compression"},{"id":"prose_docs_api_rust_tauri_api_file_fn_read_binary_md","title":"Fn tauri::api::file::read_binary","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::file::read_binary, ```rs pub fn read_binary>(file: P) ->\nResult> ``` Expand description Reads a binary file.","url":"https://tauri.studio/docs/api/rust/tauri/api/file/fn.read_binary"},{"id":"prose_docs_api_rust_tauri_api_file_fn_read_string_md","title":"Fn tauri::api::file::read_string","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::file::read_string, ```rs pub fn read_string>(file: P) ->\nResult ``` Expand description Reads a string file.","url":"https://tauri.studio/docs/api/rust/tauri/api/file/fn.read_string"},{"id":"prose_docs_api_rust_tauri_api_file_struct_Extract_md","title":"Struct tauri::api::file::Extract","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::file::Extract, ```rs pub struct Extract<'a> { /* fields\nomitted */ } ``` Expand description The extract manager to retrieve files from\narchives. ## Implementations ### impl<'a>\n[Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#54-198\n\"goto source code\") #### pub fn\n[from_source](/docs/api/rust/tauri/about:blank#method.from_source)(source: &'a\n[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\")) -> [Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#56-61\n\"goto source code\") Create an \\`Extractor from a source path #### pub fn\n[archive_format](/docs/api/rust/tauri/about:blank#method.archive_format)(&mut\nself, format: [ArchiveFormat](/docs/api/rust/tauri/enum.ArchiveFormat \"enum\ntauri::api::file::ArchiveFormat\")) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#65-68\n\"goto source code\") Specify an archive format of the source being extracted. If\nnot specified, the archive format will determined from the file extension. ####\npub fn\n[extract_into](/docs/api/rust/tauri/about:blank#method.extract_into)(&self,\ninto_dir: &[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html\n\"struct std::path::Path\")) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#83-129\n\"goto source code\") Extract an entire source archive into a specified path. If\nthe source is a single compressed file and not an archive, it will be extracted\ninto a file with the same name inside of `into_dir`. #### pub fn\n[extract_file](/docs/api/rust/tauri/about:blank#method.extract_file)<T:\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html\n\"struct std::path::Path\")>>( &self, into_dir:\n&[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\"), file_to_extract: T ) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#134-197\n\"goto source code\") Extract a single file from a source and save to a file of\nthe same name in `into_dir`. If the source is a single compressed file, it will\nbe saved with the name `file_to_extract` in the specified `into_dir`. ## Trait\nImplementations ### impl<'a>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#30\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/extract.rs#30\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<'a>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a> ### impl<'a>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a> ### impl<'a>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a> ### impl<'a>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a> ### impl<'a>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Extract](/docs/api/rust/tauri/struct.Extract \"struct\ntauri::api::file::Extract\")<'a> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/file/struct.Extract"},{"id":"prose_docs_api_rust_tauri_api_file_struct_Move_md","title":"Struct tauri::api::file::Move","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::file::Move, ```rs pub struct Move<'a> { /* fields omitted\n*/ } ``` Expand description Moves a file from the given path to the specified\ndestination. `source` and `dest` must be on the same filesystem. If\n`replace_using_temp` is specified, the destination file will be replaced using\nthe given temporary path. - Errors: - Io - copying / renaming ## Implementations\n### impl<'a> [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#21-89\n\"goto source code\") #### pub fn\n[from_source](/docs/api/rust/tauri/about:blank#method.from_source)(source: &'a\n[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\")) -> [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#23-25\n\"goto source code\") Specify source file #### pub fn\n[replace_using_temp](/docs/api/rust/tauri/about:blank#method.replace_using_temp)(&mut\nself, temp: &'a\n[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\")) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#36-39\n\"goto source code\") If specified and the destination file already exists, the\n“destination” file will be moved to the given temporary location before the\n“source” file is moved to the “destination” file. In the event of an `io` error\nwhile renaming “source” to “destination”, the temporary file will be moved back\nto “destination”. The `temp` dir must be explicitly provided since `rename`\noperations require files to live on the same filesystem. #### pub fn\n[to_dest](/docs/api/rust/tauri/about:blank#method.to_dest)(&self, dest:\n&[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\")) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#42-60\n\"goto source code\") Move source file to specified destination (replace whole\ndirectory) #### pub fn\n[walk_to_dest](/docs/api/rust/tauri/about:blank#method.walk_to_dest)(&self,\ndest: &[Path](https://doc.rust-lang.org/1.54.0/std/path/struct.Path.html \"struct\nstd::path::Path\")) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#64-88\n\"goto source code\") Walk in the source and copy all files and create directories\nif needed by replacing existing elements. (equivalent to a cp -R) ## Trait\nImplementations ### impl<'a>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#16\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/file/file_move.rs#16\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<'a>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Move](/docs/api/rust/tauri/struct.Move\n\"struct tauri::api::file::Move\")<'a> ### impl<'a>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a> ### impl<'a>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a> ### impl<'a>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Move](/docs/api/rust/tauri/struct.Move \"struct\ntauri::api::file::Move\")<'a> ### impl<'a>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Move](/docs/api/rust/tauri/struct.Move\n\"struct tauri::api::file::Move\")<'a> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/file/struct.Move"},{"id":"prose_docs_api_rust_tauri_api_http_enum_Body_md","title":"Enum tauri::api::http::Body","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::http::Body, ```rs #[non_exhaustive] pub enum Body {\nForm(FormBody), Json(Value), Text(String), Bytes(Vec), } ``` Expand description\nA body for the request. ## Variants (Non-exhaustive) This enum is marked as\nnon-exhaustive Non-exhaustive enums could have additional variants added in\nfuture. Therefore, when matching against variants of non-exhaustive enums, an\nextra wildcard arm must be added to account for any future variants.\n`Form(FormBody)` A multipart formdata body. `Json(Value)` A JSON body.\n`Text(String)` A text string body. `Bytes(Vec)` A byte array body. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Body](/docs/api/rust/tauri/enum.Body \"enum\ntauri::api::http::Body\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#228\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#228\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for [Body](/docs/api/rust/tauri/enum.Body\n\"enum\ntauri::api::http::Body\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#228\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#228\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Body](/docs/api/rust/tauri/enum.Body\n\"enum tauri::api::http::Body\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Body](/docs/api/rust/tauri/enum.Body \"enum\ntauri::api::http::Body\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Body](/docs/api/rust/tauri/enum.Body \"enum\ntauri::api::http::Body\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Body](/docs/api/rust/tauri/enum.Body \"enum\ntauri::api::http::Body\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Body](/docs/api/rust/tauri/enum.Body \"enum\ntauri::api::http::Body\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/enum.Body"},{"id":"prose_docs_api_rust_tauri_api_http_enum_FormPart_md","title":"Enum tauri::api::http::FormPart","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::http::FormPart, ```rs #[non_exhaustive] pub enum FormPart {\nFile(PathBuf), Text(String), Bytes(Vec), } ``` Expand description\n[`FormBody`](/docs/api/rust/tauri/struct.FormBody \"FormBody\") data types. ##\nVariants (Non-exhaustive) This enum is marked as non-exhaustive Non-exhaustive\nenums could have additional variants added in future. Therefore, when matching\nagainst variants of non-exhaustive enums, an extra wildcard arm must be added to\naccount for any future variants. `File(PathBuf)` A file path value.\n`Text(String)` A string value. `Bytes(Vec)` A byte array value. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [FormPart](/docs/api/rust/tauri/enum.FormPart \"enum\ntauri::api::http::FormPart\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#204\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#204\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[FormPart](/docs/api/rust/tauri/enum.FormPart \"enum\ntauri::api::http::FormPart\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#204\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#204\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[FormPart](/docs/api/rust/tauri/enum.FormPart \"enum tauri::api::http::FormPart\")\n### impl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [FormPart](/docs/api/rust/tauri/enum.FormPart\n\"enum tauri::api::http::FormPart\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [FormPart](/docs/api/rust/tauri/enum.FormPart \"enum\ntauri::api::http::FormPart\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [FormPart](/docs/api/rust/tauri/enum.FormPart \"enum\ntauri::api::http::FormPart\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[FormPart](/docs/api/rust/tauri/enum.FormPart \"enum tauri::api::http::FormPart\")\n## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/enum.FormPart"},{"id":"prose_docs_api_rust_tauri_api_http_enum_ResponseType_md","title":"Enum tauri::api::http::ResponseType","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::http::ResponseType, ```rs #[repr(u16)] #[non_exhaustive] pub\nenum ResponseType { Json, Text, Binary, } ``` Expand description The HTTP\nresponse type. ## Variants (Non-exhaustive) This enum is marked as\nnon-exhaustive Non-exhaustive enums could have additional variants added in\nfuture. Therefore, when matching against variants of non-exhaustive enums, an\nextra wildcard arm must be added to account for any future variants. `Json` Read\nthe response as JSON `Text` Read the response as text `Binary` Read the response\nas binary ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [ResponseType](/docs/api/rust/tauri/enum.ResponseType\n\"enum\ntauri::api::http::ResponseType\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<D>(deserializer:\nD) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\nD::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<S>(&self,\nserializer: S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\nS::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#190\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ResponseType](/docs/api/rust/tauri/enum.ResponseType\n\"enum tauri::api::http::ResponseType\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ResponseType](/docs/api/rust/tauri/enum.ResponseType\n\"enum tauri::api::http::ResponseType\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [ResponseType](/docs/api/rust/tauri/enum.ResponseType\n\"enum tauri::api::http::ResponseType\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/enum.ResponseType"},{"id":"prose_docs_api_rust_tauri_api_http_struct_Client_md","title":"Struct tauri::api::http::Client","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::Client, ```rs pub struct Client(_); ``` Expand\ndescription The HTTP client. ## Implementations ### impl\n[Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#77-131\n\"goto source code\") #### pub async fn\n[send](/docs/api/rust/tauri/about:blank#method.send)(&self, request:\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\")) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#82-130\n\"goto source code\") Executes an HTTP request The response will be transformed to\nString. If reading the response as binary, the byte array will be serialized\nusing [`serde_json`](https://docs.rs/serde_json/1.0.66/serde_json/index.html\n\"serde_json\"). ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#73\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#73\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Client](/docs/api/rust/tauri/struct.Client\n\"struct\ntauri::api::http::Client\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#73\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#73\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Client](/docs/api/rust/tauri/struct.Client \"struct tauri::api::http::Client\")\n### impl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Client](/docs/api/rust/tauri/struct.Client\n\"struct tauri::api::http::Client\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Client](/docs/api/rust/tauri/struct.Client\n\"struct tauri::api::http::Client\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.Client"},{"id":"prose_docs_api_rust_tauri_api_http_struct_ClientBuilder_md","title":"Struct tauri::api::http::ClientBuilder","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::ClientBuilder, ```rs pub struct ClientBuilder { pub\nmax_redirections: Option, pub connect_timeout: Option, } ``` Expand description\nThe builder of [`Client`](/docs/api/rust/tauri/struct.Client \"Client\"). ##\nFields `max_redirections: Option` Max number of redirections to follow.\n`connect_timeout: Option` Connect timeout in seconds for the request. ##\nImplementations ### impl\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#24-64\n\"goto source code\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)() ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#26-28 \"goto\nsource code\") Creates a new client builder with the default options. #### pub fn\n[max_redirections](/docs/api/rust/tauri/about:blank#method.max_redirections)(self,\nmax_redirections:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#31-34 \"goto\nsource code\") Sets the maximum number of redirections. #### pub fn\n[connect_timeout](/docs/api/rust/tauri/about:blank#method.connect_timeout)(self,\nconnect_timeout: [u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html))\n-> Self[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#37-40 \"goto\nsource code\") Sets the connection timeout. #### pub fn\n[build](/docs/api/rust/tauri/about:blank#method.build)(self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[Client](/docs/api/rust/tauri/struct.Client \"struct\ntauri::api::http::Client\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#44-46\n\"goto source code\") Builds the Client. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") #### fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#15\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ClientBuilder](/docs/api/rust/tauri/struct.ClientBuilder \"struct\ntauri::api::http::ClientBuilder\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.ClientBuilder"},{"id":"prose_docs_api_rust_tauri_api_http_struct_FormBody_md","title":"Struct tauri::api::http::FormBody","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::FormBody, ```rs pub struct FormBody(_); ``` Expand\ndescription Form body definition. ## Implementations ### impl\n[FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#220-225\n\"goto source code\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(data:\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"), [FormPart](/docs/api/rust/tauri/enum.FormPart\n\"enum tauri::api::http::FormPart\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#222-224 \"goto\nsource code\") Creates a new form body. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#217\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#217\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#217\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#217\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [FormBody](/docs/api/rust/tauri/struct.FormBody\n\"struct tauri::api::http::FormBody\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[FormBody](/docs/api/rust/tauri/struct.FormBody \"struct\ntauri::api::http::FormBody\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.FormBody"},{"id":"prose_docs_api_rust_tauri_api_http_struct_HttpRequestBuilder_md","title":"Struct tauri::api::http::HttpRequestBuilder","sections":["Examples","Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":", pub timeout: Option, pub response_type: Option, } ``` Expand description The\nbuilder for a HTTP request. ## Examples ```rs use tauri::api::http::{\nHttpRequestBuilder, ResponseType, ClientBuilder }; async fn run() { let client =\nClientBuilder::new() .max_redirections(3) .build() .unwrap(); let mut\nrequest_builder = HttpRequestBuilder::new(\"GET\", \"http://example.com\"); let\nrequest = request_builder.response_type(ResponseType::Text); if let Ok(response)\n= client.send(request).await { println!(\"got response\"); } else {\nprintln!(\"Something Happened!\"); } } ``` ## Fields `method: String` The request\nmethod (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS, CONNECT or TRACE) `url:\nString` The request URL `query: Option>` The request query params `headers:\nOption>` The request headers `body: Option` The request body `timeout: Option`\nTimeout for the whole request `response_type: Option` The response type\n(defaults to Json) ## Implementations ### impl\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#281-324\n\"goto source code\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(method: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, url: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#283-293 \"goto\nsource code\") Initializes a new instance of the HttpRequestrequest_builder. ####\npub fn [query](/docs/api/rust/tauri/about:blank#method.query)(self, query:\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#296-299 \"goto\nsource code\") Sets the request parameters. #### pub fn\n[headers](/docs/api/rust/tauri/about:blank#method.headers)(self, headers:\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"),\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#302-305 \"goto\nsource code\") Sets the request headers. #### pub fn\n[body](/docs/api/rust/tauri/about:blank#method.body)(self, body:\n[Body](/docs/api/rust/tauri/enum.Body \"enum tauri::api::http::Body\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#308-311 \"goto\nsource code\") Sets the request body. #### pub fn\n[timeout](/docs/api/rust/tauri/about:blank#method.timeout)(self, timeout:\n[u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html)) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#314-317 \"goto\nsource code\") Sets the general request timeout. #### pub fn\n[response_type](/docs/api/rust/tauri/about:blank#method.response_type)(self,\nresponse_type: [ResponseType](/docs/api/rust/tauri/enum.ResponseType \"enum\ntauri::api::http::ResponseType\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#320-323 \"goto\nsource code\") Sets the type of the response. Interferes with the way we read the\nresponse. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#262\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#262\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#262\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#262\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[HttpRequestBuilder](/docs/api/rust/tauri/struct.HttpRequestBuilder \"struct\ntauri::api::http::HttpRequestBuilder\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.HttpRequestBuilder"},{"id":"prose_docs_api_rust_tauri_api_http_struct_RawResponse_md","title":"Struct tauri::api::http::RawResponse","sections":["Fields ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::RawResponse, ```rs #[non_exhaustive] pub struct\nRawResponse { pub status: u16, pub data: Vec, } ``` Expand description A\nresponse with raw bytes. ## Fields (Non-exhaustive) This struct is marked as\nnon-exhaustive Non-exhaustive structs could have additional fields added in\nfuture. Therefore, non-exhaustive structs cannot be constructed in external\ncrates using the traditional `Struct { .. }` syntax; cannot be matched against\nwithout a wildcard `..`; and struct update syntax will not work. `status: u16`\nResponse status code. `data: Vec` Response bytes. ## Trait Implementations ###\nimpl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [RawResponse](/docs/api/rust/tauri/struct.RawResponse\n\"struct\ntauri::api::http::RawResponse\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#387\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#387\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[RawResponse](/docs/api/rust/tauri/struct.RawResponse \"struct\ntauri::api::http::RawResponse\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [RawResponse](/docs/api/rust/tauri/struct.RawResponse\n\"struct tauri::api::http::RawResponse\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [RawResponse](/docs/api/rust/tauri/struct.RawResponse\n\"struct tauri::api::http::RawResponse\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [RawResponse](/docs/api/rust/tauri/struct.RawResponse\n\"struct tauri::api::http::RawResponse\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[RawResponse](/docs/api/rust/tauri/struct.RawResponse \"struct\ntauri::api::http::RawResponse\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.RawResponse"},{"id":"prose_docs_api_rust_tauri_api_http_struct_Response_md","title":"Struct tauri::api::http::Response","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::Response, ```rs pub struct Response(_, _, _); ```\nExpand description The HTTP response. ## Implementations ### impl\n[Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#335-383\n\"goto source code\") #### pub async fn\n[bytes](/docs/api/rust/tauri/about:blank#method.bytes)(self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[RawResponse](/docs/api/rust/tauri/struct.RawResponse\n\"struct\ntauri::api::http::RawResponse\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#337-344\n\"goto source code\") Reads the response as raw bytes. #### pub async fn\n[read](/docs/api/rust/tauri/about:blank#method.read)(self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::api::Result\")<[ResponseData](/docs/api/rust/tauri/struct.ResponseData\n\"struct\ntauri::api::http::ResponseData\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#347-382\n\"goto source code\") Reads the response and returns its info. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#332\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#332\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Response](/docs/api/rust/tauri/struct.Response\n\"struct tauri::api::http::Response\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::api::http::Response\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.Response"},{"id":"prose_docs_api_rust_tauri_api_http_struct_ResponseData_md","title":"Struct tauri::api::http::ResponseData","sections":["Fields ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::api::http::ResponseData, ```rs #[non_exhaustive] pub struct\nResponseData { pub url: String, pub status: u16, pub headers: HashMap, pub data:\nValue, } ``` Expand description The response data. ## Fields (Non-exhaustive)\nThis struct is marked as non-exhaustive Non-exhaustive structs could have\nadditional fields added in future. Therefore, non-exhaustive structs cannot be\nconstructed in external crates using the traditional `Struct { .. }` syntax;\ncannot be matched against without a wildcard `..`; and struct update syntax will\nnot work. `url: String` Response URL. Useful if it followed redirects. `status:\nu16` Response status code. `headers: HashMap` Response headers. `data: Value`\nResponse data. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ResponseData](/docs/api/rust/tauri/struct.ResponseData\n\"struct\ntauri::api::http::ResponseData\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#396\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#396\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[ResponseData](/docs/api/rust/tauri/struct.ResponseData \"struct\ntauri::api::http::ResponseData\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#396\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(&self,\n\\_\\_serializer: \\_\\_S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<\\_\\_S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\n\\_\\_S::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/http.rs#396\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ResponseData](/docs/api/rust/tauri/struct.ResponseData \"struct\ntauri::api::http::ResponseData\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ResponseData](/docs/api/rust/tauri/struct.ResponseData\n\"struct tauri::api::http::ResponseData\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ResponseData](/docs/api/rust/tauri/struct.ResponseData\n\"struct tauri::api::http::ResponseData\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[ResponseData](/docs/api/rust/tauri/struct.ResponseData \"struct\ntauri::api::http::ResponseData\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ResponseData](/docs/api/rust/tauri/struct.ResponseData \"struct\ntauri::api::http::ResponseData\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/api/http/struct.ResponseData"},{"id":"prose_docs_api_rust_tauri_api_path_enum_BaseDirectory_md","title":"Enum tauri::api::path::BaseDirectory","sections":["Variants ","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::api::path::BaseDirectory, ```rs #[repr(u16)] #[non_exhaustive] pub\nenum BaseDirectory { Show variants Audio, Cache, Config, Data, LocalData,\nDesktop, Document, Download, Executable, Font, Home, Picture, Public, Runtime,\nTemplate, Video, Resource, App, Current, } ``` Expand description A base\ndirectory to be used in [`resolve_path`](/docs/api/rust/tauri/fn.resolve_path\n\"resolve_path\"). The base directory is the optional root of a file system\noperation. If informed by the API call, all paths will be relative to the path\nof the given directory. For more information, check the [`dirs_next`\ndocumentation](https://docs.rs/dirs_next/). ## Variants (Non-exhaustive) This\nenum is marked as non-exhaustive Non-exhaustive enums could have additional\nvariants added in future. Therefore, when matching against variants of\nnon-exhaustive enums, an extra wildcard arm must be added to account for any\nfuture variants. `Audio` The Audio directory. `Cache` The Cache directory.\n`Config` The Config directory. `Data` The Data directory. `LocalData` The\nLocalData directory. `Desktop` The Desktop directory. `Document` The Document\ndirectory. `Download` The Download directory. `Executable` The Executable\ndirectory. `Font` The Font directory. `Home` The Home directory. `Picture` The\nPicture directory. `Public` The Public directory. `Runtime` The Runtime\ndirectory. `Template` The Template directory. `Video` The Video directory.\n`Resource` The Resource directory. `App` The default App config directory.\nResolves to\n[`BaseDirectory::Config`](/docs/api/rust/tauri/enum.BaseDirectory#variant.Config\n\"BaseDirectory::Config\"). `Current` The current working directory. ## Trait\nImplementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory\n\"enum\ntauri::api::path::BaseDirectory\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<D>(deserializer:\nD) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\nD::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<S>(&self,\nserializer: S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\nS::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/path.rs#22\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory\n\"enum tauri::api::path::BaseDirectory\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory\n\"enum tauri::api::path::BaseDirectory\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[BaseDirectory](/docs/api/rust/tauri/enum.BaseDirectory \"enum\ntauri::api::path::BaseDirectory\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/api/path/enum.BaseDirectory"},{"id":"prose_docs_api_rust_tauri_api_path_fn_app_dir_md","title":"Fn tauri::api::path::app_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::app_dir, ```rs pub fn app_dir(config: &Config) ->\nOption ``` Expand description Returns the path to the suggested directory for\nyour app config files.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.app_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_audio_dir_md","title":"Fn tauri::api::path::audio_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::audio_dir, ```rs pub fn audio_dir() -> Option ```\nExpand description Returns the path to the user’s audio directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.audio_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_cache_dir_md","title":"Fn tauri::api::path::cache_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::cache_dir, ```rs pub fn cache_dir() -> Option ```\nExpand description Returns the path to the user’s cache directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.cache_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_config_dir_md","title":"Fn tauri::api::path::config_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::config_dir, ```rs pub fn config_dir() -> Option ```\nExpand description Returns the path to the user’s config directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.config_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_data_dir_md","title":"Fn tauri::api::path::data_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::data_dir, ```rs pub fn data_dir() -> Option ```\nExpand description Returns the path to the user’s data directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.data_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_desktop_dir_md","title":"Fn tauri::api::path::desktop_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::desktop_dir, ```rs pub fn desktop_dir() -> Option\n``` Expand description Returns the path to the user’s desktop directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.desktop_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_document_dir_md","title":"Fn tauri::api::path::document_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::document_dir, ```rs pub fn document_dir() -> Option\n``` Expand description Returns the path to the user’s document directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.document_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_download_dir_md","title":"Fn tauri::api::path::download_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::download_dir, ```rs pub fn download_dir() -> Option\n``` Expand description Returns the path to the user’s download directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.download_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_executable_dir_md","title":"Fn tauri::api::path::executable_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::executable_dir, ```rs pub fn executable_dir() ->\nOption ``` Expand description Returns the path to the user’s executable\ndirectory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.executable_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_font_dir_md","title":"Fn tauri::api::path::font_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::font_dir, ```rs pub fn font_dir() -> Option ```\nExpand description Returns the path to the user’s font directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.font_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_home_dir_md","title":"Fn tauri::api::path::home_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::home_dir, ```rs pub fn home_dir() -> Option ```\nExpand description Returns the path to the user’s home directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.home_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_local_data_dir_md","title":"Fn tauri::api::path::local_data_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::local_data_dir, ```rs pub fn local_data_dir() ->\nOption ``` Expand description Returns the path to the user’s local data\ndirectory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.local_data_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_picture_dir_md","title":"Fn tauri::api::path::picture_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::picture_dir, ```rs pub fn picture_dir() -> Option\n``` Expand description Returns the path to the user’s picture directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.picture_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_public_dir_md","title":"Fn tauri::api::path::public_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::public_dir, ```rs pub fn public_dir() -> Option ```\nExpand description Returns the path to the user’s public directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.public_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_resolve_path_md","title":"Fn tauri::api::path::resolve_path","sections":["Example"],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::resolve_path, ```rs pub fn resolve_path>(\n    config: &Config,     package_info: &PackageInfo,     path: P,     dir:\nOption ) -> Result ``` Expand description Resolves the path with the optional\nbase directory. ## Example ```rs use tauri::{api::path::{resolve_path,\nBaseDirectory}, PackageInfo}; // we use the default config and a mock\nPackageInfo, but in an actual app you should get the // Config created from\n`tauri.conf.json` and the app's PackageInfo instance. let path = resolve_path(\n&Default::default(), &PackageInfo { name: \"app\".into(), version: \"1.0.0\".into(),\n}, \"path/to/something\", Some(BaseDirectory::Config) ).expect(\"failed to resolve\npath\"); // path is equal to \"/home/${whoami}/.config/path/to/something\" on Linux\n```","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.resolve_path"},{"id":"prose_docs_api_rust_tauri_api_path_fn_resource_dir_md","title":"Fn tauri::api::path::resource_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::resource_dir, ```rs pub fn\nresource_dir(package_info: &PackageInfo) -> Option ``` Expand description\nReturns the path to the resource directory of this app.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.resource_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_runtime_dir_md","title":"Fn tauri::api::path::runtime_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::runtime_dir, ```rs pub fn runtime_dir() -> Option\n``` Expand description Returns the path to the user’s runtime directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.runtime_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_template_dir_md","title":"Fn tauri::api::path::template_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::template_dir, ```rs pub fn template_dir() -> Option\n``` Expand description Returns the path to the user’s template directory.","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.template_dir"},{"id":"prose_docs_api_rust_tauri_api_path_fn_video_dir_md","title":"Fn tauri::api::path::video_dir","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::path::video_dir, ```rs pub fn video_dir() -> Option ```\nExpand description Returns the path to the user’s video dir","url":"https://tauri.studio/docs/api/rust/tauri/api/path/fn.video_dir"},{"id":"prose_docs_api_rust_tauri_api_process_fn_current_binary_md","title":"Fn tauri::api::process::current_binary","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::process::current_binary, ```rs pub fn current_binary() ->\nOption ``` Expand description Gets the current binary.","url":"https://tauri.studio/docs/api/rust/tauri/api/process/fn.current_binary"},{"id":"prose_docs_api_rust_tauri_api_process_fn_restart_md","title":"Fn tauri::api::process::restart","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::process::restart, ```rs pub fn restart() ``` Expand\ndescription Restarts the process.","url":"https://tauri.studio/docs/api/rust/tauri/api/process/fn.restart"},{"id":"prose_docs_api_rust_tauri_api_rpc_fn_format_callback_md","title":"Fn tauri::api::rpc::format_callback","sections":["Examples"],"subSections":[],"code":["rs"],"text":"# Function tauri::api::rpc::format_callback, ```rs pub fn format_callback>(\n    function_name: S,     arg: &T ) -> Result ``` Expand description Formats a\nfunction name and argument to be evaluated as callback. This will serialize\nprimitive JSON types (e.g. booleans, strings, numbers, etc.) as JavaScript\nliterals, but will serialize arrays and objects whose serialized JSON string is\nsmaller than 1 GB and larger than 10 KiB with `JSON.parse('...')`. See\n[json-parse-benchmark](https://github.com/GoogleChromeLabs/json-parse-benchmark).\n## Examples - With string literals: ```rs use tauri::api::rpc::format_callback;\n// callback with a string argument let cb =\nformat_callback(\"callback-function-name\", &\"the string response\").unwrap();\nassert!(cb.contains(r#\"window[\"callback-function-name\"](\"the string\nresponse\")\"#)); ``` - With types implement\n[`serde::Serialize`](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html\n\"serde::Serialize\"): ```rs use tauri::api::rpc::format_callback; use\nserde::Serialize; // callback with large JSON argument #[derive(Serialize)]\nstruct MyResponse { value: String } let cb = format_callback(\n\"callback-function-name\", &MyResponse { value: String::from_utf8(vec![b'X';\n10_240]).unwrap() }).expect(\"failed to serialize\");\nassert!(cb.contains(r#\"window[\"callback-function-name\"](JSON.parse('{\"value\":\"XXXXXXXXX\"#));\n```","url":"https://tauri.studio/docs/api/rust/tauri/api/rpc/fn.format_callback"},{"id":"prose_docs_api_rust_tauri_api_rpc_fn_format_callback_result_md","title":"Fn tauri::api::rpc::format_callback_result","sections":["Examples"],"subSections":[],"code":["rs"],"text":"# Function tauri::api::rpc::format_callback_result, ```rs pub fn\nformat_callback_result(     result: Result,     success_callback: impl AsRef,\n    error_callback: impl AsRef ) -> Result ``` Expand description Formats a\nResult type to its Promise response. Useful for Promises handling. If the Result\n`is_ok()`, the callback will be the `success_callback` function name and the\nargument will be the Ok value. If the Result `is_err()`, the callback will be\nthe `error_callback` function name and the argument will be the Err value. -\n`result` the Result to check - `success_callback` the function name of the Ok\ncallback. Usually the `resolve` of the JS Promise. - `error_callback` the\nfunction name of the Err callback. Usually the `reject` of the JS Promise. Note\nthat the callback strings are automatically generated by the `invoke` helper. ##\nExamples ```rs use tauri::api::rpc::format_callback_result; let res: Result =\nOk(5); let cb = format_callback_result(res, \"success_cb\",\n\"error_cb\").expect(\"failed to format\");\nassert!(cb.contains(r#\"window[\"success_cb\"](5)\"#)); let res: Result<&str, &str>\n= Err(\"error message here\"); let cb = format_callback_result(res, \"success_cb\",\n\"error_cb\").expect(\"failed to format\");\nassert!(cb.contains(r#\"window[\"error_cb\"](\"error message here\")\"#)); ```","url":"https://tauri.studio/docs/api/rust/tauri/api/rpc/fn.format_callback_result"},{"id":"prose_docs_api_rust_tauri_api_version_fn_compare_md","title":"Fn tauri::api::version::compare","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::compare, ```rs pub fn compare(first: &str,\nsecond: &str) -> Result ``` Expand description Compare two semver versions","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.compare"},{"id":"prose_docs_api_rust_tauri_api_version_fn_is_compatible_md","title":"Fn tauri::api::version::is_compatible","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::is_compatible, ```rs pub fn is_compatible(first:\n&str, second: &str) -> Result ``` Expand description Check if the “second”\nsemver is compatible with the “first”","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.is_compatible"},{"id":"prose_docs_api_rust_tauri_api_version_fn_is_greater_md","title":"Fn tauri::api::version::is_greater","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::is_greater, ```rs pub fn is_greater(current:\n&str, other: &str) -> Result ``` Expand description Check if a version is\ngreater than the current","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.is_greater"},{"id":"prose_docs_api_rust_tauri_api_version_fn_is_major_md","title":"Fn tauri::api::version::is_major","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::is_major, ```rs pub fn is_major(current: &str,\nother: &str) -> Result ``` Expand description Check if a the “other” version is\na major bump from the “current”","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.is_major"},{"id":"prose_docs_api_rust_tauri_api_version_fn_is_minor_md","title":"Fn tauri::api::version::is_minor","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::is_minor, ```rs pub fn is_minor(current: &str,\nother: &str) -> Result ``` Expand description Check if a the “other” version is\na minor bump from the “current”","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.is_minor"},{"id":"prose_docs_api_rust_tauri_api_version_fn_is_patch_md","title":"Fn tauri::api::version::is_patch","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::api::version::is_patch, ```rs pub fn is_patch(current: &str,\nother: &str) -> Result ``` Expand description Check if a the “other” version is\na patch bump from the “current”","url":"https://tauri.studio/docs/api/rust/tauri/api/version/fn.is_patch"},{"id":"prose_docs_api_rust_tauri_async_runtime_fn_block_on_md","title":"Fn tauri::async_runtime::block_on","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::async_runtime::block_on, ```rs pub fn block_on(task: F) ->\nF::Output ``` Expand description Runs a future to completion on runtime.","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/fn.block_on"},{"id":"prose_docs_api_rust_tauri_async_runtime_fn_channel_md","title":"Fn tauri::async_runtime::channel","sections":["Panics","Examples"],"subSections":[],"code":["rs"],"text":"# Function tauri::async_runtime::channel, ```rs pub fn channel(buffer: usize) ->\n(Sender, Receiver) ``` Expand description Creates a bounded mpsc channel for\ncommunicating between asynchronous tasks with backpressure. The channel will\nbuffer up to the provided number of messages. Once the buffer is full, attempts\nto send new messages will wait until a message is received from the channel. The\nprovided buffer capacity must be at least 1. All data sent on `Sender` will\nbecome available on `Receiver` in the same order as it was sent. The `Sender`\ncan be cloned to `send` to the same channel from multiple code locations. Only\none `Receiver` is supported. If the `Receiver` is disconnected while trying to\n`send`, the `send` method will return a `SendError`. Similarly, if `Sender` is\ndisconnected while trying to `recv`, the `recv` method will return `None`. ##\nPanics Panics if the buffer capacity is 0. ## Examples ```rs use\ntokio::sync::mpsc; #[tokio::main] async fn main() { let (tx, mut rx) =\nmpsc::channel(100); tokio::spawn(async move { for i in 0..10 { if let Err(_) =\ntx.send(i).await { println!(\"receiver dropped\"); return; } } }); while let\nSome(i) = rx.recv().await { println!(\"got = {}\", i); } } ```","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/fn.channel"},{"id":"prose_docs_api_rust_tauri_async_runtime_fn_handle_md","title":"Fn tauri::async_runtime::handle","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::async_runtime::handle, ```rs pub fn handle() -> impl\nRuntimeHandle ``` Expand description Returns a handle of the async runtime.","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/fn.handle"},{"id":"prose_docs_api_rust_tauri_async_runtime_fn_spawn_md","title":"Fn tauri::async_runtime::spawn","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::async_runtime::spawn, ```rs pub fn spawn(task: F) ->\nJoinHandleⓘ Notable traits for JoinHandle impl Future for JoinHandle type Output\n= Result; where     F: Future + Send + 'static,     F::Output: Send + 'static, \n``` Expand description Spawns a future onto the runtime.","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/fn.spawn"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_Handle_md","title":"Struct tauri::async_runtime::Handle","sections":["Implementations","Panic","Examples","Examples","Examples","If the runtime has been shut down","Panics","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::Handle, ```rs pub struct Handle { /* fields\nomitted */ } ``` Expand description Handle to the runtime. The handle is\ninternally reference-counted and can be freely cloned. A handle can be obtained\nusing the\n[`Runtime::handle`](/docs/api/rust/tauri/crate::runtime::Runtime::handle())\nmethod. ## Implementations ### impl [Handle](/docs/api/rust/tauri/struct.Handle\n\"struct tauri::async_runtime::Handle\") #### pub fn\n[enter](/docs/api/rust/tauri/about:blank#method.enter)(&self) -> EnterGuard<'\\_>\nEnter the runtime context. This allows you to construct types that must have an\nexecutor available on creation such as\n[`Sleep`](/docs/api/rust/tauri/struct@crate::time::Sleep) or\n[`TcpStream`](/docs/api/rust/tauri/struct@crate::net::TcpStream). It will also\nallow you to call methods such as\n[`tokio::spawn`](/docs/api/rust/tauri/fn@crate::spawn). #### pub fn\n[current](/docs/api/rust/tauri/about:blank#method.current)() ->\n[Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") Returns a `Handle` view over the currently\nrunning `Runtime` ## Panic This will panic if called outside the context of a\nTokio runtime. That means that you must call this on one of the threads **being\nrun by the runtime**. Calling this from within a thread created by\n`std::thread::spawn` (for example) will cause a panic. ## Examples This can be\nused to obtain the handle of the surrounding runtime from an async block or\nfunction running on that runtime. ```rs use tokio::runtime::Handle; // Inside an\nasync block or function. let handle = Handle::current(); handle.spawn(async {\nprintln!(\"now running in the existing Runtime\"); }); thread::spawn(move || { //\nNotice that the handle is created outside of this thread and then moved in\nhandle.spawn(async { /* ... */ }) // This next line would cause a panic // let\nhandle2 = Handle::current(); }); ``` #### pub fn\n[try_current](/docs/api/rust/tauri/about:blank#method.try_current)() ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\"), TryCurrentError> Returns a Handle view over the\ncurrently running Runtime Returns an error if no Runtime has been started\nContrary to `current`, this never panics #### pub fn\n[spawn](/docs/api/rust/tauri/about:blank#method.spawn)<F>(&self, future: F) ->\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<<F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>ⓘNotable traits for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T>`impl Future for JoinHandletype Output\n= Result;` where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static, <F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), <F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"): 'static, Spawn a future onto the\nTokio runtime. This spawns the given future onto the runtime’s executor, usually\na thread pool. The thread pool is then responsible for polling the future until\nit completes. See [module level](/docs/api/rust/tauri/index) documentation for\nmore details. ## Examples ```rs use tokio::runtime::Runtime; // Create the\nruntime let rt = Runtime::new().unwrap(); // Get a handle from this runtime let\nhandle = rt.handle(); // Spawn a future onto the runtime using the handle\nhandle.spawn(async { println!(\"now running on a worker thread\"); }); ``` ####\npub fn\n[spawn_blocking](/docs/api/rust/tauri/about:blank#method.spawn_blocking)<F,\nR>(&self, func: F) -> [JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle\n\"struct tauri::async_runtime::TokioJoinHandle\")<R>ⓘNotable traits for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T>`impl Future for JoinHandletype Output\n= Result;` where R:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static, F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")() -> R +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static, Run the provided function on an executor\ndedicated to blocking operations. ## Examples ```rs use tokio::runtime::Runtime;\n// Create the runtime let rt = Runtime::new().unwrap(); // Get a handle from\nthis runtime let handle = rt.handle(); // Spawn a blocking function onto the\nruntime using the handle handle.spawn_blocking(|| { println!(\"now running on a\nworker thread\"); }); ``` #### pub fn\n[block_on](/docs/api/rust/tauri/about:blank#method.block_on)<F>(&self, future:\nF) -> <F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\") where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\"), Run a future to completion on this\n`Handle`’s associated `Runtime`. This runs the given future on the current\nthread, blocking until it is complete, and yielding its resolved result. Any\ntasks or timers which the future spawns internally will be executed on the\nruntime. When this is used on a `current_thread` runtime, only the\n[`Runtime::block_on`](/docs/api/rust/tauri/fn@crate::runtime::Runtime::block_on)\nmethod can drive the IO and timer drivers, but the `Handle::block_on` method\ncannot drive them. This means that, when using this method on a current_thread\nruntime, anything that relies on IO or timers will not work unless there is\nanother thread currently calling\n[`Runtime::block_on`](/docs/api/rust/tauri/fn@crate::runtime::Runtime::block_on)\non the same runtime. ## If the runtime has been shut down If the `Handle`’s\nassociated `Runtime` has been shut down (through\n[`Runtime::shutdown_background`](/docs/api/rust/tauri/fn@crate::runtime::Runtime::shutdown_background),\n[`Runtime::shutdown_timeout`](/docs/api/rust/tauri/fn@crate::runtime::Runtime::shutdown_timeout),\nor by dropping it) and `Handle::block_on` is used it might return an error or\npanic. Specifically IO resources will return an error and timers will panic.\nRuntime independent futures will run as normal. ## Panics This function panics\nif the provided future panics, if called within an asynchronous execution\ncontext, or if a timer future is executed on a runtime that has been shut down.\n## Examples ```rs use tokio::runtime::Runtime; // Create the runtime let rt =\nRuntime::new().unwrap(); // Get a handle from this runtime let handle =\nrt.handle(); // Execute the future, blocking the current thread until completion\nhandle.block_on(async { println!(\"hello\"); }); ``` Or using `Handle::current`:\n```rs use tokio::runtime::Handle; #[tokio::main] async fn main () { let handle =\nHandle::current(); std::thread::spawn(move || { // Using Handle::block_on to run\nasync code in the new thread. handle.block_on(async { println!(\"hello\"); }); });\n} ``` ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Handle](/docs/api/rust/tauri/struct.Handle\n\"struct tauri::async_runtime::Handle\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [RuntimeHandle](/docs/api/rust/tauri/trait.RuntimeHandle \"trait\ntauri::async_runtime::RuntimeHandle\") for\n[Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#60-72\n\"goto source code\") #### fn\n[spawn](/docs/api/rust/tauri/trait.RuntimeHandle#tymethod.spawn)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<F::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>ⓘNotable traits for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T>`impl Future for JoinHandletype Output =\nResult;` where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static,\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#61-67\n\"goto source code\") Spawns a future onto the runtime. #### fn\n[block_on](/docs/api/rust/tauri/trait.RuntimeHandle#tymethod.block_on)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type\ncore::future::future::Future::Output\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#69-71\n\"goto source code\") Runs a future to completion on runtime. ## Auto Trait\nImplementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Handle](/docs/api/rust/tauri/struct.Handle\n\"struct tauri::async_runtime::Handle\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.Handle"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_JoinHandle_md","title":"Struct tauri::async_runtime::JoinHandle","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::JoinHandle, ```rs pub struct JoinHandle(_); ```\nExpand description An owned permission to join on a task (await its\ntermination). ## Trait Implementations ### impl<T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [JoinHandle](/docs/api/rust/tauri/struct.JoinHandle\n\"struct\ntauri::async_runtime::JoinHandle\")<T>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#35\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#35\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#38-46\n\"goto source code\") #### type\n[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output)\n= [Result](/docs/api/rust/tauri/../type.Result \"type tauri::Result\")<T> The type\nof value produced on completion. #### fn\n[poll](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll)(self:\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self>,\ncx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type\ncore::future::future::Future::Output\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#40-45\n\"goto source code\") Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll)\n## Auto Trait Implementations ### impl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T> ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [JoinHandle](/docs/api/rust/tauri/struct.JoinHandle\n\"struct tauri::async_runtime::JoinHandle\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [JoinHandle](/docs/api/rust/tauri/struct.JoinHandle\n\"struct tauri::async_runtime::JoinHandle\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [JoinHandle](/docs/api/rust/tauri/struct.JoinHandle\n\"struct tauri::async_runtime::JoinHandle\")<T> ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<F> FutureExt for F where\nF:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[poll](/docs/api/rust/tauri/about:blank#method.poll)(&mut self, cx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience for calling\n[`Future::poll()`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll\n\"Future::poll()\") on\n`!`[`Unpin`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html\n\"Unpin\") types. #### fn\n[or](/docs/api/rust/tauri/about:blank#method.or)<F>(self, other: F) -> Or<Self,\nF> where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Returns the result of `self` or\n`other` future, preferring `self` if both are ready. [Read\nmore](/docs/api/rust/tauri/about:blank#method.or) #### fn\n[race](/docs/api/rust/tauri/about:blank#method.race)<F>(self, other: F) ->\nRace<Self, F> where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Returns the result of `self` or\n`other` future, with no preference if both are ready. [Read\nmore](/docs/api/rust/tauri/about:blank#method.race) #### fn\n[catch_unwind](/docs/api/rust/tauri/about:blank#method.catch_unwind)(self) ->\nCatchUnwind<Self> where Self:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), Catches panics while polling the future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.catch_unwind) #### fn\n[boxed](/docs/api/rust/tauri/about:blank#method.boxed)<'a>( self ) ->\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'a, Boxes the future and changes its type to `dyn Future\n+ Send + 'a`. [Read more](/docs/api/rust/tauri/about:blank#method.boxed) #### fn\n[boxed_local](/docs/api/rust/tauri/about:blank#method.boxed_local)<'a>( self )\n-> [Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a,\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self: 'a, Boxes the future and changes its type\nto `dyn Future + 'a`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.boxed_local) ### impl<T> FutureExt\nfor T where T:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[map](/docs/api/rust/tauri/about:blank#method.map)<U, F>(self, f: F) ->\nMap<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")) -> U, Map this future’s output to\na different type, returning a new future of the resulting type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map) #### fn\n[map_into](/docs/api/rust/tauri/about:blank#method.map_into)<U>(self) ->\nMapInto<Self, U> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U>, Map this future’s output to a different type,\nreturning a new future of the resulting type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_into) #### fn\n[then](/docs/api/rust/tauri/about:blank#method.then)<Fut, F>(self, f: F) ->\nThen<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")) -> Fut, Fut:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\"), Chain on a computation for when a future\nfinished, passing the result of the future to the provided closure `f`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.then) #### fn\n[left_future](/docs/api/rust/tauri/about:blank#method.left_future)<B>(self) ->\nEither<Self, B> where B:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Wrap this future in an `Either`\nfuture, making it the left-hand variant of that `Either`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.left_future) #### fn\n[right_future](/docs/api/rust/tauri/about:blank#method.right_future)<A>(self) ->\nEither<A, Self> where A:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Wrap this future in an `Either`\nfuture, making it the right-hand variant of that `Either`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.right_future) #### fn\n[into_stream](/docs/api/rust/tauri/about:blank#method.into_stream)(self) ->\nIntoStream<Self> Convert this future into a single element stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.into_stream) #### fn\n[flatten](/docs/api/rust/tauri/about:blank#method.flatten)(self) ->\nFlatten<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\"), Flatten the execution of this future when\nthe output of this future is itself another future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten) #### fn\n[flatten_stream](/docs/api/rust/tauri/about:blank#method.flatten_stream)(self)\n-> FlattenStream<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"): Stream, Flatten the execution of\nthis future when the successful result of this future is a stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten_stream) #### fn\n[fuse](/docs/api/rust/tauri/about:blank#method.fuse)(self) -> Fuse<Self> Fuse a\nfuture such that `poll` will never again be called once it has completed. This\nmethod can be used to turn any `Future` into a `FusedFuture`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.fuse) #### fn\n[inspect](/docs/api/rust/tauri/about:blank#method.inspect)<F>(self, f: F) ->\nInspect<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(&Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")), Do something with the output of a\nfuture before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect) #### fn\n[catch_unwind](/docs/api/rust/tauri/about:blank#method.catch_unwind)(self) ->\nCatchUnwind<Self> where Self:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), Catches unwinding panics while polling the\nfuture. [Read more](/docs/api/rust/tauri/about:blank#method.catch_unwind) ####\nfn [shared](/docs/api/rust/tauri/about:blank#method.shared)(self) ->\nShared<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), Create a cloneable handle to this future where all handles\nwill resolve to the same result. [Read\nmore](/docs/api/rust/tauri/about:blank#method.shared) #### fn\n[remote_handle](/docs/api/rust/tauri/about:blank#method.remote_handle)(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)Remote<Self>,\nRemoteHandle<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type\ncore::future::future::Future::Output\")>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nTurn this future into a future that yields `()` on completion and sends its\noutput to another future on a separate task. [Read\nmore](/docs/api/rust/tauri/about:blank#method.remote_handle) #### fn\n[boxed](/docs/api/rust/tauri/about:blank#method.boxed)<'a>( self ) ->\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'a, Wrap the future in a Box, pinning it. [Read\nmore](/docs/api/rust/tauri/about:blank#method.boxed) #### fn\n[boxed_local](/docs/api/rust/tauri/about:blank#method.boxed_local)<'a>( self )\n-> [Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a,\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self: 'a, Wrap the future in a Box, pinning it.\n[Read more](/docs/api/rust/tauri/about:blank#method.boxed_local) #### fn\n[unit_error](/docs/api/rust/tauri/about:blank#method.unit_error)(self) ->\nUnitError<Self> Turns a\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html)\ninto a [`TryFuture](/docs/api/rust/tauri/futures_core::future::TryFuture). [Read\nmore](/docs/api/rust/tauri/about:blank#method.unit_error) #### fn\n[never_error](/docs/api/rust/tauri/about:blank#method.never_error)(self) ->\nNeverError<Self> Turns a\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html)\ninto a [`TryFuture](/docs/api/rust/tauri/futures_core::future::TryFuture). [Read\nmore](/docs/api/rust/tauri/about:blank#method.never_error) #### fn\n[poll_unpin](/docs/api/rust/tauri/about:blank#method.poll_unpin)(&mut self, cx:\n&mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience for calling `Future::poll` on `Unpin`\nfuture types. #### fn\n[now_or_never](/docs/api/rust/tauri/about:blank#method.now_or_never)(self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> Evaluates and consumes the future,\nreturning the resulting output if the future is ready after the first call to\n`Future::poll`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.now_or_never) ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<F>\n[IntoFuture](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html\n\"trait core::future::into_future::IntoFuture\") for F where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#20-27\n\"goto source code\") #### type\n[Output](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Output)\n= <F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\") 🔬 This is a nightly-only\nexperimental API. (`into_future`) The output that the future will produce on\ncompletion. #### type\n[Future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future)\n= F 🔬 This is a nightly-only experimental API. (`into_future`) Which kind of\nfuture are we turning this into? #### pub fn\n[into_future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#tymethod.into_future)(self)\n-> <F as\n[IntoFuture](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html\n\"trait\ncore::future::into_future::IntoFuture\")>::[Future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future\n\"type\ncore::future::into_future::IntoFuture::Future\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#24\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`into_future`)\nCreates a future from a value. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<F, T, E> TryFuture for F\nwhere F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, E>> +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### type\n[Ok](/docs/api/rust/tauri/about:blank#associatedtype.Ok) = T The type of\nsuccessful values yielded by this future #### type\n[Error](/docs/api/rust/tauri/about:blank#associatedtype.Error) = E The type of\nfailures yielded by this future #### pub fn\n[try_poll](/docs/api/rust/tauri/about:blank#tymethod.try_poll)( self:\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)F>,\ncx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_> ) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<<F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> Poll this `TryFuture` as if it\nwere a `Future`. [Read more](/docs/api/rust/tauri/about:blank#tymethod.try_poll)\n### impl<Fut> TryFutureExt for Fut where Fut: TryFuture +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[flatten_sink](/docs/api/rust/tauri/about:blank#method.flatten_sink)<Item>(self)\n-> FlattenSink<Self, Self::Ok> where Self::Ok: Sink<Item>, <Self::Ok as\nSink<Item>>::Error == Self::Error, Flattens the execution of this future when\nthe successful result of this future is a \\[`Sink`]. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten_sink) #### fn\n[map_ok](/docs/api/rust/tauri/about:blank#method.map_ok)<T, F>(self, f: F) ->\nMapOk<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> T, Maps this future’s success\nvalue to a different value. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_ok) #### fn\n[map_ok_or_else](/docs/api/rust/tauri/about:blank#method.map_ok_or_else)<T, E,\nF>(self, e: E, f: F) -> MapOkOrElse<Self, F, E> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> T, E:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> T, Maps this future’s\nsuccess value to a different value, and permits for error handling resulting in\nthe same type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_ok_or_else) #### fn\n[map_err](/docs/api/rust/tauri/about:blank#method.map_err)<E, F>(self, f: F) ->\nMapErr<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> E, Maps this future’s error\nvalue to a different value. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_err) #### fn\n[err_into](/docs/api/rust/tauri/about:blank#method.err_into)<E>(self) ->\nErrInto<Self, E> where Self::Error:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<E>, Maps this future’s\n[`Error`](/docs/api/rust/tauri/tryfuture::Error) to a new error type using the\n[`Into`](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html) trait.\n[Read more](/docs/api/rust/tauri/about:blank#method.err_into) #### fn\n[ok_into](/docs/api/rust/tauri/about:blank#method.ok_into)<U>(self) ->\nOkInto<Self, U> where Self::Ok:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U>, Maps this future’s\n[`Ok`](/docs/api/rust/tauri/tryfuture::Ok) to a new type using the\n[`Into`](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html) trait.\n[Read more](/docs/api/rust/tauri/about:blank#method.ok_into) #### fn\n[and_then](/docs/api/rust/tauri/about:blank#method.and_then)<Fut, F>(self, f: F)\n-> AndThen<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> Fut, Fut: TryFuture<Error =\nSelf::Error>, Executes another future after this one resolves successfully. The\nsuccess value is passed to a closure to create this subsequent future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.and_then) #### fn\n[or_else](/docs/api/rust/tauri/about:blank#method.or_else)<Fut, F>(self, f: F)\n-> OrElse<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> Fut, Fut: TryFuture<Ok =\nSelf::Ok>, Executes another future if this one resolves to an error. The error\nvalue is passed to a closure to create this subsequent future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.or_else) #### fn\n[inspect_ok](/docs/api/rust/tauri/about:blank#method.inspect_ok)<F>(self, f: F)\n-> InspectOk<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(&Self::Ok), Do something with the success\nvalue of a future before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect_ok) #### fn\n[inspect_err](/docs/api/rust/tauri/about:blank#method.inspect_err)<F>(self, f:\nF) -> InspectErr<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(&Self::Error), Do something with the error\nvalue of a future before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect_err) #### fn\n[try_flatten](/docs/api/rust/tauri/about:blank#method.try_flatten)(self) ->\nTryFlatten<Self, Self::Ok> where Self::Ok: TryFuture, <Self::Ok as\nTryFuture>::Error == Self::Error, Flatten the execution of this future when the\nsuccessful result of this future is another future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_flatten) #### fn\n[try_flatten_stream](/docs/api/rust/tauri/about:blank#method.try_flatten_stream)(self)\n-> TryFlattenStream<Self> where Self::Ok: TryStream, <Self::Ok as\nTryStream>::Error == Self::Error, Flatten the execution of this future when the\nsuccessful result of this future is a stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_flatten_stream) #### fn\n[unwrap_or_else](/docs/api/rust/tauri/about:blank#method.unwrap_or_else)<F>(self,\nf: F) -> UnwrapOrElse<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> Self::Ok, Unwraps this\nfuture’s output, producing a future with this future’s\n[`Ok`](/docs/api/rust/tauri/tryfuture::Ok) type as its\n[`Output`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output)\ntype. [Read more](/docs/api/rust/tauri/about:blank#method.unwrap_or_else) ####\nfn [into_future](/docs/api/rust/tauri/about:blank#method.into_future)(self) ->\nIntoFuture<Self> Wraps a \\[`TryFuture`] into a type that implements\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html).\n[Read more](/docs/api/rust/tauri/about:blank#method.into_future) #### fn\n[try_poll_unpin](/docs/api/rust/tauri/about:blank#method.try_poll_unpin)( &mut\nself, cx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_> ) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self::Ok, Self::Error>> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience method for calling \\[`TryFuture::try_poll`]\non [`Unpin`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html\n\"Unpin\") future types. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_poll_unpin) ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.JoinHandle"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_Mutex_md","title":"Struct tauri::async_runtime::Mutex","sections":["Which kind of mutex should you use","Examples","Implementations","Examples","Examples","Cancel safety","Examples","Cancel safety","Examples","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::Mutex, ```rs pub struct Mutex where     T:\n?Sized,  { /* fields omitted */ } ``` Expand description An asynchronous\n`Mutex`-like type. This type acts similarly to\n[`std::sync::Mutex`](https://doc.rust-lang.org/1.54.0/std/sync/mutex/struct.Mutex.html),\nwith two major differences:\n[`lock`](/docs/api/rust/tauri/struct.Mutex#method.lock) is an async method so\ndoes not block, and the lock guard is designed to be held across `.await`\npoints. ## Which kind of mutex should you use? Contrary to popular belief, it is\nok and often preferred to use the ordinary\n[`Mutex`](https://doc.rust-lang.org/1.54.0/std/sync/mutex/struct.Mutex.html)\nfrom the standard library in asynchronous code. The feature that the async mutex\noffers over the blocking mutex is the ability to keep it locked across an\n`.await` point. This makes the async mutex more expensive than the blocking\nmutex, so the blocking mutex should be preferred in the cases where it can be\nused. The primary use case for the async mutex is to provide shared mutable\naccess to IO resources such as a database connection. If the value behind the\nmutex is just data, it’s usually appropriate to use a blocking mutex such as the\none in the standard library or [`parking_lot`](https://docs.rs/parking_lot).\nNote that, although the compiler will not prevent the std `Mutex` from holding\nits guard across `.await` points in situations where the task is not movable\nbetween threads, this virtually never leads to correct concurrent code in\npractice as it can easily lead to deadlocks. A common pattern is to wrap the\n`Arc>` in a struct that provides non-async methods for performing operations on\nthe data within, and only lock the mutex inside these methods. The\n[mini-redis](https://github.com/tokio-rs/mini-redis/blob/master/src/db.rs)\nexample provides an illustration of this pattern. Additionally, when you _do_\nwant shared access to an IO resource, it is often better to spawn a task to\nmanage the IO resource, and to use message passing to communicate with that\ntask. ## Examples: ```rs use tokio::sync::Mutex; use std::sync::Arc;\n#[tokio::main] async fn main() { let data1 = Arc::new(Mutex::new(0)); let data2\n= Arc::clone(&data1); tokio::spawn(async move { let mut lock =\ndata2.lock().await; *lock += 1; }); let mut lock = data1.lock().await; *lock +=\n1; } ``` ```rs use tokio::sync::Mutex; use std::sync::Arc; #[tokio::main] async\nfn main() { let count = Arc::new(Mutex::new(0)); for i in 0..5 { let my_count =\nArc::clone(&count); tokio::spawn(async move { for j in 0..10 { let mut lock =\nmy_count.lock().await; *lock += 1; println!(\"{} {} {}\", i, j, lock); } }); }\nloop { if *count.lock().await >= 50 { break; } } println!(\"Count hit 50.\"); }\n``` There are a few things of note here to pay attention to in this example. 1.\nThe mutex is wrapped in an\n[`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html) to allow it\nto be shared across threads. 2. Each spawned task obtains a lock and releases it\non every iteration. 3. Mutation of the data protected by the Mutex is done by\nde-referencing the obtained lock as seen on lines 12 and 19. Tokio’s Mutex works\nin a simple FIFO (first in, first out) style where all calls to\n[`lock`](/docs/api/rust/tauri/struct.Mutex#method.lock) complete in the order\nthey were performed. In that way the Mutex is “fair” and predictable in how it\ndistributes the locks to inner data. Locks are released and reacquired after\nevery iteration, so basically, each thread goes to the back of the line after it\nincrements the value once. Note that there’s some unpredictability to the timing\nbetween when the threads are started, but once they are going they alternate\npredictably. Finally, since there is only a single valid lock at any given time,\nthere is no possibility of a race condition when mutating the inner value. Note\nthat in contrast to\n[`std::sync::Mutex`](https://doc.rust-lang.org/1.54.0/std/sync/mutex/struct.Mutex.html),\nthis implementation does not poison the mutex when a thread holding the\n[`MutexGuard`](/docs/api/rust/tauri/struct@MutexGuard) panics. In such a case,\nthe mutex will be unlocked. If the panic is caught, this might leave the data\nprotected by the mutex in an inconsistent state. ## Implementations ### impl<T>\n[Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(t: T) ->\n[Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> Creates a new lock in an unlocked state ready\nfor use. ## Examples ```rs use tokio::sync::Mutex; let lock = Mutex::new(5); ```\n#### pub const fn\n[const_new](/docs/api/rust/tauri/about:blank#method.const_new)(t: T) ->\n[Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> Creates a new lock in an unlocked state ready\nfor use. ## Examples ```rs use tokio::sync::Mutex; static LOCK: Mutex =\nMutex::const_new(5); ``` #### pub async fn\n[lock](/docs/api/rust/tauri/about:blank#method.lock)(&'\\_ self) ->\nMutexGuard<'\\_, T> Locks this mutex, causing the current task to yield until the\nlock has been acquired. When the lock has been acquired, function returns a\n\\[`MutexGuard`]. ## Cancel safety This method uses a queue to fairly distribute\nlocks in the order they were requested. Cancelling a call to `lock` makes you\nlose your place in the queue. ## Examples ```rs use tokio::sync::Mutex;\n#[tokio::main] async fn main() { let mutex = Mutex::new(1); let mut n =\nmutex.lock().await; *n = 2; } ``` #### pub async fn\n[lock_owned](/docs/api/rust/tauri/about:blank#method.lock_owned)(self:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T>>) -> OwnedMutexGuard<T> Locks this mutex,\ncausing the current task to yield until the lock has been acquired. When the\nlock has been acquired, this returns an \\[`OwnedMutexGuard`]. This method is\nidentical to [`Mutex::lock`](/docs/api/rust/tauri/struct.Mutex#method.lock\n\"Mutex::lock\"), except that the returned guard references the `Mutex` with an\n[`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html) rather than\nby borrowing it. Therefore, the `Mutex` must be wrapped in an `Arc` to call this\nmethod, and the guard will live for the `'static` lifetime, as it keeps the\n`Mutex` alive by holding an `Arc`. ## Cancel safety This method uses a queue to\nfairly distribute locks in the order they were requested. Cancelling a call to\n`lock_owned` makes you lose your place in the queue. ## Examples ```rs use\ntokio::sync::Mutex; use std::sync::Arc; #[tokio::main] async fn main() { let\nmutex = Arc::new(Mutex::new(1)); let mut n = mutex.clone().lock_owned().await;\n*n = 2; } ``` #### pub fn\n[try_lock](/docs/api/rust/tauri/about:blank#method.try_lock)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<MutexGuard<'\\_, T>, TryLockError> Attempts to acquire the\nlock, and returns [`TryLockError`](/docs/api/rust/tauri/TryLockError) if the\nlock is currently held somewhere else. ## Examples ```rs use tokio::sync::Mutex;\nlet mutex = Mutex::new(1); let n = mutex.try_lock()?; assert_eq!(*n, 1); ```\n#### pub fn [get_mut](/docs/api/rust/tauri/about:blank#method.get_mut)(&mut\nself) -> [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T\nReturns a mutable reference to the underlying data. Since this call borrows the\n`Mutex` mutably, no actual locking needs to take place – the mutable borrow\nstatically guarantees no locks exist. ## Examples ```rs use tokio::sync::Mutex;\nfn main() { let mut mutex = Mutex::new(1); let n = mutex.get_mut(); *n = 2; }\n``` #### pub fn\n[try_lock_owned](/docs/api/rust/tauri/about:blank#method.try_lock_owned)( self:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T>> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<OwnedMutexGuard<T>, TryLockError> Attempts to acquire the\nlock, and returns [`TryLockError`](/docs/api/rust/tauri/TryLockError) if the\nlock is currently held somewhere else. This method is identical to\n[`Mutex::try_lock`](/docs/api/rust/tauri/struct.Mutex#method.try_lock\n\"Mutex::try_lock\"), except that the returned guard references the `Mutex` with\nan [`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html) rather\nthan by borrowing it. Therefore, the `Mutex` must be wrapped in an `Arc` to call\nthis method, and the guard will live for the `'static` lifetime, as it keeps the\n`Mutex` alive by holding an `Arc`. ## Examples ```rs use tokio::sync::Mutex; use\nstd::sync::Arc; let mutex = Arc::new(Mutex::new(1)); let n =\nmutex.clone().try_lock_owned()?; assert_eq!(*n, 1); ``` #### pub fn\n[into_inner](/docs/api/rust/tauri/about:blank#method.into_inner)(self) -> T\nConsumes the mutex, returning the underlying data. ## Examples ```rs use\ntokio::sync::Mutex; #[tokio::main] async fn main() { let mutex = Mutex::new(1);\nlet n = mutex.into_inner(); assert_eq!(n, 1); } ``` ## Trait Implementations ###\nimpl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [Mutex](/docs/api/rust/tauri/struct.Mutex\n\"struct tauri::async_runtime::Mutex\")<T> where T:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for [Mutex](/docs/api/rust/tauri/struct.Mutex\n\"struct tauri::async_runtime::Mutex\")<T> #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(s:\nT) -> [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> Performs the conversion. ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), ## Auto Trait Implementations ### impl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Mutex](/docs/api/rust/tauri/struct.Mutex\n\"struct tauri::async_runtime::Mutex\")<T> ### impl<T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\")>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Mutex](/docs/api/rust/tauri/struct.Mutex \"struct\ntauri::async_runtime::Mutex\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Mutex](/docs/api/rust/tauri/struct.Mutex\n\"struct tauri::async_runtime::Mutex\")<T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait\ncore::convert::From\")<[!](https://doc.rust-lang.org/1.54.0/std/primitive.never.html)>\nfor\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#559-563\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\n[!](https://doc.rust-lang.org/1.54.0/std/primitive.never.html)) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#560\n\"goto source code\") Performs the conversion. ### impl<T>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.Mutex"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_Receiver_md","title":"Struct tauri::async_runtime::Receiver","sections":["Implementations","Cancel safety","Examples","Panics","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::Receiver, ```rs pub struct Receiver { /* fields\nomitted */ } ``` Expand description Receive values from the associated `Sender`.\nInstances are created by the [`channel`](/docs/api/rust/tauri/fn.channel)\nfunction. This receiver can be turned into a `Stream` using\n[`ReceiverStream`](https://docs.rs/tokio-stream/0.1/tokio_stream/wrappers/struct.ReceiverStream.html).\n## Implementations ### impl<T> [Receiver](/docs/api/rust/tauri/struct.Receiver\n\"struct tauri::async_runtime::Receiver\")<T> #### pub async fn\n[recv](/docs/api/rust/tauri/about:blank#method.recv)(&'\\_ mut self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<T> Receives the next value for this receiver. This method\nreturns `None` if the channel has been closed and there are no remaining\nmessages in the channel’s buffer. This indicates that no further values can ever\nbe received from this `Receiver`. The channel is closed when all senders have\nbeen dropped, or when\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) is called. If there\nare no messages in the channel’s buffer, but the channel has not yet been\nclosed, this method will sleep until a message is sent or the channel is closed.\nNote that if [`close`](/docs/api/rust/tauri/struct.Receiver#method.close) is\ncalled, but there are still outstanding\n[`Permits`](/docs/api/rust/tauri/struct@crate::sync::mpsc::Permit) from before\nit was closed, the channel is not considered closed by `recv` until the permits\nare released. ## Cancel safety This method is cancel safe. If `recv` is used as\nthe event in a [`tokio::select!`](/docs/api/rust/tauri/crate::select) statement\nand some other branch completes first, it is guaranteed that no messages were\nreceived on this channel. ## Examples ```rs use tokio::sync::mpsc;\n#[tokio::main] async fn main() { let (tx, mut rx) = mpsc::channel(100);\ntokio::spawn(async move { tx.send(\"hello\").await.unwrap(); });\nassert_eq!(Some(\"hello\"), rx.recv().await); assert_eq!(None, rx.recv().await); }\n``` Values are buffered: ```rs use tokio::sync::mpsc; #[tokio::main] async fn\nmain() { let (tx, mut rx) = mpsc::channel(100); tx.send(\"hello\").await.unwrap();\ntx.send(\"world\").await.unwrap(); assert_eq!(Some(\"hello\"), rx.recv().await);\nassert_eq!(Some(\"world\"), rx.recv().await); } ``` #### pub fn\n[blocking_recv](/docs/api/rust/tauri/about:blank#method.blocking_recv)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<T> Blocking receive to call outside of asynchronous\ncontexts. This method returns `None` if the channel has been closed and there\nare no remaining messages in the channel’s buffer. This indicates that no\nfurther values can ever be received from this `Receiver`. The channel is closed\nwhen all senders have been dropped, or when\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) is called. If there\nare no messages in the channel’s buffer, but the channel has not yet been\nclosed, this method will block until a message is sent or the channel is closed.\nThis method is intended for use cases where you are sending from asynchronous\ncode to synchronous code, and will work even if the sender is not using\n[`blocking_send`](/docs/api/rust/tauri/struct.Sender#method.blocking_send) to\nsend the message. Note that if\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) is called, but\nthere are still outstanding\n[`Permits`](/docs/api/rust/tauri/struct@crate::sync::mpsc::Permit) from before\nit was closed, the channel is not considered closed by `blocking_recv` until the\npermits are released. ## Panics This function panics if called within an\nasynchronous execution context. ## Examples ```rs use std::thread; use\ntokio::runtime::Runtime; use tokio::sync::mpsc; fn main() { let (tx, mut rx) =\nmpsc::channel::(10); let sync_code = thread::spawn(move || {\nassert_eq!(Some(10), rx.blocking_recv()); }); Runtime::new() .unwrap()\n.block_on(async move { let _ = tx.send(10).await; }); sync_code.join().unwrap()\n} ``` #### pub fn [close](/docs/api/rust/tauri/about:blank#method.close)(&mut\nself) Closes the receiving half of a channel without dropping it. This prevents\nany further messages from being sent on the channel while still enabling the\nreceiver to drain messages that are buffered. Any outstanding\n[`Permit`](/docs/api/rust/tauri/Permit) values will still be able to send\nmessages. To guarantee that no messages are dropped, after calling `close()`,\n`recv()` must be called until `None` is returned. If there are outstanding\n[`Permit`](/docs/api/rust/tauri/Permit) or\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) values, the `recv` method will\nnot return `None` until those are released. ## Examples ```rs use\ntokio::sync::mpsc; #[tokio::main] async fn main() { let (tx, mut rx) =\nmpsc::channel(20); tokio::spawn(async move { let mut i = 0; while let Ok(permit)\n= tx.reserve().await { permit.send(i); i += 1; } }); rx.close(); while let\nSome(msg) = rx.recv().await { println!(\"got {}\", msg); } // Channel closed and\nno messages are lost. } ``` #### pub fn\n[poll_recv](/docs/api/rust/tauri/about:blank#method.poll_recv)(&mut self, cx:\n&mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<T>> Polls to receive the next message on this\nchannel. This method returns: - `Poll::Pending` if no messages are available but\nthe channel is not closed. - `Poll::Ready(Some(message))` if a message is\navailable. - `Poll::Ready(None)` if the channel has been closed and all messages\nsent before it was closed have been received. When the method returns\n`Poll::Pending`, the `Waker` in the provided `Context` is scheduled to receive a\nwakeup when a message is sent on any receiver, or when the channel is closed.\nNote that on multiple calls to `poll_recv`, only the `Waker` from the `Context`\npassed to the most recent call is scheduled to receive a wakeup. ## Trait\nImplementations ### impl<T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Receiver](/docs/api/rust/tauri/struct.Receiver \"struct\ntauri::async_runtime::Receiver\")<T> #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Receiver](/docs/api/rust/tauri/struct.Receiver\n\"struct tauri::async_runtime::Receiver\")<T> ## Auto Trait Implementations ###\nimpl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Receiver](/docs/api/rust/tauri/struct.Receiver \"struct\ntauri::async_runtime::Receiver\")<T> ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Receiver](/docs/api/rust/tauri/struct.Receiver \"struct\ntauri::async_runtime::Receiver\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Receiver](/docs/api/rust/tauri/struct.Receiver \"struct\ntauri::async_runtime::Receiver\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Receiver](/docs/api/rust/tauri/struct.Receiver \"struct\ntauri::async_runtime::Receiver\")<T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.Receiver"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_RwLock_md","title":"Struct tauri::async_runtime::RwLock","sections":["Examples","Implementations","Examples","Examples","Panics","Examples","Examples","Cancel safety","Examples","Cancel safety","Examples","Examples","Examples","Cancel safety","Examples","Cancel safety","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::RwLock, ```rs pub struct RwLock where     T:\n?Sized,  { /* fields omitted */ } ``` Expand description An asynchronous\nreader-writer lock. This type of lock allows a number of readers or at most one\nwriter at any point in time. The write portion of this lock typically allows\nmodification of the underlying data (exclusive access) and the read portion of\nthis lock typically allows for read-only access (shared access). In comparison,\na [`Mutex`](/docs/api/rust/tauri/struct.Mutex) does not distinguish between\nreaders or writers that acquire the lock, therefore causing any tasks waiting\nfor the lock to become available to yield. An `RwLock` will allow any number of\nreaders to acquire the lock as long as a writer is not holding the lock. The\npriority policy of Tokio’s read-write lock is _fair_ (or\n[_write-preferring_](https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock#Priority_policies)),\nin order to ensure that readers cannot starve writers. Fairness is ensured using\na first-in, first-out queue for the tasks awaiting the lock; if a task that\nwishes to acquire the write lock is at the head of the queue, read locks will\nnot be given out until the write lock has been released. This is in contrast to\nthe Rust standard library’s `std::sync::RwLock`, where the priority policy is\ndependent on the operating system’s implementation. The type parameter `T`\nrepresents the data that this lock protects. It is required that `T` satisfies\n[`Send`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html) to be\nshared across threads. The RAII guards returned from the locking methods\nimplement\n[`Deref`](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.Deref.html) (and\n[`DerefMut`](https://doc.rust-lang.org/1.54.0/core/ops/deref/trait.DerefMut.html)\nfor the `write` methods) to allow access to the content of the lock. ## Examples\n```rs use tokio::sync::RwLock; #[tokio::main] async fn main() { let lock =\nRwLock::new(5); // many reader locks can be held at once { let r1 =\nlock.read().await; let r2 = lock.read().await; assert_eq!(*r1, 5);\nassert_eq!(*r2, 5); } // read locks are dropped at this point // only one write\nlock may be held, however { let mut w = lock.write().await; *w += 1;\nassert_eq!(*w, 6); } // write lock is dropped here } ``` ## Implementations ###\nimpl<T> [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(value: T) ->\n[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Creates a new instance of an `RwLock` which is\nunlocked. ## Examples ```rs use tokio::sync::RwLock; let lock = RwLock::new(5);\n``` #### pub fn\n[with_max_readers](/docs/api/rust/tauri/about:blank#method.with_max_readers)(value:\nT, max_reads: [u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)) ->\n[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Creates a new instance of an `RwLock` which is\nunlocked and allows a maximum of `max_reads` concurrent readers. ## Examples\n```rs use tokio::sync::RwLock; let lock = RwLock::with_max_readers(5, 1024); ```\n## Panics Panics if `max_reads` is more than `u32::MAX >> 3`. #### pub const fn\n[const_new](/docs/api/rust/tauri/about:blank#method.const_new)(value: T) ->\n[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Creates a new instance of an `RwLock` which is\nunlocked. ## Examples ```rs use tokio::sync::RwLock; static LOCK: RwLock =\nRwLock::const_new(5); ``` #### pub const fn\n[const_with_max_readers](/docs/api/rust/tauri/about:blank#method.const_with_max_readers)(value:\nT, max_reads: [u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)) ->\n[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Creates a new instance of an `RwLock` which is\nunlocked and allows a maximum of `max_reads` concurrent readers. ## Examples\n```rs use tokio::sync::RwLock; static LOCK: RwLock =\nRwLock::const_with_max_readers(5, 1024); ``` #### pub async fn\n[read](/docs/api/rust/tauri/about:blank#method.read)(&'\\_ self) ->\nRwLockReadGuard<'\\_, T> Locks this `RwLock` with shared read access, causing the\ncurrent task to yield until the lock has been acquired. The calling task will\nyield until there are no writers which hold the lock. There may be other readers\ninside the lock when the task resumes. Note that under the priority policy of\n[`RwLock`](/docs/api/rust/tauri/struct.RwLock \"RwLock\"), read locks are not\ngranted until prior write locks, to prevent starvation. Therefore deadlock may\noccur if a read lock is held by the current task, a write lock attempt is made,\nand then a subsequent read lock attempt is made by the current task. Returns an\nRAII guard which will drop this read access of the `RwLock` when dropped. ##\nCancel safety This method uses a queue to fairly distribute locks in the order\nthey were requested. Cancelling a call to `read` makes you lose your place in\nthe queue. ## Examples ```rs use std::sync::Arc; use tokio::sync::RwLock;\n#[tokio::main] async fn main() { let lock = Arc::new(RwLock::new(1)); let c_lock\n= lock.clone(); let n = lock.read().await; assert_eq!(*n, 1); tokio::spawn(async\nmove { // While main has an active read lock, we acquire one too. let r =\nc_lock.read().await; assert_eq!(*r, 1); }).await.expect(\"The spawned task has\npanicked\"); // Drop the guard after the spawned task finishes. drop(n); } ```\n#### pub async fn\n[read_owned](/docs/api/rust/tauri/about:blank#method.read_owned)(self:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T>>) -> OwnedRwLockReadGuard<T, T> Locks this\n`RwLock` with shared read access, causing the current task to yield until the\nlock has been acquired. The calling task will yield until there are no writers\nwhich hold the lock. There may be other readers inside the lock when the task\nresumes. This method is identical to\n[`RwLock::read`](/docs/api/rust/tauri/struct.RwLock#method.read \"RwLock::read\"),\nexcept that the returned guard references the `RwLock` with an\n[`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"Arc\")\nrather than by borrowing it. Therefore, the `RwLock` must be wrapped in an `Arc`\nto call this method, and the guard will live for the `'static` lifetime, as it\nkeeps the `RwLock` alive by holding an `Arc`. Note that under the priority\npolicy of [`RwLock`](/docs/api/rust/tauri/struct.RwLock \"RwLock\"), read locks\nare not granted until prior write locks, to prevent starvation. Therefore\ndeadlock may occur if a read lock is held by the current task, a write lock\nattempt is made, and then a subsequent read lock attempt is made by the current\ntask. Returns an RAII guard which will drop this read access of the `RwLock`\nwhen dropped. ## Cancel safety This method uses a queue to fairly distribute\nlocks in the order they were requested. Cancelling a call to `read_owned` makes\nyou lose your place in the queue. ## Examples ```rs use std::sync::Arc; use\ntokio::sync::RwLock; #[tokio::main] async fn main() { let lock =\nArc::new(RwLock::new(1)); let c_lock = lock.clone(); let n =\nlock.read_owned().await; assert_eq!(*n, 1); tokio::spawn(async move { // While\nmain has an active read lock, we acquire one too. let r =\nc_lock.read_owned().await; assert_eq!(*r, 1); }).await.expect(\"The spawned task\nhas panicked\"); // Drop the guard after the spawned task finishes. drop(n); }\n``` #### pub fn\n[try_read](/docs/api/rust/tauri/about:blank#method.try_read)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<RwLockReadGuard<'\\_, T>, TryLockError> Attempts to\nacquire this `RwLock` with shared read access. If the access couldn’t be\nacquired immediately, returns\n[`TryLockError`](/docs/api/rust/tauri/TryLockError). Otherwise, an RAII guard is\nreturned which will release read access when dropped. ## Examples ```rs use\nstd::sync::Arc; use tokio::sync::RwLock; #[tokio::main] async fn main() { let\nlock = Arc::new(RwLock::new(1)); let c_lock = lock.clone(); let v =\nlock.try_read().unwrap(); assert_eq!(*v, 1); tokio::spawn(async move { // While\nmain has an active read lock, we acquire one too. let n = c_lock.read().await;\nassert_eq!(*n, 1); }).await.expect(\"The spawned task has panicked\"); // Drop the\nguard when spawned task finishes. drop(v); } ``` #### pub fn\n[try_read_owned](/docs/api/rust/tauri/about:blank#method.try_read_owned)( self:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T>> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<OwnedRwLockReadGuard<T, T>, TryLockError> Attempts to\nacquire this `RwLock` with shared read access. If the access couldn’t be\nacquired immediately, returns\n[`TryLockError`](/docs/api/rust/tauri/TryLockError). Otherwise, an RAII guard is\nreturned which will release read access when dropped. This method is identical\nto [`RwLock::try_read`](/docs/api/rust/tauri/struct.RwLock#method.try_read\n\"RwLock::try_read\"), except that the returned guard references the `RwLock` with\nan [`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"Arc\")\nrather than by borrowing it. Therefore, the `RwLock` must be wrapped in an `Arc`\nto call this method, and the guard will live for the `'static` lifetime, as it\nkeeps the `RwLock` alive by holding an `Arc`. ## Examples ```rs use\nstd::sync::Arc; use tokio::sync::RwLock; #[tokio::main] async fn main() { let\nlock = Arc::new(RwLock::new(1)); let c_lock = lock.clone(); let v =\nlock.try_read_owned().unwrap(); assert_eq!(*v, 1); tokio::spawn(async move { //\nWhile main has an active read lock, we acquire one too. let n =\nc_lock.read_owned().await; assert_eq!(*n, 1); }).await.expect(\"The spawned task\nhas panicked\"); // Drop the guard when spawned task finishes. drop(v); } ```\n#### pub async fn [write](/docs/api/rust/tauri/about:blank#method.write)(&'\\_\nself) -> RwLockWriteGuard<'\\_, T> Locks this `RwLock` with exclusive write\naccess, causing the current task to yield until the lock has been acquired. The\ncalling task will yield while other writers or readers currently have access to\nthe lock. Returns an RAII guard which will drop the write access of this\n`RwLock` when dropped. ## Cancel safety This method uses a queue to fairly\ndistribute locks in the order they were requested. Cancelling a call to `write`\nmakes you lose your place in the queue. ## Examples ```rs use\ntokio::sync::RwLock; #[tokio::main] async fn main() { let lock = RwLock::new(1);\nlet mut n = lock.write().await; *n = 2; } ``` #### pub async fn\n[write_owned](/docs/api/rust/tauri/about:blank#method.write_owned)(self:\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T>>) -> OwnedRwLockWriteGuard<T> Locks this\n`RwLock` with exclusive write access, causing the current task to yield until\nthe lock has been acquired. The calling task will yield while other writers or\nreaders currently have access to the lock. This method is identical to\n[`RwLock::write`](/docs/api/rust/tauri/struct.RwLock#method.write\n\"RwLock::write\"), except that the returned guard references the `RwLock` with an\n[`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"Arc\")\nrather than by borrowing it. Therefore, the `RwLock` must be wrapped in an `Arc`\nto call this method, and the guard will live for the `'static` lifetime, as it\nkeeps the `RwLock` alive by holding an `Arc`. Returns an RAII guard which will\ndrop the write access of this `RwLock` when dropped. ## Cancel safety This\nmethod uses a queue to fairly distribute locks in the order they were requested.\nCancelling a call to `write_owned` makes you lose your place in the queue. ##\nExamples ```rs use std::sync::Arc; use tokio::sync::RwLock; #[tokio::main] async\nfn main() { let lock = Arc::new(RwLock::new(1)); let mut n =\nlock.write_owned().await; *n = 2; } ``` #### pub fn\n[try_write](/docs/api/rust/tauri/about:blank#method.try_write)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<RwLockWriteGuard<'\\_, T>, TryLockError> Attempts to\nacquire this `RwLock` with exclusive write access. If the access couldn’t be\nacquired immediately, returns\n[`TryLockError`](/docs/api/rust/tauri/TryLockError). Otherwise, an RAII guard is\nreturned which will release write access when dropped. ## Examples ```rs use\ntokio::sync::RwLock; #[tokio::main] async fn main() { let rw = RwLock::new(1);\nlet v = rw.read().await; assert_eq!(*v, 1); assert!(rw.try_write().is_err()); }\n``` #### pub fn\n[try_write_owned](/docs/api/rust/tauri/about:blank#method.try_write_owned)(\nself: [Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T>> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<OwnedRwLockWriteGuard<T>, TryLockError> Attempts to\nacquire this `RwLock` with exclusive write access. If the access couldn’t be\nacquired immediately, returns\n[`TryLockError`](/docs/api/rust/tauri/TryLockError). Otherwise, an RAII guard is\nreturned which will release write access when dropped. This method is identical\nto [`RwLock::try_write`](/docs/api/rust/tauri/struct.RwLock#method.try_write\n\"RwLock::try_write\"), except that the returned guard references the `RwLock`\nwith an [`Arc`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html\n\"Arc\") rather than by borrowing it. Therefore, the `RwLock` must be wrapped in\nan `Arc` to call this method, and the guard will live for the `'static`\nlifetime, as it keeps the `RwLock` alive by holding an `Arc`. ## Examples ```rs\nuse std::sync::Arc; use tokio::sync::RwLock; #[tokio::main] async fn main() {\nlet rw = Arc::new(RwLock::new(1)); let v = Arc::clone(&rw).read_owned().await;\nassert_eq!(*v, 1); assert!(rw.try_write_owned().is_err()); } ``` #### pub fn\n[get_mut](/docs/api/rust/tauri/about:blank#method.get_mut)(&mut self) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T Returns a\nmutable reference to the underlying data. Since this call borrows the `RwLock`\nmutably, no actual locking needs to take place – the mutable borrow statically\nguarantees no locks exist. ## Examples ```rs use tokio::sync::RwLock; fn main()\n{ let mut lock = RwLock::new(1); let n = lock.get_mut(); *n = 2; } ``` #### pub\nfn [into_inner](/docs/api/rust/tauri/about:blank#method.into_inner)(self) -> T\nConsumes the lock, returning the underlying data. ## Trait Implementations ###\nimpl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [RwLock](/docs/api/rust/tauri/struct.RwLock\n\"struct tauri::async_runtime::RwLock\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [RwLock](/docs/api/rust/tauri/struct.RwLock\n\"struct tauri::async_runtime::RwLock\")<T> where T:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for [RwLock](/docs/api/rust/tauri/struct.RwLock\n\"struct tauri::async_runtime::RwLock\")<T> #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(s:\nT) -> [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> Performs the conversion. ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), ## Auto Trait Implementations ### impl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> ### impl<T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\")>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [RwLock](/docs/api/rust/tauri/struct.RwLock \"struct\ntauri::async_runtime::RwLock\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [RwLock](/docs/api/rust/tauri/struct.RwLock\n\"struct tauri::async_runtime::RwLock\")<T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait\ncore::convert::From\")<[!](https://doc.rust-lang.org/1.54.0/std/primitive.never.html)>\nfor\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#559-563\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\n[!](https://doc.rust-lang.org/1.54.0/std/primitive.never.html)) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#560\n\"goto source code\") Performs the conversion. ### impl<T>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.RwLock"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_Sender_md","title":"Struct tauri::async_runtime::Sender","sections":["Implementations","Errors","Cancel safety","Examples","Cancel safety","Examples","Errors","Examples","Errors","Examples","Panics","Examples","Cancel safety","Examples","Cancel safety","Examples","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::Sender, ```rs pub struct Sender { /* fields\nomitted */ } ``` Expand description Send values to the associated `Receiver`.\nInstances are created by the [`channel`](/docs/api/rust/tauri/fn.channel)\nfunction. To use the `Sender` in a poll function, you can use the\n[`PollSender`](https://docs.rs/tokio-util/0.6/tokio_util/sync/struct.PollSender.html)\nutility. ## Implementations ### impl<T>\n[Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> #### pub async fn\n[send](/docs/api/rust/tauri/about:blank#method.send)(&'\\_ self, value: T) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nSendError<T>> Sends a value, waiting until there is capacity. A successful send\noccurs when it is determined that the other end of the channel has not hung up\nalready. An unsuccessful send would be one where the corresponding receiver has\nalready been closed. Note that a return value of `Err` means that the data will\nnever be received, but a return value of `Ok` does not mean that the data will\nbe received. It is possible for the corresponding receiver to hang up\nimmediately after this function returns `Ok`. ## Errors If the receive half of\nthe channel is closed, either due to\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) being called or the\n[`Receiver`](/docs/api/rust/tauri/struct.Receiver) handle dropping, the function\nreturns an error. The error includes the value passed to `send`. ## Cancel\nsafety If `send` is used as the event in a\n[`tokio::select!`](/docs/api/rust/tauri/crate::select) statement and some other\nbranch completes first, then it is guaranteed that the message was not sent.\nThis channel uses a queue to ensure that calls to `send` and `reserve` complete\nin the order they were requested. Cancelling a call to `send` makes you lose\nyour place in the queue. ## Examples In the following example, each call to\n`send` will block until the previously sent value was received. ```rs use\ntokio::sync::mpsc; #[tokio::main] async fn main() { let (tx, mut rx) =\nmpsc::channel(1); tokio::spawn(async move { for i in 0..10 { if let Err(_) =\ntx.send(i).await { println!(\"receiver dropped\"); return; } } }); while let\nSome(i) = rx.recv().await { println!(\"got = {}\", i); } } ``` #### pub async fn\n[closed](/docs/api/rust/tauri/about:blank#method.closed)(&'\\_ self) Completes\nwhen the receiver has dropped. This allows the producers to get notified when\ninterest in the produced values is canceled and immediately stop doing work. ##\nCancel safety This method is cancel safe. Once the channel is closed, it stays\nclosed forever and all future calls to `closed` will return immediately. ##\nExamples ```rs use tokio::sync::mpsc; #[tokio::main] async fn main() { let (tx1,\nrx) = mpsc::channel::<()>(1); let tx2 = tx1.clone(); let tx3 = tx1.clone(); let\ntx4 = tx1.clone(); let tx5 = tx1.clone(); tokio::spawn(async move { drop(rx);\n}); futures::join!( tx1.closed(), tx2.closed(), tx3.closed(), tx4.closed(),\ntx5.closed() ); println!(\"Receiver dropped\"); } ``` #### pub fn\n[try_send](/docs/api/rust/tauri/about:blank#method.try_send)(&self, message: T)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nTrySendError<T>> Attempts to immediately send a message on this `Sender` This\nmethod differs from [`send`](/docs/api/rust/tauri/struct.Sender#method.send) by\nreturning immediately if the channel’s buffer is full or no receiver is waiting\nto acquire some data. Compared with\n[`send`](/docs/api/rust/tauri/struct.Sender#method.send), this function has two\nfailure cases instead of one (one for disconnection, one for a full buffer). ##\nErrors If the channel capacity has been reached, i.e., the channel has `n`\nbuffered values where `n` is the argument passed to\n[`channel`](/docs/api/rust/tauri/fn.channel), then an error is returned. If the\nreceive half of the channel is closed, either due to\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) being called or the\n[`Receiver`](/docs/api/rust/tauri/struct.Receiver \"Receiver\") handle dropping,\nthe function returns an error. The error includes the value passed to `send`. ##\nExamples ```rs use tokio::sync::mpsc; #[tokio::main] async fn main() { // Create\na channel with buffer size 1 let (tx1, mut rx) = mpsc::channel(1); let tx2 =\ntx1.clone(); tokio::spawn(async move { tx1.send(1).await.unwrap();\ntx1.send(2).await.unwrap(); // task waits until the receiver receives a value.\n}); tokio::spawn(async move { // This will return an error and send // no\nmessage if the buffer is full let _ = tx2.try_send(3); }); let mut msg; msg =\nrx.recv().await.unwrap(); println!(\"message {} received\", msg); msg =\nrx.recv().await.unwrap(); println!(\"message {} received\", msg); // Third message\nmay have never been sent match rx.recv().await { Some(msg) => println!(\"message\n{} received\", msg), None => println!(\"the third message was never sent\"), } }\n``` #### pub async fn\n[send_timeout](/docs/api/rust/tauri/about:blank#method.send_timeout)( &'\\_ self,\nvalue: T, timeout:\n[Duration](https://doc.rust-lang.org/1.54.0/core/time/struct.Duration.html\n\"struct core::time::Duration\") ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nSendTimeoutError<T>> Sends a value, waiting until there is capacity, but only\nfor a limited time. Shares the same success and error conditions as\n[`send`](/docs/api/rust/tauri/struct.Sender#method.send), adding one more\ncondition for an unsuccessful send, which is when the provided timeout has\nelapsed, and there is no capacity available. ## Errors If the receive half of\nthe channel is closed, either due to\n[`close`](/docs/api/rust/tauri/struct.Receiver#method.close) being called or the\n[`Receiver`](/docs/api/rust/tauri/struct.Receiver) having been dropped, the\nfunction returns an error. The error includes the value passed to `send`. ##\nExamples In the following example, each call to `send_timeout` will block until\nthe previously sent value was received, unless the timeout has elapsed. ```rs\nuse tokio::sync::mpsc; use tokio::time::{sleep, Duration}; #[tokio::main] async\nfn main() { let (tx, mut rx) = mpsc::channel(1); tokio::spawn(async move { for i\nin 0..10 { if let Err(e) = tx.send_timeout(i, Duration::from_millis(100)).await\n{ println!(\"send error: #{:?}\", e); return; } } }); while let Some(i) =\nrx.recv().await { println!(\"got = {}\", i);\nsleep(Duration::from_millis(200)).await; } } ``` #### pub fn\n[blocking_send](/docs/api/rust/tauri/about:blank#method.blocking_send)(&self,\nvalue: T) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\nSendError<T>> Blocking send to call outside of asynchronous contexts. This\nmethod is intended for use cases where you are sending from synchronous code to\nasynchronous code, and will work even if the receiver is not using\n[`blocking_recv`](/docs/api/rust/tauri/struct.Receiver#method.blocking_recv) to\nreceive the message. ## Panics This function panics if called within an\nasynchronous execution context. ## Examples ```rs use std::thread; use\ntokio::runtime::Runtime; use tokio::sync::mpsc; fn main() { let (tx, mut rx) =\nmpsc::channel::(1); let sync_code = thread::spawn(move || {\ntx.blocking_send(10).unwrap(); }); Runtime::new().unwrap().block_on(async move {\nassert_eq!(Some(10), rx.recv().await); }); sync_code.join().unwrap() } ``` ####\npub fn [is_closed](/docs/api/rust/tauri/about:blank#method.is_closed)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) Checks if the\nchannel has been closed. This happens when the\n[`Receiver`](/docs/api/rust/tauri/struct.Receiver) is dropped, or when the\n[`Receiver::close`](/docs/api/rust/tauri/struct.Receiver#method.close) method is\ncalled. ```rs let (tx, rx) = tokio::sync::mpsc::channel::<()>(42);\nassert!(!tx.is_closed()); let tx2 = tx.clone(); assert!(!tx2.is_closed());\ndrop(rx); assert!(tx.is_closed()); assert!(tx2.is_closed()); ``` #### pub async\nfn [reserve](/docs/api/rust/tauri/about:blank#method.reserve)(&'\\_ self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Permit<'\\_, T>,\nSendError<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>> Wait\nfor channel capacity. Once capacity to send one message is available, it is\nreserved for the caller. If the channel is full, the function waits for the\nnumber of unreceived messages to become less than the channel capacity. Capacity\nto send one message is reserved for the caller. A\n[`Permit`](/docs/api/rust/tauri/Permit) is returned to track the reserved\ncapacity. The [`send`](/docs/api/rust/tauri/permit::send) function on\n[`Permit`](/docs/api/rust/tauri/Permit) consumes the reserved capacity. Dropping\n[`Permit`](/docs/api/rust/tauri/Permit) without sending a message releases the\ncapacity back to the channel. ## Cancel safety This channel uses a queue to\nensure that calls to `send` and `reserve` complete in the order they were\nrequested. Cancelling a call to `reserve` makes you lose your place in the\nqueue. ## Examples ```rs use tokio::sync::mpsc; #[tokio::main] async fn main() {\nlet (tx, mut rx) = mpsc::channel(1); // Reserve capacity let permit =\ntx.reserve().await.unwrap(); // Trying to send directly on the `tx` will fail\ndue to no // available capacity. assert!(tx.try_send(123).is_err()); // Sending\non the permit succeeds permit.send(456); // The value sent on the permit is\nreceived assert_eq!(rx.recv().await.unwrap(), 456); } ``` #### pub async fn\n[reserve_owned](/docs/api/rust/tauri/about:blank#method.reserve_owned)(self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<OwnedPermit<T>,\nSendError<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>> Wait\nfor channel capacity, moving the `Sender` and returning an owned permit. Once\ncapacity to send one message is available, it is reserved for the caller. This\nmoves the sender _by value_, and returns an owned permit that can be used to\nsend a message into the channel. Unlike\n[`Sender::reserve`](/docs/api/rust/tauri/struct.Sender#method.reserve), this\nmethod may be used in cases where the permit must be valid for the `'static`\nlifetime. `Sender`s may be cloned cheaply (`Sender::clone` is essentially a\nreference count increment, comparable to\n[`Arc::clone`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html#method.clone)),\nso when multiple [`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit)s are needed\nor the `Sender` cannot be moved, it can be cloned prior to calling\n`reserve_owned`. If the channel is full, the function waits for the number of\nunreceived messages to become less than the channel capacity. Capacity to send\none message is reserved for the caller. An\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) is returned to track the\nreserved capacity. The [`send`](/docs/api/rust/tauri/ownedpermit::send) function\non [`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) consumes the reserved\ncapacity. Dropping the [`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) without\nsending a message releases the capacity back to the channel. ## Cancel safety\nThis channel uses a queue to ensure that calls to `send` and `reserve` complete\nin the order they were requested. Cancelling a call to `reserve_owned` makes you\nlose your place in the queue. ## Examples Sending a message using an\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit): ```rs use tokio::sync::mpsc;\n#[tokio::main] async fn main() { let (tx, mut rx) = mpsc::channel(1); // Reserve\ncapacity, moving the sender. let permit = tx.reserve_owned().await.unwrap(); //\nSend a message, consuming the permit and returning // the moved sender. let tx =\npermit.send(123); // The value sent on the permit is received.\nassert_eq!(rx.recv().await.unwrap(), 123); // The sender can now be used again.\ntx.send(456).await.unwrap(); } ``` When multiple\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit)s are needed, or the sender\ncannot be moved by value, it can be inexpensively cloned before calling\n`reserve_owned`: ```rs use tokio::sync::mpsc; #[tokio::main] async fn main() {\nlet (tx, mut rx) = mpsc::channel(1); // Clone the sender and reserve capacity.\nlet permit = tx.clone().reserve_owned().await.unwrap(); // Trying to send\ndirectly on the `tx` will fail due to no // available capacity.\nassert!(tx.try_send(123).is_err()); // Sending on the permit succeeds.\npermit.send(456); // The value sent on the permit is received\nassert_eq!(rx.recv().await.unwrap(), 456); } ``` #### pub fn\n[try_reserve](/docs/api/rust/tauri/about:blank#method.try_reserve)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Permit<'\\_, T>,\nTrySendError<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>>\nTry to acquire a slot in the channel without waiting for the slot to become\navailable. If the channel is full this function will return \\[`TrySendError`],\notherwise if there is a slot available it will return a\n[`Permit`](/docs/api/rust/tauri/Permit) that will then allow you to\n[`send`](/docs/api/rust/tauri/permit::send) on the channel with a guaranteed\nslot. This function is similar to\n[`reserve`](/docs/api/rust/tauri/struct.Sender#method.reserve) except it does\nnot await for the slot to become available. Dropping\n[`Permit`](/docs/api/rust/tauri/Permit) without sending a message releases the\ncapacity back to the channel. ## Examples ```rs use tokio::sync::mpsc;\n#[tokio::main] async fn main() { let (tx, mut rx) = mpsc::channel(1); // Reserve\ncapacity let permit = tx.try_reserve().unwrap(); // Trying to send directly on\nthe `tx` will fail due to no // available capacity.\nassert!(tx.try_send(123).is_err()); // Trying to reserve an additional slot on\nthe `tx` will // fail because there is no capacity.\nassert!(tx.try_reserve().is_err()); // Sending on the permit succeeds\npermit.send(456); // The value sent on the permit is received\nassert_eq!(rx.recv().await.unwrap(), 456); } ``` #### pub fn\n[try_reserve_owned](/docs/api/rust/tauri/about:blank#method.try_reserve_owned)(\nself ) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<OwnedPermit<T>,\nTrySendError<[Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T>>> Try to acquire a slot in the channel without\nwaiting for the slot to become available, returning an owned permit. This moves\nthe sender _by value_, and returns an owned permit that can be used to send a\nmessage into the channel. Unlike\n[`Sender::try_reserve`](/docs/api/rust/tauri/struct.Sender#method.try_reserve\n\"Sender::try_reserve\"), this method may be used in cases where the permit must\nbe valid for the `'static` lifetime. `Sender`s may be cloned cheaply\n(`Sender::clone` is essentially a reference count increment, comparable to\n[`Arc::clone`](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html#method.clone)),\nso when multiple [`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit)s are needed\nor the `Sender` cannot be moved, it can be cloned prior to calling\n`try_reserve_owned`. If the channel is full this function will return a\n\\[`TrySendError`]. Since the sender is taken by value, the `TrySendError`\nreturned in this case contains the sender, so that it may be used again.\nOtherwise, if there is a slot available, this method will return an\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) that can then be used to\n[`send`](/docs/api/rust/tauri/ownedpermit::send) on the channel with a\nguaranteed slot. This function is similar to\n[`reserve_owned`](/docs/api/rust/tauri/struct.Sender#method.reserve_owned)\nexcept it does not await for the slot to become available. Dropping the\n[`OwnedPermit`](/docs/api/rust/tauri/OwnedPermit) without sending a message\nreleases the capacity back to the channel. ## Examples ```rs use\ntokio::sync::mpsc; #[tokio::main] async fn main() { let (tx, mut rx) =\nmpsc::channel(1); // Reserve capacity let permit =\ntx.clone().try_reserve_owned().unwrap(); // Trying to send directly on the `tx`\nwill fail due to no // available capacity. assert!(tx.try_send(123).is_err());\n// Trying to reserve an additional slot on the `tx` will // fail because there\nis no capacity. assert!(tx.try_reserve().is_err()); // Sending on the permit\nsucceeds permit.send(456); // The value sent on the permit is received\nassert_eq!(rx.recv().await.unwrap(), 456); } ``` #### pub fn\n[same_channel](/docs/api/rust/tauri/about:blank#method.same_channel)(&self,\nother: &[Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) Returns `true`\nif senders belong to the same channel. ## Examples ```rs let (tx, rx) =\ntokio::sync::mpsc::channel::<()>(1); let tx2 = tx.clone();\nassert!(tx.same_channel(&tx2)); let (tx3, rx3) =\ntokio::sync::mpsc::channel::<()>(1); assert!(!tx3.same_channel(&tx2)); ``` ####\npub fn [capacity](/docs/api/rust/tauri/about:blank#method.capacity)(&self) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) Returns the\ncurrent capacity of the channel. The capacity goes down when sending a value by\ncalling [`send`](/docs/api/rust/tauri/struct.Sender#method.send) or by reserving\ncapacity with [`reserve`](/docs/api/rust/tauri/struct.Sender#method.reserve).\nThe capacity goes up when values are received by the\n[`Receiver`](/docs/api/rust/tauri/struct.Receiver \"Receiver\"). ## Examples ```rs\nuse tokio::sync::mpsc; #[tokio::main] async fn main() { let (tx, mut rx) =\nmpsc::channel::<()>(5); assert_eq!(tx.capacity(), 5); // Making a reservation\ndrops the capacity by one. let permit = tx.reserve().await.unwrap();\nassert_eq!(tx.capacity(), 4); // Sending and receiving a value increases the\ncapacity by one. permit.send(()); rx.recv().await.unwrap();\nassert_eq!(tx.capacity(), 5); } ``` ## Trait Implementations ### impl<T>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Sender](/docs/api/rust/tauri/struct.Sender\n\"struct tauri::async_runtime::Sender\")<T> #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Sender](/docs/api/rust/tauri/struct.Sender \"struct\ntauri::async_runtime::Sender\")<T> ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Sender](/docs/api/rust/tauri/struct.Sender\n\"struct tauri::async_runtime::Sender\")<T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.Sender"},{"id":"prose_docs_api_rust_tauri_async_runtime_struct_TokioJoinHandle_md","title":"Struct tauri::async_runtime::TokioJoinHandle","sections":["Examples","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::async_runtime::TokioJoinHandle, ```rs pub struct TokioJoinHandle\n{ /* fields omitted */ } ``` Expand description An owned permission to join on a\ntask (await its termination). This can be thought of as the equivalent of\n[`std::thread::JoinHandle`](https://doc.rust-lang.org/1.54.0/std/thread/struct.JoinHandle.html)\nfor a task rather than a thread. A `JoinHandle` _detaches_ the associated task\nwhen it is dropped, which means that there is no longer any handle to the task,\nand no way to `join` on it. This `struct` is created by the\n[`task::spawn`](/docs/api/rust/tauri/crate::task::spawn()) and\n[`task::spawn_blocking`](/docs/api/rust/tauri/crate::task::spawn_blocking)\nfunctions. ## Examples Creation from\n[`task::spawn`](/docs/api/rust/tauri/crate::task::spawn()): ```rs use\ntokio::task; let join_handle: task::JoinHandle<_> = task::spawn(async { // some\nwork here }); ``` Creation from\n[`task::spawn_blocking`](/docs/api/rust/tauri/crate::task::spawn_blocking):\n```rs use tokio::task; let join_handle: task::JoinHandle<_> =\ntask::spawn_blocking(|| { // some blocking work here }); ``` The generic\nparameter `T` in `JoinHandle` is the return type of the spawned task. If the\nreturn value is an i32, the join handle has type `JoinHandle`: ```rs use\ntokio::task; let join_handle: task::JoinHandle = task::spawn(async { 5 + 3 });\n``` If the task does not have a return value, the join handle has type\n`JoinHandle<()>`: ```rs use tokio::task; let join_handle: task::JoinHandle<()> =\ntask::spawn(async { println!(\"I return nothing.\"); }); ``` Note that\n`handle.await` doesn’t give you the return type directly. It is wrapped in a\n`Result` because panics in the spawned task are caught by Tokio. The `?`\noperator has to be double chained to extract the returned value: ```rs use\ntokio::task; use std::io; #[tokio::main] async fn main() -> io::Result<()> { let\njoin_handle: task::JoinHandle> = tokio::spawn(async { Ok(5 + 3) }); let result =\njoin_handle.await??; assert_eq!(result, 8); Ok(()) } ``` If the task panics, the\nerror is a [`JoinError`](/docs/api/rust/tauri/crate::task::JoinError) that\ncontains the panic: ```rs use tokio::task; use std::io; use std::panic;\n#[tokio::main] async fn main() -> io::Result<()> { let join_handle:\ntask::JoinHandle> = tokio::spawn(async { panic!(\"boom\"); }); let err =\njoin_handle.await.unwrap_err(); assert!(err.is_panic()); Ok(()) } ``` Child\nbeing detached and outliving its parent: ```rs use tokio::task; use tokio::time;\nuse std::time::Duration; let original_task = task::spawn(async { let\n_detached_task = task::spawn(async { // Here we sleep to make sure that the\nfirst task returns before. time::sleep(Duration::from_millis(10)).await; // This\nwill be called, even though the JoinHandle is dropped. println!(\"♫ Still alive\n♫\"); }); }); original_task.await.expect(\"The task being joined has panicked\");\nprintln!(\"Original task is joined.\"); // We make sure that the new task has time\nto run, before the main // task returns.\ntime::sleep(Duration::from_millis(1000)).await; ``` ## Implementations ###\nimpl<T> [JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> #### pub fn\n[abort](/docs/api/rust/tauri/about:blank#method.abort)(&self) Abort the task\nassociated with the handle. Awaiting a cancelled task might complete as usual if\nthe task was already completed at the time it was cancelled, but most likely it\nwill complete with a `Err(JoinError::Cancelled)`. ```rs use tokio::time;\n#[tokio::main] async fn main() { let mut handles = Vec::new();\nhandles.push(tokio::spawn(async {\ntime::sleep(time::Duration::from_secs(10)).await; true }));\nhandles.push(tokio::spawn(async {\ntime::sleep(time::Duration::from_secs(10)).await; false })); for handle in\n&handles { handle.abort(); } for handle in handles {\nassert!(handle.await.unwrap_err().is_cancelled()); } } ``` ## Trait\nImplementations ### impl<T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle\n\"struct tauri::async_runtime::TokioJoinHandle\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"), #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html \"trait\ncore::ops::drop::Drop\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> #### pub fn\n[drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)(&mut\nself) Executes the destructor for this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)\n### impl<T>\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> #### type\n[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output)\n= [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, JoinError> The type of value produced on completion.\n#### pub fn\n[poll](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll)(\nself: [Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<&mut [JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle\n\"struct tauri::async_runtime::TokioJoinHandle\")<T>>, cx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_> ) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<<[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle\n\"struct tauri::async_runtime::TokioJoinHandle\")<T> as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> Attempt to resolve the future to a\nfinal value, registering the current task for wakeup if the value is not yet\navailable. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll)\n### impl<T> [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> ## Auto Trait Implementations ###\nimpl<T>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> ### impl<T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[JoinHandle](/docs/api/rust/tauri/struct.TokioJoinHandle \"struct\ntauri::async_runtime::TokioJoinHandle\")<T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<F> FutureExt for F where\nF:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[poll](/docs/api/rust/tauri/about:blank#method.poll)(&mut self, cx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience for calling\n[`Future::poll()`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll\n\"Future::poll()\") on\n`!`[`Unpin`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html\n\"Unpin\") types. #### fn\n[or](/docs/api/rust/tauri/about:blank#method.or)<F>(self, other: F) -> Or<Self,\nF> where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Returns the result of `self` or\n`other` future, preferring `self` if both are ready. [Read\nmore](/docs/api/rust/tauri/about:blank#method.or) #### fn\n[race](/docs/api/rust/tauri/about:blank#method.race)<F>(self, other: F) ->\nRace<Self, F> where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Returns the result of `self` or\n`other` future, with no preference if both are ready. [Read\nmore](/docs/api/rust/tauri/about:blank#method.race) #### fn\n[catch_unwind](/docs/api/rust/tauri/about:blank#method.catch_unwind)(self) ->\nCatchUnwind<Self> where Self:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), Catches panics while polling the future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.catch_unwind) #### fn\n[boxed](/docs/api/rust/tauri/about:blank#method.boxed)<'a>( self ) ->\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'a, Boxes the future and changes its type to `dyn Future\n+ Send + 'a`. [Read more](/docs/api/rust/tauri/about:blank#method.boxed) #### fn\n[boxed_local](/docs/api/rust/tauri/about:blank#method.boxed_local)<'a>( self )\n-> [Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a,\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self: 'a, Boxes the future and changes its type\nto `dyn Future + 'a`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.boxed_local) ### impl<T> FutureExt\nfor T where T:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[map](/docs/api/rust/tauri/about:blank#method.map)<U, F>(self, f: F) ->\nMap<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")) -> U, Map this future’s output to\na different type, returning a new future of the resulting type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map) #### fn\n[map_into](/docs/api/rust/tauri/about:blank#method.map_into)<U>(self) ->\nMapInto<Self, U> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U>, Map this future’s output to a different type,\nreturning a new future of the resulting type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_into) #### fn\n[then](/docs/api/rust/tauri/about:blank#method.then)<Fut, F>(self, f: F) ->\nThen<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")) -> Fut, Fut:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\"), Chain on a computation for when a future\nfinished, passing the result of the future to the provided closure `f`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.then) #### fn\n[left_future](/docs/api/rust/tauri/about:blank#method.left_future)<B>(self) ->\nEither<Self, B> where B:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Wrap this future in an `Either`\nfuture, making it the left-hand variant of that `Either`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.left_future) #### fn\n[right_future](/docs/api/rust/tauri/about:blank#method.right_future)<A>(self) ->\nEither<A, Self> where A:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>, Wrap this future in an `Either`\nfuture, making it the right-hand variant of that `Either`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.right_future) #### fn\n[into_stream](/docs/api/rust/tauri/about:blank#method.into_stream)(self) ->\nIntoStream<Self> Convert this future into a single element stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.into_stream) #### fn\n[flatten](/docs/api/rust/tauri/about:blank#method.flatten)(self) ->\nFlatten<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\"), Flatten the execution of this future when\nthe output of this future is itself another future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten) #### fn\n[flatten_stream](/docs/api/rust/tauri/about:blank#method.flatten_stream)(self)\n-> FlattenStream<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"): Stream, Flatten the execution of\nthis future when the successful result of this future is a stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten_stream) #### fn\n[fuse](/docs/api/rust/tauri/about:blank#method.fuse)(self) -> Fuse<Self> Fuse a\nfuture such that `poll` will never again be called once it has completed. This\nmethod can be used to turn any `Future` into a `FusedFuture`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.fuse) #### fn\n[inspect](/docs/api/rust/tauri/about:blank#method.inspect)<F>(self, f: F) ->\nInspect<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(&Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")), Do something with the output of a\nfuture before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect) #### fn\n[catch_unwind](/docs/api/rust/tauri/about:blank#method.catch_unwind)(self) ->\nCatchUnwind<Self> where Self:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), Catches unwinding panics while polling the\nfuture. [Read more](/docs/api/rust/tauri/about:blank#method.catch_unwind) ####\nfn [shared](/docs/api/rust/tauri/about:blank#method.shared)(self) ->\nShared<Self> where\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"), Create a cloneable handle to this future where all handles\nwill resolve to the same result. [Read\nmore](/docs/api/rust/tauri/about:blank#method.shared) #### fn\n[remote_handle](/docs/api/rust/tauri/about:blank#method.remote_handle)(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)Remote<Self>,\nRemoteHandle<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type\ncore::future::future::Future::Output\")>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nTurn this future into a future that yields `()` on completion and sends its\noutput to another future on a separate task. [Read\nmore](/docs/api/rust/tauri/about:blank#method.remote_handle) #### fn\n[boxed](/docs/api/rust/tauri/about:blank#method.boxed)<'a>( self ) ->\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'a, Wrap the future in a Box, pinning it. [Read\nmore](/docs/api/rust/tauri/about:blank#method.boxed) #### fn\n[boxed_local](/docs/api/rust/tauri/about:blank#method.boxed_local)<'a>( self )\n-> [Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html\n\"struct alloc::boxed::Box\")<dyn\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\nSelf::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> + 'a,\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> where Self: 'a, Wrap the future in a Box, pinning it.\n[Read more](/docs/api/rust/tauri/about:blank#method.boxed_local) #### fn\n[unit_error](/docs/api/rust/tauri/about:blank#method.unit_error)(self) ->\nUnitError<Self> Turns a\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html)\ninto a [`TryFuture](/docs/api/rust/tauri/futures_core::future::TryFuture). [Read\nmore](/docs/api/rust/tauri/about:blank#method.unit_error) #### fn\n[never_error](/docs/api/rust/tauri/about:blank#method.never_error)(self) ->\nNeverError<Self> Turns a\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html)\ninto a [`TryFuture](/docs/api/rust/tauri/futures_core::future::TryFuture). [Read\nmore](/docs/api/rust/tauri/about:blank#method.never_error) #### fn\n[poll_unpin](/docs/api/rust/tauri/about:blank#method.poll_unpin)(&mut self, cx:\n&mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_>) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience for calling `Future::poll` on `Unpin`\nfuture types. #### fn\n[now_or_never](/docs/api/rust/tauri/about:blank#method.now_or_never)(self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> Evaluates and consumes the future,\nreturning the resulting output if the future is ready after the first call to\n`Future::poll`. [Read\nmore](/docs/api/rust/tauri/about:blank#method.now_or_never) ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<F>\n[IntoFuture](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html\n\"trait core::future::into_future::IntoFuture\") for F where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#20-27\n\"goto source code\") #### type\n[Output](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Output)\n= <F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\") 🔬 This is a nightly-only\nexperimental API. (`into_future`) The output that the future will produce on\ncompletion. #### type\n[Future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future)\n= F 🔬 This is a nightly-only experimental API. (`into_future`) Which kind of\nfuture are we turning this into? #### pub fn\n[into_future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#tymethod.into_future)(self)\n-> <F as\n[IntoFuture](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html\n\"trait\ncore::future::into_future::IntoFuture\")>::[Future](https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future\n\"type\ncore::future::into_future::IntoFuture::Future\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#24\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`into_future`)\nCreates a future from a value. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<F, T, E> TryFuture for F\nwhere F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")<Output =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<T, E>> +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### type\n[Ok](/docs/api/rust/tauri/about:blank#associatedtype.Ok) = T The type of\nsuccessful values yielded by this future #### type\n[Error](/docs/api/rust/tauri/about:blank#associatedtype.Error) = E The type of\nfailures yielded by this future #### pub fn\n[try_poll](/docs/api/rust/tauri/about:blank#tymethod.try_poll)( self:\n[Pin](https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html \"struct\ncore::pin::Pin\")<[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)F>,\ncx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_> ) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<<F as\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait\ncore::future::future::Future\")>::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")> Poll this `TryFuture` as if it\nwere a `Future`. [Read more](/docs/api/rust/tauri/about:blank#tymethod.try_poll)\n### impl<Fut> TryFutureExt for Fut where Fut: TryFuture +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), #### fn\n[flatten_sink](/docs/api/rust/tauri/about:blank#method.flatten_sink)<Item>(self)\n-> FlattenSink<Self, Self::Ok> where Self::Ok: Sink<Item>, <Self::Ok as\nSink<Item>>::Error == Self::Error, Flattens the execution of this future when\nthe successful result of this future is a \\[`Sink`]. [Read\nmore](/docs/api/rust/tauri/about:blank#method.flatten_sink) #### fn\n[map_ok](/docs/api/rust/tauri/about:blank#method.map_ok)<T, F>(self, f: F) ->\nMapOk<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> T, Maps this future’s success\nvalue to a different value. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_ok) #### fn\n[map_ok_or_else](/docs/api/rust/tauri/about:blank#method.map_ok_or_else)<T, E,\nF>(self, e: E, f: F) -> MapOkOrElse<Self, F, E> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> T, E:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> T, Maps this future’s\nsuccess value to a different value, and permits for error handling resulting in\nthe same type. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_ok_or_else) #### fn\n[map_err](/docs/api/rust/tauri/about:blank#method.map_err)<E, F>(self, f: F) ->\nMapErr<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> E, Maps this future’s error\nvalue to a different value. [Read\nmore](/docs/api/rust/tauri/about:blank#method.map_err) #### fn\n[err_into](/docs/api/rust/tauri/about:blank#method.err_into)<E>(self) ->\nErrInto<Self, E> where Self::Error:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<E>, Maps this future’s\n[`Error`](/docs/api/rust/tauri/tryfuture::Error) to a new error type using the\n[`Into`](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html) trait.\n[Read more](/docs/api/rust/tauri/about:blank#method.err_into) #### fn\n[ok_into](/docs/api/rust/tauri/about:blank#method.ok_into)<U>(self) ->\nOkInto<Self, U> where Self::Ok:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U>, Maps this future’s\n[`Ok`](/docs/api/rust/tauri/tryfuture::Ok) to a new type using the\n[`Into`](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html) trait.\n[Read more](/docs/api/rust/tauri/about:blank#method.ok_into) #### fn\n[and_then](/docs/api/rust/tauri/about:blank#method.and_then)<Fut, F>(self, f: F)\n-> AndThen<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Ok) -> Fut, Fut: TryFuture<Error =\nSelf::Error>, Executes another future after this one resolves successfully. The\nsuccess value is passed to a closure to create this subsequent future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.and_then) #### fn\n[or_else](/docs/api/rust/tauri/about:blank#method.or_else)<Fut, F>(self, f: F)\n-> OrElse<Self, Fut, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> Fut, Fut: TryFuture<Ok =\nSelf::Ok>, Executes another future if this one resolves to an error. The error\nvalue is passed to a closure to create this subsequent future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.or_else) #### fn\n[inspect_ok](/docs/api/rust/tauri/about:blank#method.inspect_ok)<F>(self, f: F)\n-> InspectOk<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(&Self::Ok), Do something with the success\nvalue of a future before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect_ok) #### fn\n[inspect_err](/docs/api/rust/tauri/about:blank#method.inspect_err)<F>(self, f:\nF) -> InspectErr<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(&Self::Error), Do something with the error\nvalue of a future before passing it on. [Read\nmore](/docs/api/rust/tauri/about:blank#method.inspect_err) #### fn\n[try_flatten](/docs/api/rust/tauri/about:blank#method.try_flatten)(self) ->\nTryFlatten<Self, Self::Ok> where Self::Ok: TryFuture, <Self::Ok as\nTryFuture>::Error == Self::Error, Flatten the execution of this future when the\nsuccessful result of this future is another future. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_flatten) #### fn\n[try_flatten_stream](/docs/api/rust/tauri/about:blank#method.try_flatten_stream)(self)\n-> TryFlattenStream<Self> where Self::Ok: TryStream, <Self::Ok as\nTryStream>::Error == Self::Error, Flatten the execution of this future when the\nsuccessful result of this future is a stream. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_flatten_stream) #### fn\n[unwrap_or_else](/docs/api/rust/tauri/about:blank#method.unwrap_or_else)<F>(self,\nf: F) -> UnwrapOrElse<Self, F> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")(Self::Error) -> Self::Ok, Unwraps this\nfuture’s output, producing a future with this future’s\n[`Ok`](/docs/api/rust/tauri/tryfuture::Ok) type as its\n[`Output`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output)\ntype. [Read more](/docs/api/rust/tauri/about:blank#method.unwrap_or_else) ####\nfn [into_future](/docs/api/rust/tauri/about:blank#method.into_future)(self) ->\nIntoFuture<Self> Wraps a \\[`TryFuture`] into a type that implements\n[`Future`](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html).\n[Read more](/docs/api/rust/tauri/about:blank#method.into_future) #### fn\n[try_poll_unpin](/docs/api/rust/tauri/about:blank#method.try_poll_unpin)( &mut\nself, cx: &mut\n[Context](https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html\n\"struct core::task::wake::Context\")<'\\_> ) ->\n[Poll](https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html \"enum\ncore::task::poll::Poll\")<[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self::Ok, Self::Error>> where Self:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), A convenience method for calling \\[`TryFuture::try_poll`]\non [`Unpin`](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html\n\"Unpin\") future types. [Read\nmore](/docs/api/rust/tauri/about:blank#method.try_poll_unpin) ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/struct.TokioJoinHandle"},{"id":"prose_docs_api_rust_tauri_async_runtime_trait_RuntimeHandle_md","title":"Trait tauri::async_runtime::RuntimeHandle","sections":["Required methods","Implementors"],"subSections":["impl "],"code":["rs"],"text":"# Trait tauri::async_runtime::RuntimeHandle, ```rs pub trait RuntimeHandle:\nDebug + Clone + Sync + Sync { fn spawn(&self, task: F) -> JoinHandleⓘ Notable\ntraits for JoinHandle impl Future for JoinHandle type Output = Result;     where\n        F: Future + Send + 'static,         F::Output: Send + 'static; fn\nblock_on(&self, task: F) -> F::Output; } ``` Expand description Runtime handle\ndefinition. ## Required methods #### fn\n[spawn](/docs/api/rust/tauri/about:blank#tymethod.spawn)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<F::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>ⓘNotable traits for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T>`impl Future for JoinHandletype Output =\nResult;` where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static,\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#51-54\n\"goto source code\") Spawns a future onto the runtime. #### fn\n[block_on](/docs/api/rust/tauri/about:blank#tymethod.block_on)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type\ncore::future::future::Future::Output\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#57\n\"goto source code\") Runs a future to completion on runtime. ## Implementors ###\nimpl [RuntimeHandle](/docs/api/rust/tauri/trait.RuntimeHandle \"trait\ntauri::async_runtime::RuntimeHandle\") for\n[Handle](/docs/api/rust/tauri/struct.Handle \"struct\ntauri::async_runtime::Handle\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#60-72\n\"goto source code\") #### fn\n[spawn](/docs/api/rust/tauri/about:blank#tymethod.spawn)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<F::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")>ⓘNotable traits for\n[JoinHandle](/docs/api/rust/tauri/struct.JoinHandle \"struct\ntauri::async_runtime::JoinHandle\")<T>`impl Future for JoinHandletype Output =\nResult;` where F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\") +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static,\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\"):\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static,\n[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#61-67 \"goto\nsource code\") #### fn\n[block_on](/docs/api/rust/tauri/about:blank#tymethod.block_on)<F:\n[Future](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html\n\"trait core::future::future::Future\")>(&self, task: F) ->\nF::[Output](https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output\n\"type core::future::future::Future::Output\")\n[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/async_runtime.rs#69-71 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/async_runtime/trait.RuntimeHandle"},{"id":"prose_docs_api_rust_tauri_command_struct_CommandItem_md","title":"Struct tauri::command::CommandItem","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::command::CommandItem, ```rs pub struct CommandItem<'a,\nR: Runtime> { pub name: &'static str, pub key: &'static str, pub message: &'a\nInvokeMessage, } ``` Expand description Represents a custom command. ## Fields\n`name: &'static str` The name of the command, e.g. `handler` on `#[command] fn\nhandler(value: u64)` `key: &'static str` The key of the command item, e.g.\n`value` on `#[command] fn handler(value: u64)` `message: &'a InvokeMessage` The\n[`InvokeMessage`](/docs/api/rust/tauri/../struct.InvokeMessage \"InvokeMessage\")\nthat was passed to this command. ## Trait Implementations ### impl<'de, R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait serde::de::Deserializer\")<'de> for\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de,\nR>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#91-150 \"goto source\ncode\") A\n[`Deserializer`](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"Deserializer\") wrapper around\n[`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\"). If the\nkey doesn’t exist, an error will be returned if the deserialized type is not\nexpecting an optional item. If the key does exist, the value will be called with\n[`Value`](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html)’s\n[`Deserializer`](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"Deserializer\") implementation. #### type\n[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error)\n= [Error](https://docs.rs/serde_json/1.0.66/serde_json/error/struct.Error.html\n\"struct serde_json::error::Error\") The error type that can be returned if some\nerror occurs during deserialization. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error)\n#### fn\n[deserialize_any](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_any)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#94\n\"goto source code\") Require the `Deserializer` to figure out how to drive the\nvisitor based on what data type is in the input. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_any)\n#### fn\n[deserialize_bool](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_bool)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#95\n\"goto source code\") Hint that the `Deserialize` type is expecting a `bool`\nvalue. #### fn\n[deserialize_i8](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_i8)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#96\n\"goto source code\") Hint that the `Deserialize` type is expecting an `i8` value.\n#### fn\n[deserialize_i16](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_i16)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#97\n\"goto source code\") Hint that the `Deserialize` type is expecting an `i16`\nvalue. #### fn\n[deserialize_i32](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_i32)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#98\n\"goto source code\") Hint that the `Deserialize` type is expecting an `i32`\nvalue. #### fn\n[deserialize_i64](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_i64)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#99\n\"goto source code\") Hint that the `Deserialize` type is expecting an `i64`\nvalue. #### fn\n[deserialize_u8](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_u8)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#100\n\"goto source code\") Hint that the `Deserialize` type is expecting a `u8` value.\n#### fn\n[deserialize_u16](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_u16)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#101\n\"goto source code\") Hint that the `Deserialize` type is expecting a `u16` value.\n#### fn\n[deserialize_u32](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_u32)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#102\n\"goto source code\") Hint that the `Deserialize` type is expecting a `u32` value.\n#### fn\n[deserialize_u64](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_u64)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#103\n\"goto source code\") Hint that the `Deserialize` type is expecting a `u64` value.\n#### fn\n[deserialize_f32](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_f32)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#104\n\"goto source code\") Hint that the `Deserialize` type is expecting a `f32` value.\n#### fn\n[deserialize_f64](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_f64)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#105\n\"goto source code\") Hint that the `Deserialize` type is expecting a `f64` value.\n#### fn\n[deserialize_char](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_char)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#106\n\"goto source code\") Hint that the `Deserialize` type is expecting a `char`\nvalue. #### fn\n[deserialize_str](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_str)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#107\n\"goto source code\") Hint that the `Deserialize` type is expecting a string value\nand does not benefit from taking ownership of buffered data owned by the\n`Deserializer`. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_str)\n#### fn\n[deserialize_string](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_string)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#108\n\"goto source code\") Hint that the `Deserialize` type is expecting a string value\nand would benefit from taking ownership of buffered data owned by the\n`Deserializer`. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_string)\n#### fn\n[deserialize_bytes](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_bytes)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#109\n\"goto source code\") Hint that the `Deserialize` type is expecting a byte array\nand does not benefit from taking ownership of buffered data owned by the\n`Deserializer`. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_bytes)\n#### fn\n[deserialize_byte_buf](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_byte_buf)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#110\n\"goto source code\") Hint that the `Deserialize` type is expecting a byte array\nand would benefit from taking ownership of buffered data owned by the\n`Deserializer`. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_byte_buf)\n#### fn\n[deserialize_option](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_option)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#112-117\n\"goto source code\") Hint that the `Deserialize` type is expecting an optional\nvalue. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_option)\n#### fn\n[deserialize_unit](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_unit)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#119\n\"goto source code\") Hint that the `Deserialize` type is expecting a unit value.\n#### fn\n[deserialize_unit_struct](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_unit_struct)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, name: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#120\n\"goto source code\") Hint that the `Deserialize` type is expecting a unit struct\nwith a particular name. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_unit_struct)\n#### fn\n[deserialize_newtype_struct](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_newtype_struct)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, name: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#121\n\"goto source code\") Hint that the `Deserialize` type is expecting a newtype\nstruct with a particular name. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_newtype_struct)\n#### fn\n[deserialize_seq](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_seq)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#122\n\"goto source code\") Hint that the `Deserialize` type is expecting a sequence of\nvalues. #### fn\n[deserialize_tuple](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_tuple)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, len:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html), visitor: V )\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#123\n\"goto source code\") Hint that the `Deserialize` type is expecting a sequence of\nvalues and knows how many values there are without looking at the serialized\ndata. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_tuple)\n#### fn\n[deserialize_tuple_struct](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_tuple_struct)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, name: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), len:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html), visitor: V )\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#125-130\n\"goto source code\") Hint that the `Deserialize` type is expecting a tuple struct\nwith a particular name and number of fields. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_tuple_struct)\n#### fn\n[deserialize_map](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_map)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#132\n\"goto source code\") Hint that the `Deserialize` type is expecting a map of\nkey-value pairs. #### fn\n[deserialize_struct](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_struct)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, name: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), fields:\n[&'static \\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)&'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html),\nvisitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#134-139\n\"goto source code\") Hint that the `Deserialize` type is expecting a struct with\na particular name and fields. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_struct)\n#### fn\n[deserialize_enum](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_enum)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, name: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), fields:\n[&'static \\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)&'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html),\nvisitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#141-146\n\"goto source code\") Hint that the `Deserialize` type is expecting an enum value\nwith a particular name and possible variants. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_enum)\n#### fn\n[deserialize_identifier](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_identifier)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#148\n\"goto source code\") Hint that the `Deserialize` type is expecting the name of a\nstruct field or the discriminant of an enum variant. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_identifier)\n#### fn\n[deserialize_ignored_any](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_ignored_any)<V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>( self, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<V::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type\nserde::de::Deserializer::Error\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#149\n\"goto source code\") Hint that the `Deserialize` type needs to deserialize a\nvalue whose type doesn’t matter because it is ignored. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#tymethod.deserialize_ignored_any)\n#### fn\n[deserialize_i128](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.deserialize_i128)<V>(\nself, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<V as\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>,[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#947-949\n\"goto source code\") Hint that the `Deserialize` type is expecting an `i128`\nvalue. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.deserialize_i128)\n#### fn\n[deserialize_u128](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.deserialize_u128)<V>(\nself, visitor: V ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<<V as\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>>::[Value](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html#associatedtype.Value\n\"type serde::de::Visitor::Value\"),\nSelf::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where V:\n[Visitor](https://docs.rs/serde/1.0.129/serde/de/trait.Visitor.html \"trait\nserde::de::Visitor\")<'de>,[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#981-983\n\"goto source code\") Hint that the `Deserialize` type is expecting an `u128`\nvalue. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.deserialize_u128)\n#### fn\n[is_human_readable](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.is_human_readable)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#1213\n\"goto source code\") Determine whether `Deserialize` implementations should\nexpect to deserialize their human-readable form. [Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#method.is_human_readable)\n## Auto Trait Implementations ### impl<'a, R>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'a, R> ### impl<'a, R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [CommandItem](/docs/api/rust/tauri/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'a, R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [CommandItem](/docs/api/rust/tauri/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'a, R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [CommandItem](/docs/api/rust/tauri/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'a, R> ### impl<'a, R>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'a, R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/command/struct.CommandItem"},{"id":"prose_docs_api_rust_tauri_command_trait_CommandArg_md","title":"Trait tauri::command::CommandArg","sections":["Command Arguments","Provided Implementations","Required methods","Implementors"],"subSections":["impl","impl","impl","impl"],"code":["rs"],"text":"# Trait tauri::command::CommandArg, ```rs pub trait CommandArg<'de, R: Runtime>:\nSized { fn from_command(command: CommandItem<'de, R>) -> Result; } ``` Expand\ndescription Trait implemented by command arguments to derive a value from a\n[`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\"). ##\nCommand Arguments A command argument is any type that represents an item\nparsable from a [`CommandItem`](/docs/api/rust/tauri/struct.CommandItem\n\"CommandItem\"). Most implementations will use the data stored in\n[`InvokeMessage`](/docs/api/rust/tauri/../struct.InvokeMessage \"InvokeMessage\")\nsince [`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\") is\nmostly a wrapper around it. ## Provided Implementations Tauri implements\n[`CommandArg`](/docs/api/rust/tauri/trait.CommandArg \"CommandArg\") automatically\nfor a number of types. -\n[`crate::Window`](/docs/api/rust/tauri/../window/struct.Window \"crate::Window\")\n- [`crate::State`](/docs/api/rust/tauri/../struct.State \"crate::State\") - `T\nwhere T: serde::Deserialize` - Any type that implements `Deserialize` can\nautomatically be used as a [`CommandArg`](/docs/api/rust/tauri/trait.CommandArg\n\"CommandArg\"). ## Required methods #### fn\n[from_command](/docs/api/rust/tauri/about:blank#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#47\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\"). If the\nderivation fails, the corresponding message will be rejected using\n[`InvokeMessage`](/docs/api/rust/tauri/../struct.InvokeMessage#reject\n\"InvokeMessage\"). ## Implementors ### impl<'de, D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>, R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[CommandArg](/docs/api/rust/tauri/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for\nD[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#51-56 \"goto source\ncode\") Automatically implement\n[`CommandArg`](/docs/api/rust/tauri/trait.CommandArg \"CommandArg\") for any type\nthat can be deserialized. #### fn\n[from_command](/docs/api/rust/tauri/about:blank#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>\n[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#52-55 \"goto source\ncode\") ### impl<'de, R: [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")> [CommandArg](/docs/api/rust/tauri/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for\n[AppHandle](/docs/api/rust/tauri/../struct.AppHandle \"struct\ntauri::AppHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/app.rs#220-225\n\"goto source code\") #### fn\n[from_command](/docs/api/rust/tauri/about:blank#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/app.rs#222-224\n\"goto source code\") Grabs the\n[`Window`](/docs/api/rust/tauri/../window/struct.Window \"Window\") from the\n[`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\") and\nreturns the associated [`AppHandle`](/docs/api/rust/tauri/../struct.AppHandle\n\"AppHandle\"). This will never fail. ### impl<'de, R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[CommandArg](/docs/api/rust/tauri/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for\n[Window](/docs/api/rust/tauri/../window/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#136-141\n\"goto source code\") #### fn\n[from_command](/docs/api/rust/tauri/about:blank#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#138-140\n\"goto source code\") Grabs the\n[`Window`](/docs/api/rust/tauri/../window/struct.Window \"Window\") from the\n[`CommandItem`](/docs/api/rust/tauri/struct.CommandItem \"CommandItem\"). This\nwill never fail. ### impl<'r, 'de: 'r, T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") + 'static, R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[CommandArg](/docs/api/rust/tauri/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for\n[State](/docs/api/rust/tauri/../struct.State \"struct tauri::State\")<'r,\nT>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/state.rs#40-45 \"goto source\ncode\") #### fn\n[from_command](/docs/api/rust/tauri/about:blank#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/state.rs#42-44\n\"goto source code\") Grabs the [`State`](/docs/api/rust/tauri/../struct.State\n\"State\") from the [`CommandItem`](/docs/api/rust/tauri/struct.CommandItem\n\"CommandItem\"). This will never fail.","url":"https://tauri.studio/docs/api/rust/tauri/command/trait.CommandArg"},{"id":"prose_docs_api_rust_tauri_http_enum_MimeType_md","title":"Enum tauri::http::MimeType","sections":["Variants","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::http::MimeType, ```rs pub enum MimeType { Css, Csv, Html, Ico, Js,\nJson, Jsonld, OctetStream, Rtf, Svg, Mp4, } ``` Expand description [Web\nCompatible\nMimeTypes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#important_mime_types_for_web_developers)\n## Variants `Css` `Csv` `Html` `Ico` `Js` `Json` `Jsonld` `OctetStream` `Rtf`\n`Svg` `Mp4` ## Implementations ### impl\n[MimeType](/docs/api/rust/tauri/enum.MimeType \"enum tauri::http::MimeType\") ####\npub fn\n[parse_from_uri](/docs/api/rust/tauri/about:blank#method.parse_from_uri)(uri:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[MimeType](/docs/api/rust/tauri/enum.MimeType \"enum tauri::http::MimeType\")\nparse a URI suffix to convert text/plain mimeType to their actual web compatible\nmimeType. #### pub fn\n[parse](/docs/api/rust/tauri/about:blank#method.parse)(content:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html),\nuri: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") infer mimetype from content (or) URI if needed.\n## Trait Implementations ### impl\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") for [MimeType](/docs/api/rust/tauri/enum.MimeType \"enum\ntauri::http::MimeType\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[MimeType](/docs/api/rust/tauri/enum.MimeType \"enum tauri::http::MimeType\") ###\nimpl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [MimeType](/docs/api/rust/tauri/enum.MimeType \"enum\ntauri::http::MimeType\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [MimeType](/docs/api/rust/tauri/enum.MimeType \"enum\ntauri::http::MimeType\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [MimeType](/docs/api/rust/tauri/enum.MimeType \"enum\ntauri::http::MimeType\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[MimeType](/docs/api/rust/tauri/enum.MimeType \"enum tauri::http::MimeType\") ##\nBlanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/enum.MimeType"},{"id":"prose_docs_api_rust_tauri_http_struct_HttpRange_md","title":"Struct tauri::http::HttpRange","sections":["Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::HttpRange, ```rs pub struct HttpRange { pub start: u64,\npub length: u64, } ``` Expand description HTTP Range header representation. ##\nFields `start: u64``length: u64` ## Implementations ### impl\n[HttpRange](/docs/api/rust/tauri/struct.HttpRange \"struct\ntauri::http::HttpRange\") #### pub fn\n[parse](/docs/api/rust/tauri/about:blank#method.parse)( header:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), size:\n[u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct alloc::vec::Vec\")<[HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>, HttpRangeParseError> Parses Range HTTP header string as\nper RFC 2616. `header` is HTTP Range header (e.g. `bytes=bytes=0-9`). `size` is\nfull size of response (file). #### pub fn\n[parse_bytes](/docs/api/rust/tauri/about:blank#method.parse_bytes)( header:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html),\nsize: [u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct alloc::vec::Vec\")<[HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>, HttpRangeParseError> ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [HttpRange](/docs/api/rust/tauri/struct.HttpRange \"struct\ntauri::http::HttpRange\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for\n[HttpRange](/docs/api/rust/tauri/struct.HttpRange \"struct\ntauri::http::HttpRange\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[HttpRange](/docs/api/rust/tauri/struct.HttpRange \"struct\ntauri::http::HttpRange\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [HttpRange](/docs/api/rust/tauri/struct.HttpRange\n\"struct tauri::http::HttpRange\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[HttpRange](/docs/api/rust/tauri/struct.HttpRange \"struct\ntauri::http::HttpRange\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.HttpRange"},{"id":"prose_docs_api_rust_tauri_http_struct_InvalidUri_md","title":"Struct tauri::http::InvalidUri","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::InvalidUri, ```rs pub struct InvalidUri(_); ``` Expand\ndescription An error resulting from a failed attempt to construct a URI. ##\nTrait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri\n\"struct\ntauri::http::InvalidUri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#121\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#121\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1052-1056\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1053\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1058\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<ErrorKind> for\n[InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1022-1026\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(src:\nErrorKind) -> [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1023\n\"goto source code\") Performs the conversion. ## Auto Trait Implementations ###\nimpl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri\n\"struct tauri::http::InvalidUri\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri\n\"struct tauri::http::InvalidUri\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri\n\"struct tauri::http::InvalidUri\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.InvalidUri"},{"id":"prose_docs_api_rust_tauri_http_struct_Request_md","title":"Struct tauri::http::Request","sections":[[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::Request, ```rs pub struct Request { pub head:\nRequestParts, pub body: Vec, } ``` Expand description Represents an HTTP request\nfrom the WebView. An HTTP request consists of a head and a potentially optional\nbody. ## [Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific)\n- **Linux:** Headers are not exposed. ## Fields `head: RequestParts``body: Vec`\n## Implementations ### impl [Request](/docs/api/rust/tauri/struct.Request\n\"struct tauri::http::Request\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)(body:\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>) -> [Request](/docs/api/rust/tauri/struct.Request\n\"struct tauri::http::Request\") Creates a new blank `Request` with the body ####\npub fn [method](/docs/api/rust/tauri/about:blank#method.method)(&self) ->\n&[Method](/docs/api/rust/tauri/method/struct.Method \"struct\ntauri::http::method::Method\") Returns a reference to the associated HTTP method.\n#### pub fn [uri](/docs/api/rust/tauri/about:blank#method.uri)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) Returns a\nreference to the associated URI. #### pub fn\n[headers](/docs/api/rust/tauri/about:blank#method.headers)(&self) ->\n&[HeaderMap](/docs/api/rust/tauri/header/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<[HeaderValue](/docs/api/rust/tauri/header/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> Returns a reference to the\nassociated header field map. #### pub fn\n[body](/docs/api/rust/tauri/about:blank#method.body)(&self) ->\n&[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> Returns a reference to the associated HTTP body. ####\npub fn [into_parts](/docs/api/rust/tauri/about:blank#method.into_parts)(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[RequestParts](/docs/api/rust/tauri/struct.RequestParts\n\"struct tauri::http::RequestParts\"),\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nConsumes the request returning the head and body RequestParts. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Request](/docs/api/rust/tauri/struct.Request \"struct\ntauri::http::Request\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Request](/docs/api/rust/tauri/struct.Request \"struct tauri::http::Request\")\n#### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Request](/docs/api/rust/tauri/struct.Request \"struct tauri::http::Request\")\nReturns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Request](/docs/api/rust/tauri/struct.Request \"struct tauri::http::Request\") ###\nimpl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Request](/docs/api/rust/tauri/struct.Request \"struct\ntauri::http::Request\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Request](/docs/api/rust/tauri/struct.Request \"struct\ntauri::http::Request\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Request](/docs/api/rust/tauri/struct.Request \"struct\ntauri::http::Request\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Request](/docs/api/rust/tauri/struct.Request \"struct tauri::http::Request\") ##\nBlanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.Request"},{"id":"prose_docs_api_rust_tauri_http_struct_RequestParts_md","title":"Struct tauri::http::RequestParts","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::RequestParts, ```rs pub struct RequestParts { pub method:\nMethod, pub uri: String, pub headers: HeaderMap, } ``` Expand description\nComponent parts of an HTTP `Request` The HTTP request head consists of a method,\nuri, and a set of header fields. ## Fields `method: Method` The request’s method\n`uri: String` The request’s URI `headers: HeaderMap` The request’s headers ##\nTrait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [RequestParts](/docs/api/rust/tauri/struct.RequestParts\n\"struct tauri::http::RequestParts\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<HttpRequestPartsWrapper> for\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(parts:\nHttpRequestPartsWrapper) ->\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") Performs the conversion. ## Auto Trait\nImplementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [RequestParts](/docs/api/rust/tauri/struct.RequestParts\n\"struct tauri::http::RequestParts\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [RequestParts](/docs/api/rust/tauri/struct.RequestParts\n\"struct tauri::http::RequestParts\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[RequestParts](/docs/api/rust/tauri/struct.RequestParts \"struct\ntauri::http::RequestParts\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.RequestParts"},{"id":"prose_docs_api_rust_tauri_http_struct_Response_md","title":"Struct tauri::http::Response","sections":[[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Examples","Fields","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::Response, ```rs pub struct Response { pub head:\nResponseParts, pub body: Vec, } ``` Expand description Represents an HTTP\nresponse An HTTP response consists of a head and a potentially body. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific) -\n**Linux:** Headers and status code cannot be changed. ## Examples ```rs let\nresponse = ResponseBuilder::new() .status(202) .mimetype(\"text/html\")\n.body(\"hello!\".as_bytes().to_vec()) .unwrap(); ``` ## Fields `head:\nResponseParts``body: Vec` ## Implementations ### impl\n[Response](/docs/api/rust/tauri/struct.Response \"struct tauri::http::Response\")\n#### pub fn [new](/docs/api/rust/tauri/about:blank#method.new)(body:\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>) -> [Response](/docs/api/rust/tauri/struct.Response\n\"struct tauri::http::Response\") Creates a new blank `Response` with the body\n#### pub fn [status](/docs/api/rust/tauri/about:blank#method.status)(&self) ->\n[StatusCode](/docs/api/rust/tauri/status/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") Returns the `StatusCode`. #### pub fn\n[mimetype](/docs/api/rust/tauri/about:blank#method.mimetype)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> Returns a reference to the mime type. #### pub\nfn [version](/docs/api/rust/tauri/about:blank#method.version)(&self) ->\n[Version](/docs/api/rust/tauri/version/struct.Version \"struct\ntauri::http::version::Version\") Returns a reference to the associated version.\n#### pub fn [headers](/docs/api/rust/tauri/about:blank#method.headers)(&self) ->\n&[HeaderMap](/docs/api/rust/tauri/header/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<[HeaderValue](/docs/api/rust/tauri/header/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> Returns a reference to the\nassociated header field map. #### pub fn\n[body](/docs/api/rust/tauri/about:blank#method.body)(&self) ->\n&[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> Returns a reference to the associated HTTP body. ##\nTrait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::http::Response\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Response](/docs/api/rust/tauri/struct.Response \"struct tauri::http::Response\")\n#### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::http::Response\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Response](/docs/api/rust/tauri/struct.Response \"struct tauri::http::Response\")\n### impl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Response](/docs/api/rust/tauri/struct.Response\n\"struct tauri::http::Response\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::http::Response\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Response](/docs/api/rust/tauri/struct.Response\n\"struct tauri::http::Response\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Response](/docs/api/rust/tauri/struct.Response \"struct tauri::http::Response\")\n## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.Response"},{"id":"prose_docs_api_rust_tauri_http_struct_ResponseBuilder_md","title":"Struct tauri::http::ResponseBuilder","sections":["Implementations","Examples","Errors","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::ResponseBuilder, ```rs pub struct ResponseBuilder { /*\nfields omitted */ } ``` Expand description An HTTP response builder This type\ncan be used to construct an instance of `Response` through a builder-like\npattern. ## Implementations ### impl\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)() ->\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") Creates a new default instance of `Builder` to\nconstruct either a `Head` or a `Response`. ## Examples ```rs let response =\nResponseBuilder::new() .status(200) .mimetype(\"text/html\") .body(Vec::new())\n.unwrap(); ``` #### pub fn\n[mimetype](/docs/api/rust/tauri/about:blank#method.mimetype)(self, mimetype:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") Set the HTTP mimetype for this response. #### pub\nfn [status](/docs/api/rust/tauri/about:blank#method.status)<T>(self, status: T)\n-> [Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") where\n[StatusCode](/docs/api/rust/tauri/status/struct.StatusCode \"struct\ntauri::http::status::StatusCode\"):\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<T>,\n<[StatusCode](/docs/api/rust/tauri/status/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<Error>, Set the HTTP status for this response. #### pub fn\n[version](/docs/api/rust/tauri/about:blank#method.version)(self, version:\n[Version](/docs/api/rust/tauri/version/struct.Version \"struct\ntauri::http::version::Version\")) ->\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") Set the HTTP version for this response. This\nfunction will configure the HTTP version of the `Response` that will be returned\nfrom `Builder::build`. By default this is HTTP/1.1 #### pub fn\n[header](/docs/api/rust/tauri/about:blank#method.header)<K, V>(self, key: K,\nvalue: V) -> [Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") where\n[HeaderName](/docs/api/rust/tauri/header/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"):\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<K>,\n<[HeaderName](/docs/api/rust/tauri/header/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<K>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<Error>,\n[HeaderValue](/docs/api/rust/tauri/header/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\"):\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<V>,\n<[HeaderValue](/docs/api/rust/tauri/header/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<V>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<Error>, Appends a header to this response builder. This\nfunction will append the provided key/value as a header to the internal\n`HeaderMap` being constructed. Essentially this is equivalent to calling\n`HeaderMap::append`. #### pub fn\n[body](/docs/api/rust/tauri/about:blank#method.body)( self, body:\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Response](/docs/api/rust/tauri/struct.Response \"struct\ntauri::http::Response\"),\n[Box](https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html \"struct\nalloc::boxed::Box\")<dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") + 'static,\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> “Consumes” this builder, using the provided `body` to\nreturn a constructed `Response`. ## Errors This function may return an error if\nany previously configured argument failed to parse or get converted to the\ninternal representation. For example if an invalid `head` was specified via\n`header(\"Foo\", \"Bar\\r\\n\")` the error will be returned when this function is\ncalled rather than when `header` was called. ## Examples ```rs let response =\nResponseBuilder::new() .mimetype(\"text/html\") .body(Vec::new()) .unwrap(); ```\n## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Builder](/docs/api/rust/tauri/struct.ResponseBuilder\n\"struct tauri::http::ResponseBuilder\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n## Auto Trait Implementations ### impl\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") ### impl\n\\![Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Builder](/docs/api/rust/tauri/struct.ResponseBuilder\n\"struct tauri::http::ResponseBuilder\") ### impl\n\\![Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Builder](/docs/api/rust/tauri/struct.ResponseBuilder\n\"struct tauri::http::ResponseBuilder\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Builder](/docs/api/rust/tauri/struct.ResponseBuilder\n\"struct tauri::http::ResponseBuilder\") ### impl\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Builder](/docs/api/rust/tauri/struct.ResponseBuilder \"struct\ntauri::http::ResponseBuilder\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.ResponseBuilder"},{"id":"prose_docs_api_rust_tauri_http_struct_ResponseParts_md","title":"Struct tauri::http::ResponseParts","sections":["Fields","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::ResponseParts, ```rs pub struct ResponseParts { pub\nstatus: StatusCode, pub version: Version, pub headers: HeaderMap, pub mimetype:\nOption, } ``` Expand description Component parts of an HTTP `Response` The HTTP\nresponse head consists of a status, version, and a set of header fields. ##\nFields `status: StatusCode` The response’s status `version: Version` The\nresponse’s version `headers: HeaderMap` The response’s headers `mimetype:\nOption` The response’s mimetype type ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")> Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ResponseParts](/docs/api/rust/tauri/struct.ResponseParts \"struct\ntauri::http::ResponseParts\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.ResponseParts"},{"id":"prose_docs_api_rust_tauri_http_struct_Uri_md","title":"Struct tauri::http::Uri","sections":["Examples","Implementations","Examples","Panics","Examples","Note","Examples","Examples","Examples","Example","Examples","Examples","Examples","Example","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl ","impl ","impl","impl","impl","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs","notrust"],"text":"# Struct tauri::http::Uri, ```rs pub struct Uri { /* fields omitted */ } ```\nExpand description The URI component of a request. For HTTP 1, this is included\nas part of the request line. From Section 5.3, Request Target: > Once an inbound\nconnection is obtained, the client sends an HTTP request message (Section 3)\nwith a request-target derived from the target URI. There are four distinct\nformats for the request-target, depending on both the method being requested and\nwhether the request is to a proxy. > > ````notrust > ```rs > request-target =\norigin-form > / absolute-form > / authority-form > / asterisk-form > > ``` >\n```` The URI is structured as follows: ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-| |-------------------------------||--------| |-------------------| |-----| |\n| | | | scheme authority path query fragment ``` ```` For HTTP 2.0, the URI is\nencoded using pseudoheaders. ## Examples ```rs use http::Uri; let uri =\n\"/foo/bar?baz\".parse::().unwrap(); assert_eq!(uri.path(), \"/foo/bar\");\nassert_eq!(uri.query(), Some(\"baz\")); assert_eq!(uri.host(), None); let uri =\n\"https://www.rust-lang.org/install.html\".parse::().unwrap();\nassert_eq!(uri.scheme_str(), Some(\"https\")); assert_eq!(uri.host(),\nSome(\"www.rust-lang.org\")); assert_eq!(uri.path(), \"/install.html\"); ``` ##\nImplementations ### impl [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#182-676\n\"goto source code\") #### pub fn\n[builder](/docs/api/rust/tauri/about:blank#method.builder)() ->\n[Builder](https://docs.rs/http/0.2.4/http/uri/builder/struct.Builder.html\n\"struct\nhttp::uri::builder::Builder\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#200\n\"goto source code\") Creates a new builder-style object to manufacture a `Uri`.\nThis method returns an instance of `Builder` which can be usd to create a `Uri`.\n## Examples ```rs use http::Uri; let uri = Uri::builder() .scheme(\"https\")\n.authority(\"hyper.rs\") .path_and_query(\"/\") .build() .unwrap(); ``` #### pub fn\n[from_parts](/docs/api/rust/tauri/about:blank#method.from_parts)(src:\n[Parts](https://docs.rs/http/0.2.4/http/uri/struct.Parts.html \"struct\nhttp::uri::Parts\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"),\n[InvalidUriParts](https://docs.rs/http/0.2.4/http/uri/struct.InvalidUriParts.html\n\"struct\nhttp::uri::InvalidUriParts\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#205\n\"goto source code\") Attempt to convert a `Uri` from `Parts` #### pub fn\n[from_maybe_shared](/docs/api/rust/tauri/about:blank#method.from_maybe_shared)<T>(src:\nT) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")> where T:\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\n+ 'static,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#248-250\n\"goto source code\") Attempt to convert a `Bytes` buffer to a `Uri`. This will\ntry to prevent a copy if the type passed is the type used internally, and will\ncopy the data if it is not. #### pub fn\n[from_static](/docs/api/rust/tauri/about:blank#method.from_static)(src: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#328\n\"goto source code\") Convert a `Uri` from a static string. This function will not\nperform any copying, however the string is checked to ensure that it is valid.\n## Panics This function panics if the argument is an invalid URI. ## Examples\n```rs let uri = Uri::from_static(\"http://example.com/foo\");\nassert_eq!(uri.host().unwrap(), \"example.com\"); assert_eq!(uri.path(), \"/foo\");\n``` #### pub fn\n[into_parts](/docs/api/rust/tauri/about:blank#method.into_parts)(self) ->\n[Parts](https://docs.rs/http/0.2.4/http/uri/struct.Parts.html \"struct\nhttp::uri::Parts\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#357\n\"goto source code\") Convert a `Uri` into `Parts`. ## Note This is just an\ninherent method providing the same functionality as `let parts: Parts =\nuri.into()` ## Examples ```rs let uri: Uri = \"/foo\".parse().unwrap(); let parts\n= uri.into_parts(); assert_eq!(parts.path_and_query.unwrap(), \"/foo\");\nassert!(parts.scheme.is_none()); assert!(parts.authority.is_none()); ``` ####\npub fn\n[path_and_query](/docs/api/rust/tauri/about:blank#method.path_and_query)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[PathAndQuery](https://docs.rs/http/0.2.4/http/uri/path/struct.PathAndQuery.html\n\"struct\nhttp::uri::path::PathAndQuery\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#363\n\"goto source code\") Returns the path & query components of the Uri #### pub fn\n[path](/docs/api/rust/tauri/about:blank#method.path)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#406\n\"goto source code\") Get the path of this `Uri`. Both relative and absolute URIs\ncontain a path component, though it might be the empty string. The path\ncomponent is **case sensitive**. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|--------| | path ``` ```` If the URI is `*` then the path component is equal to\n`*`. ## Examples A relative URI ```rs let uri: Uri =\n\"/hello/world\".parse().unwrap(); assert_eq!(uri.path(), \"/hello/world\"); ``` An\nabsolute URI ```rs let uri: Uri =\n\"http://example.org/hello/world\".parse().unwrap(); assert_eq!(uri.path(),\n\"/hello/world\"); ``` #### pub fn\n[scheme](/docs/api/rust/tauri/about:blank#method.scheme)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Scheme](https://docs.rs/http/0.2.4/http/uri/scheme/struct.Scheme.html\n\"struct\nhttp::uri::scheme::Scheme\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#450\n\"goto source code\") Get the scheme of this `Uri`. The URI scheme refers to a\nspecification for assigning identifiers within that scheme. Only absolute URIs\ncontain a scheme component, but not all absolute URIs will contain a scheme\ncomponent. Although scheme names are case-insensitive, the canonical form is\nlowercase. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-| | scheme ``` ```` ## Examples Absolute URI ```rs use http::uri::{Scheme,\nUri}; let uri: Uri = \"http://example.org/hello/world\".parse().unwrap();\nassert_eq!(uri.scheme(), Some(&Scheme::HTTP)); ``` Relative URI ```rs let uri:\nUri = \"/hello/world\".parse().unwrap(); assert!(uri.scheme().is_none()); ``` ####\npub fn [scheme_str](/docs/api/rust/tauri/about:blank#method.scheme_str)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#469\n\"goto source code\") Get the scheme of this `Uri` as a `&str`. ## Example ```rs\nlet uri: Uri = \"http://example.org/hello/world\".parse().unwrap();\nassert_eq!(uri.scheme_str(), Some(\"http\")); ``` #### pub fn\n[authority](/docs/api/rust/tauri/about:blank#method.authority)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Authority](https://docs.rs/http/0.2.4/http/uri/authority/struct.Authority.html\n\"struct\nhttp::uri::authority::Authority\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#517\n\"goto source code\") Get the authority of this `Uri`. The authority is a\nhierarchical element for naming authority such that the remainder of the URI is\ndelegated to that authority. For HTTP, the authority consists of the host and\nport. The host portion of the authority is **case-insensitive**. The authority\nalso includes a `username:password` component, however the use of this is\ndeprecated and should be avoided. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-------------------------------| | authority ``` ```` This function will be\nrenamed to `authority` in the next semver release. ## Examples Absolute URI\n```rs let uri: Uri = \"http://example.org:80/hello/world\".parse().unwrap();\nassert_eq!(uri.authority().map(|a| a.as_str()), Some(\"example.org:80\")); ```\nRelative URI ```rs let uri: Uri = \"/hello/world\".parse().unwrap();\nassert!(uri.authority().is_none()); ``` #### pub fn\n[host](/docs/api/rust/tauri/about:blank#method.host)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#559\n\"goto source code\") Get the host of this `Uri`. The host subcomponent of\nauthority is identified by an IP literal encapsulated within square brackets, an\nIPv4 address in dotted- decimal form, or a registered name. The host\nsubcomponent is **case-insensitive**. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|---------| | host ``` ```` ## Examples Absolute URI ```rs let uri: Uri =\n\"http://example.org:80/hello/world\".parse().unwrap(); assert_eq!(uri.host(),\nSome(\"example.org\")); ``` Relative URI ```rs let uri: Uri =\n\"/hello/world\".parse().unwrap(); assert!(uri.host().is_none()); ``` #### pub fn\n[port](/docs/api/rust/tauri/about:blank#method.port)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Port](https://docs.rs/http/0.2.4/http/uri/port/struct.Port.html\n\"struct\nhttp::uri::port::Port\")<&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#606\n\"goto source code\") Get the port part of this `Uri`. The port subcomponent of\nauthority is designated by an optional port number following the host and\ndelimited from it by a single colon (“:”) character. It can be turned into a\ndecimal port number with the `as_u16` method or as a `str` with the `as_str`\nmethod. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-| | port ``` ```` ## Examples Absolute URI with port ```rs let uri: Uri =\n\"http://example.org:80/hello/world\".parse().unwrap(); let port =\nuri.port().unwrap(); assert_eq!(port.as_u16(), 80); ``` Absolute URI without\nport ```rs let uri: Uri = \"http://example.org/hello/world\".parse().unwrap();\nassert!(uri.port().is_none()); ``` Relative URI ```rs let uri: Uri =\n\"/hello/world\".parse().unwrap(); assert!(uri.port().is_none()); ``` #### pub fn\n[port_u16](/docs/api/rust/tauri/about:blank#method.port_u16)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#621\n\"goto source code\") Get the port of this `Uri` as a `u16`. ## Example ```rs let\nuri: Uri = \"http://example.org:80/hello/world\".parse().unwrap();\nassert_eq!(uri.port_u16(), Some(80)); ``` #### pub fn\n[query](/docs/api/rust/tauri/about:blank#method.query)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#669\n\"goto source code\") Get the query string of this `Uri`, starting after the `?`.\nThe query component contains non-hierarchical data that, along with data in the\npath component, serves to identify a resource within the scope of the URI’s\nscheme and naming authority (if any). The query component is indicated by the\nfirst question mark (“?”) character and terminated by a number sign (“#”)\ncharacter or by the end of the URI. ````notrust ```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-------------------| | query ``` ```` ## Examples Absolute URI ```rs let uri:\nUri = \"http://example.org/hello/world?key=value\".parse().unwrap();\nassert_eq!(uri.query(), Some(\"key=value\")); ``` Relative URI with a query string\ncomponent ```rs let uri: Uri =\n\"/hello/world?key=value&foo=bar\".parse().unwrap(); assert_eq!(uri.query(),\nSome(\"key=value&foo=bar\")); ``` Relative URI without a query string component\n```rs let uri: Uri = \"/hello/world\".parse().unwrap();\nassert!(uri.query().is_none()); ``` ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#95\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#95\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1016-1020\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1017\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#985-994\n\"goto source code\") Returns a `Uri` representing `/` #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#987\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#996-1014\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#997\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait core::str::traits::FromStr\") for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#854-861\n\"goto source code\") #### type\n[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err)\n= [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") The associated error which can be returned from\nparsing. #### pub fn\n[from_str](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)(s:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#858\n\"goto source code\") Parses a string `s` to return a value of this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1068-1089\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<H>(&self,\nstate: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H)\nwhere H: [Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1069-1071\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#970-974\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &&'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#971\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")> for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#863-883\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Uri](/docs/api/rust/tauri/struct.Uri \"struct tauri::http::Uri\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#864\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#885-962\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#886\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#678-685\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") The type returned in the event of a conversion error.\n#### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(t:\n[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#682\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#696-703\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") The type returned in the event of a conversion error.\n#### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: &'a [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#700\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct tauri::http::Uri\")> for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#723-730\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [Error](https://docs.rs/http/0.2.4/http/error/struct.Error.html \"struct\nhttp::error::Error\") The type returned in the event of a conversion error. ####\npub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(src:\n&'a [Uri](/docs/api/rust/tauri/struct.Uri \"struct tauri::http::Uri\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct\ntauri::http::Uri\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#727\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#687-694\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") The type returned in the event of a conversion error.\n#### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(t:\n&'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#691\n\"goto source code\") Performs the conversion. ### impl\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[Parts](https://docs.rs/http/0.2.4/http/uri/struct.Parts.html\n\"struct http::uri::Parts\")> for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#714-721\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[InvalidUriParts](https://docs.rs/http/0.2.4/http/uri/struct.InvalidUriParts.html\n\"struct http::uri::InvalidUriParts\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(src:\n[Parts](https://docs.rs/http/0.2.4/http/uri/struct.Parts.html \"struct\nhttp::uri::Parts\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[Parts](https://docs.rs/http/0.2.4/http/uri/struct.Parts.html\n\"struct\nhttp::uri::Parts\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#718\n\"goto source code\") Performs the conversion. ### impl\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct\ntauri::http::Uri\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#705-712\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidUri](/docs/api/rust/tauri/struct.InvalidUri \"struct\ntauri::http::InvalidUri\") The type returned in the event of a conversion error.\n#### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(t:\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\"), <[Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#709\n\"goto source code\") Performs the conversion. ### impl\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#982 \"goto source\ncode\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct tauri::http::Uri\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Uri](/docs/api/rust/tauri/struct.Uri \"struct\ntauri::http::Uri\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Uri](/docs/api/rust/tauri/struct.Uri\n\"struct tauri::http::Uri\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/struct.Uri"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCEPT_md","title":"Constant tauri::http::header::ACCEPT","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCEPT, ```rs pub const ACCEPT: HeaderName; ```\nExpand description Advertises which content types the client is able to\nunderstand. The Accept request HTTP header advertises which content types,\nexpressed as MIME types, the client is able to understand. Using content\nnegotiation, the server then selects one of the proposals, uses it and informs\nthe client of its choice with the Content-Type response header. Browsers set\nadequate values for this header depending of the context where the request is\ndone: when fetching a CSS stylesheet a different value is set for the request\nthan when fetching an image, video or a script.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCEPT"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCEPT_CHARSET_md","title":"Constant tauri::http::header::ACCEPT_CHARSET","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCEPT_CHARSET, ```rs pub const ACCEPT_CHARSET:\nHeaderName; ``` Expand description Advertises which character set the client is\nable to understand. The Accept-Charset request HTTP header advertises which\ncharacter set the client is able to understand. Using content negotiation, the\nserver then selects one of the proposals, uses it and informs the client of its\nchoice within the Content-Type response header. Browsers usually don’t set this\nheader as the default value for each content type is usually correct and\ntransmitting it would allow easier fingerprinting. If the server cannot serve\nany matching character set, it can theoretically send back a 406 (Not\nAcceptable) error code. But, for a better user experience, this is rarely done\nand the more common way is to ignore the Accept-Charset header in this case.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCEPT_CHARSET"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCEPT_ENCODING_md","title":"Constant tauri::http::header::ACCEPT_ENCODING","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCEPT_ENCODING, ```rs pub const\nACCEPT_ENCODING: HeaderName; ``` Expand description Advertises which content\nencoding the client is able to understand. The Accept-Encoding request HTTP\nheader advertises which content encoding, usually a compression algorithm, the\nclient is able to understand. Using content negotiation, the server selects one\nof the proposals, uses it and informs the client of its choice with the\nContent-Encoding response header. Even if both the client and the server\nsupports the same compression algorithms, the server may choose not to compress\nthe body of a response, if the identity value is also acceptable. Two common\ncases lead to this: - The data to be sent is already compressed and a second\ncompression won’t lead to smaller data to be transmitted. This may the case with\nsome image formats; - The server is overloaded and cannot afford the\ncomputational overhead induced by the compression requirement. Typically,\nMicrosoft recommends not to compress if a server use more than 80 % of its\ncomputational power. As long as the identity value, meaning no encryption, is\nnot explicitly forbidden, by an identity;q=0 or a \\*;q=0 without another\nexplicitly set value for identity, the server must never send back a 406 Not\nAcceptable error.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCEPT_ENCODING"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCEPT_LANGUAGE_md","title":"Constant tauri::http::header::ACCEPT_LANGUAGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCEPT_LANGUAGE, ```rs pub const\nACCEPT_LANGUAGE: HeaderName; ``` Expand description Advertises which languages\nthe client is able to understand. The Accept-Language request HTTP header\nadvertises which languages the client is able to understand, and which locale\nvariant is preferred. Using content negotiation, the server then selects one of\nthe proposals, uses it and informs the client of its choice with the\nContent-Language response header. Browsers set adequate values for this header\naccording their user interface language and even if a user can change it, this\nhappens rarely (and is frown upon as it leads to fingerprinting). This header is\na hint to be used when the server has no way of determining the language via\nanother way, like a specific URL, that is controlled by an explicit user\ndecision. It is recommended that the server never overrides an explicit\ndecision. The content of the Accept-Language is often out of the control of the\nuser (like when traveling and using an Internet Cafe in a different country);\nthe user may also want to visit a page in another language than the locale of\ntheir user interface. If the server cannot serve any matching language, it can\ntheoretically send back a 406 (Not Acceptable) error code. But, for a better\nuser experience, this is rarely done and more common way is to ignore the\nAccept-Language header in this case.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCEPT_LANGUAGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCEPT_RANGES_md","title":"Constant tauri::http::header::ACCEPT_RANGES","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCEPT_RANGES, ```rs pub const ACCEPT_RANGES:\nHeaderName; ``` Expand description Marker used by the server to advertise\npartial request support. The Accept-Ranges response HTTP header is a marker used\nby the server to advertise its support of partial requests. The value of this\nfield indicates the unit that can be used to define a range. In presence of an\nAccept-Ranges header, the browser may try to resume an interrupted download,\nrather than to start it from the start again.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCEPT_RANGES"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_ALLOW_CREDENTIALS_md","title":"Constant tauri::http::header::ACCESS_CONTROL_ALLOW_CREDENTIALS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_ALLOW_CREDENTIALS, ```rs pub\nconst ACCESS_CONTROL_ALLOW_CREDENTIALS: HeaderName; ``` Expand description\nPreflight response indicating if the response to the request can be exposed to\nthe page. The Access-Control-Allow-Credentials response header indicates whether\nor not the response to the request can be exposed to the page. It can be exposed\nwhen the true value is returned; it can’t in other cases. Credentials are\ncookies, authorization headers or TLS client certificates. When used as part of\na response to a preflight request, this indicates whether or not the actual\nrequest can be made using credentials. Note that simple GET requests are not\npreflighted, and so if a request is made for a resource with credentials, if\nthis header is not returned with the resource, the response is ignored by the\nbrowser and not returned to web content. The Access-Control-Allow-Credentials\nheader works in conjunction with the XMLHttpRequest.withCredentials property or\nwith the credentials option in the Request() constructor of the Fetch API.\nCredentials must be set on both sides (the Access-Control-Allow-Credentials\nheader and in the XHR or Fetch request) in order for the CORS request with\ncredentials to succeed.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_ALLOW_CREDENTIALS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_ALLOW_HEADERS_md","title":"Constant tauri::http::header::ACCESS_CONTROL_ALLOW_HEADERS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_ALLOW_HEADERS, ```rs pub const\nACCESS_CONTROL_ALLOW_HEADERS: HeaderName; ``` Expand description Preflight\nresponse indicating permitted HTTP headers. The Access-Control-Allow-Headers\nresponse header is used in response to a preflight request to indicate which\nHTTP headers will be available via Access-Control-Expose-Headers when making the\nactual request. The simple headers, Accept, Accept-Language, Content-Language,\nContent-Type (but only with a MIME type of its parsed value (ignoring\nparameters) of either application/x-www-form-urlencoded, multipart/form-data, or\ntext/plain), are always available and don’t need to be listed by this header.\nThis header is required if the request has an Access-Control-Request-Headers\nheader.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_ALLOW_HEADERS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_ALLOW_METHODS_md","title":"Constant tauri::http::header::ACCESS_CONTROL_ALLOW_METHODS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_ALLOW_METHODS, ```rs pub const\nACCESS_CONTROL_ALLOW_METHODS: HeaderName; ``` Expand description Preflight\nheader response indicating permitted access methods. The\nAccess-Control-Allow-Methods response header specifies the method or methods\nallowed when accessing the resource in response to a preflight request.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_ALLOW_METHODS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_ALLOW_ORIGIN_md","title":"Constant tauri::http::header::ACCESS_CONTROL_ALLOW_ORIGIN","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_ALLOW_ORIGIN, ```rs pub const\nACCESS_CONTROL_ALLOW_ORIGIN: HeaderName; ``` Expand description Indicates\nwhether the response can be shared with resources with the given origin.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_ALLOW_ORIGIN"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_EXPOSE_HEADERS_md","title":"Constant tauri::http::header::ACCESS_CONTROL_EXPOSE_HEADERS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_EXPOSE_HEADERS, ```rs pub const\nACCESS_CONTROL_EXPOSE_HEADERS: HeaderName; ``` Expand description Indicates\nwhich headers can be exposed as part of the response by listing their names.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_EXPOSE_HEADERS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_MAX_AGE_md","title":"Constant tauri::http::header::ACCESS_CONTROL_MAX_AGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_MAX_AGE, ```rs pub const\nACCESS_CONTROL_MAX_AGE: HeaderName; ``` Expand description Indicates how long\nthe results of a preflight request can be cached.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_MAX_AGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_REQUEST_HEADERS_md","title":"Constant tauri::http::header::ACCESS_CONTROL_REQUEST_HEADERS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_REQUEST_HEADERS, ```rs pub const\nACCESS_CONTROL_REQUEST_HEADERS: HeaderName; ``` Expand description Informs the\nserver which HTTP headers will be used when an actual request is made.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_REQUEST_HEADERS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ACCESS_CONTROL_REQUEST_METHOD_md","title":"Constant tauri::http::header::ACCESS_CONTROL_REQUEST_METHOD","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ACCESS_CONTROL_REQUEST_METHOD, ```rs pub const\nACCESS_CONTROL_REQUEST_METHOD: HeaderName; ``` Expand description Informs the\nserver know which HTTP method will be used when the actual request is made.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ACCESS_CONTROL_REQUEST_METHOD"},{"id":"prose_docs_api_rust_tauri_http_header_constant_AGE_md","title":"Constant tauri::http::header::AGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::AGE, ```rs pub const AGE: HeaderName; ``` Expand\ndescription Indicates the time in seconds the object has been in a proxy cache.\nThe Age header is usually close to zero. If it is Age: 0, it was probably just\nfetched from the origin server; otherwise It is usually calculated as a\ndifference between the proxy’s current date and the Date general header included\nin the HTTP response.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.AGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ALLOW_md","title":"Constant tauri::http::header::ALLOW","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ALLOW, ```rs pub const ALLOW: HeaderName; ```\nExpand description Lists the set of methods support by a resource. This header\nmust be sent if the server responds with a 405 Method Not Allowed status code to\nindicate which request methods can be used. An empty Allow header indicates that\nthe resource allows no request methods, which might occur temporarily for a\ngiven resource, for example.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ALLOW"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ALT_SVC_md","title":"Constant tauri::http::header::ALT_SVC","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ALT_SVC, ```rs pub const ALT_SVC: HeaderName;\n``` Expand description Advertises the availability of alternate services to\nclients.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ALT_SVC"},{"id":"prose_docs_api_rust_tauri_http_header_constant_AUTHORIZATION_md","title":"Constant tauri::http::header::AUTHORIZATION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::AUTHORIZATION, ```rs pub const AUTHORIZATION:\nHeaderName; ``` Expand description Contains the credentials to authenticate a\nuser agent with a server. Usually this header is included after the server has\nresponded with a 401 Unauthorized status and the WWW-Authenticate header.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.AUTHORIZATION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CACHE_CONTROL_md","title":"Constant tauri::http::header::CACHE_CONTROL","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CACHE_CONTROL, ```rs pub const CACHE_CONTROL:\nHeaderName; ``` Expand description Specifies directives for caching mechanisms\nin both requests and responses. Caching directives are unidirectional, meaning\nthat a given directive in a request is not implying that the same directive is\nto be given in the response.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CACHE_CONTROL"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONNECTION_md","title":"Constant tauri::http::header::CONNECTION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONNECTION, ```rs pub const CONNECTION:\nHeaderName; ``` Expand description Controls whether or not the network\nconnection stays open after the current transaction finishes. If the value sent\nis keep-alive, the connection is persistent and not closed, allowing for\nsubsequent requests to the same server to be done. Except for the standard\nhop-by-hop headers (Keep-Alive, Transfer-Encoding, TE, Connection, Trailer,\nUpgrade, Proxy-Authorization and Proxy-Authenticate), any hop-by-hop headers\nused by the message must be listed in the Connection header, so that the first\nproxy knows he has to consume them and not to forward them further. Standard\nhop-by-hop headers can be listed too (it is often the case of Keep-Alive, but\nthis is not mandatory.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONNECTION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_DISPOSITION_md","title":"Constant tauri::http::header::CONTENT_DISPOSITION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_DISPOSITION, ```rs pub const\nCONTENT_DISPOSITION: HeaderName; ``` Expand description Indicates if the content\nis expected to be displayed inline. In a regular HTTP response, the\nContent-Disposition response header is a header indicating if the content is\nexpected to be displayed inline in the browser, that is, as a Web page or as\npart of a Web page, or as an attachment, that is downloaded and saved locally.\nIn a multipart/form-data body, the HTTP Content-Disposition general header is a\nheader that can be used on the subpart of a multipart body to give information\nabout the field it applies to. The subpart is delimited by the boundary defined\nin the Content-Type header. Used on the body itself, Content-Disposition has no\neffect. The Content-Disposition header is defined in the larger context of MIME\nmessages for e-mail, but only a subset of the possible parameters apply to HTTP\nforms and POST requests. Only the value form-data, as well as the optional\ndirective name and filename, can be used in the HTTP context.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_DISPOSITION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_ENCODING_md","title":"Constant tauri::http::header::CONTENT_ENCODING","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_ENCODING, ```rs pub const\nCONTENT_ENCODING: HeaderName; ``` Expand description Used to compress the\nmedia-type. When present, its value indicates what additional content encoding\nhas been applied to the entity-body. It lets the client know, how to decode in\norder to obtain the media-type referenced by the Content-Type header. It is\nrecommended to compress data as much as possible and therefore to use this\nfield, but some types of resources, like jpeg images, are already compressed.\nSometimes using additional compression doesn’t reduce payload size and can even\nmake the payload longer.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_ENCODING"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_LANGUAGE_md","title":"Constant tauri::http::header::CONTENT_LANGUAGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_LANGUAGE, ```rs pub const\nCONTENT_LANGUAGE: HeaderName; ``` Expand description Used to describe the\nlanguages intended for the audience. This header allows a user to differentiate\naccording to the users’ own preferred language. For example, if\n“Content-Language: de-DE” is set, it says that the document is intended for\nGerman language speakers (however, it doesn’t indicate the document is written\nin German. For example, it might be written in English as part of a language\ncourse for German speakers). If no Content-Language is specified, the default is\nthat the content is intended for all language audiences. Multiple language tags\nare also possible, as well as applying the Content-Language header to various\nmedia types and not only to textual documents.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_LANGUAGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_LENGTH_md","title":"Constant tauri::http::header::CONTENT_LENGTH","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_LENGTH, ```rs pub const CONTENT_LENGTH:\nHeaderName; ``` Expand description Indicates the size fo the entity-body. The\nheader value must be a decimal indicating the number of octets sent to the\nrecipient.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_LENGTH"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_LOCATION_md","title":"Constant tauri::http::header::CONTENT_LOCATION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_LOCATION, ```rs pub const\nCONTENT_LOCATION: HeaderName; ``` Expand description Indicates an alternate\nlocation for the returned data. The principal use case is to indicate the URL of\nthe resource transmitted as the result of content negotiation. Location and\nContent-Location are different: Location indicates the target of a redirection\n(or the URL of a newly created document), while Content-Location indicates the\ndirect URL to use to access the resource, without the need of further content\nnegotiation. Location is a header associated with the response, while\nContent-Location is associated with the entity returned.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_LOCATION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_RANGE_md","title":"Constant tauri::http::header::CONTENT_RANGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_RANGE, ```rs pub const CONTENT_RANGE:\nHeaderName; ``` Expand description Indicates where in a full body message a\npartial message belongs.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_RANGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_SECURITY_POLICY_md","title":"Constant tauri::http::header::CONTENT_SECURITY_POLICY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_SECURITY_POLICY, ```rs pub const\nCONTENT_SECURITY_POLICY: HeaderName; ``` Expand description Allows controlling\nresources the user agent is allowed to load for a given page. With a few\nexceptions, policies mostly involve specifying server origins and script\nendpoints. This helps guard against cross-site scripting attacks (XSS).","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_SECURITY_POLICY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_SECURITY_POLICY_REPORT_ONLY_md","title":"Constant tauri::http::header::CONTENT_SECURITY_POLICY_REPORT_ONLY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_SECURITY_POLICY_REPORT_ONLY, ```rs pub\nconst CONTENT_SECURITY_POLICY_REPORT_ONLY: HeaderName; ``` Expand description\nAllows experimenting with policies by monitoring their effects. The HTTP\nContent-Security-Policy-Report-Only response header allows web developers to\nexperiment with policies by monitoring (but not enforcing) their effects. These\nviolation reports consist of JSON documents sent via an HTTP POST request to the\nspecified URI.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_SECURITY_POLICY_REPORT_ONLY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_CONTENT_TYPE_md","title":"Constant tauri::http::header::CONTENT_TYPE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::CONTENT_TYPE, ```rs pub const CONTENT_TYPE:\nHeaderName; ``` Expand description Used to indicate the media type of the\nresource. In responses, a Content-Type header tells the client what the content\ntype of the returned content actually is. Browsers will do MIME sniffing in some\ncases and will not necessarily follow the value of this header; to prevent this\nbehavior, the header X-Content-Type-Options can be set to nosniff. In requests,\n(such as POST or PUT), the client tells the server what type of data is actually\nsent.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.CONTENT_TYPE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_COOKIE_md","title":"Constant tauri::http::header::COOKIE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::COOKIE, ```rs pub const COOKIE: HeaderName; ```\nExpand description Contains stored HTTP cookies previously sent by the server\nwith the Set-Cookie header. The Cookie header might be omitted entirely, if the\nprivacy setting of the browser are set to block them, for example.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.COOKIE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_DATE_md","title":"Constant tauri::http::header::DATE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::DATE, ```rs pub const DATE: HeaderName; ```\nExpand description Contains the date and time at which the message was\noriginated.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.DATE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_DNT_md","title":"Constant tauri::http::header::DNT","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::DNT, ```rs pub const DNT: HeaderName; ``` Expand\ndescription Indicates the client’s tracking preference. This header lets users\nindicate whether they would prefer privacy rather than personalized content.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.DNT"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ETAG_md","title":"Constant tauri::http::header::ETAG","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ETAG, ```rs pub const ETAG: HeaderName; ```\nExpand description Identifier for a specific version of a resource. This header\nallows caches to be more efficient, and saves bandwidth, as a web server does\nnot need to send a full response if the content has not changed. On the other\nside, if the content has changed, etags are useful to help prevent simultaneous\nupdates of a resource from overwriting each other (“mid-air collisions”). If the\nresource at a given URL changes, a new Etag value must be generated. Etags are\ntherefore similar to fingerprints and might also be used for tracking purposes\nby some servers. A comparison of them allows to quickly determine whether two\nrepresentations of a resource are the same, but they might also be set to\npersist indefinitely by a tracking server.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ETAG"},{"id":"prose_docs_api_rust_tauri_http_header_constant_EXPECT_md","title":"Constant tauri::http::header::EXPECT","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::EXPECT, ```rs pub const EXPECT: HeaderName; ```\nExpand description Indicates expectations that need to be fulfilled by the\nserver in order to properly handle the request. The only expectation defined in\nthe specification is Expect: 100-continue, to which the server shall respond\nwith: - 100 if the information contained in the header is sufficient to cause an\nimmediate success, - 417 (Expectation Failed) if it cannot meet the expectation;\nor any other 4xx status otherwise. For example, the server may reject a request\nif its Content-Length is too large. No common browsers send the Expect header,\nbut some other clients such as cURL do so by default.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.EXPECT"},{"id":"prose_docs_api_rust_tauri_http_header_constant_EXPIRES_md","title":"Constant tauri::http::header::EXPIRES","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::EXPIRES, ```rs pub const EXPIRES: HeaderName;\n``` Expand description Contains the date/time after which the response is\nconsidered stale. Invalid dates, like the value 0, represent a date in the past\nand mean that the resource is already expired. If there is a Cache-Control\nheader with the “max-age” or “s-max-age” directive in the response, the Expires\nheader is ignored.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.EXPIRES"},{"id":"prose_docs_api_rust_tauri_http_header_constant_FORWARDED_md","title":"Constant tauri::http::header::FORWARDED","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::FORWARDED, ```rs pub const FORWARDED:\nHeaderName; ``` Expand description Contains information from the client-facing\nside of proxy servers that is altered or lost when a proxy is involved in the\npath of the request. The alternative and de-facto standard versions of this\nheader are the X-Forwarded-For, X-Forwarded-Host and X-Forwarded-Proto headers.\nThis header is used for debugging, statistics, and generating location-dependent\ncontent and by design it exposes privacy sensitive information, such as the IP\naddress of the client. Therefore the user’s privacy must be kept in mind when\ndeploying this header.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.FORWARDED"},{"id":"prose_docs_api_rust_tauri_http_header_constant_FROM_md","title":"Constant tauri::http::header::FROM","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::FROM, ```rs pub const FROM: HeaderName; ```\nExpand description Contains an Internet email address for a human user who\ncontrols the requesting user agent. If you are running a robotic user agent\n(e.g. a crawler), the From header should be sent, so you can be contacted if\nproblems occur on servers, such as if the robot is sending excessive, unwanted,\nor invalid requests.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.FROM"},{"id":"prose_docs_api_rust_tauri_http_header_constant_HOST_md","title":"Constant tauri::http::header::HOST","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::HOST, ```rs pub const HOST: HeaderName; ```\nExpand description Specifies the domain name of the server and (optionally) the\nTCP port number on which the server is listening. If no port is given, the\ndefault port for the service requested (e.g., “80” for an HTTP URL) is implied.\nA Host header field must be sent in all HTTP/1.1 request messages. A 400 (Bad\nRequest) status code will be sent to any HTTP/1.1 request message that lacks a\nHost header field or contains more than one.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.HOST"},{"id":"prose_docs_api_rust_tauri_http_header_constant_IF_MATCH_md","title":"Constant tauri::http::header::IF_MATCH","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::IF_MATCH, ```rs pub const IF_MATCH: HeaderName;\n``` Expand description Makes a request conditional based on the E-Tag. For GET\nand HEAD methods, the server will send back the requested resource only if it\nmatches one of the listed ETags. For PUT and other non-safe methods, it will\nonly upload the resource in this case. The comparison with the stored ETag uses\nthe strong comparison algorithm, meaning two files are considered identical byte\nto byte only. This is weakened when the W/ prefix is used in front of the ETag.\nThere are two common use cases: - For GET and HEAD methods, used in combination\nwith an Range header, it can guarantee that the new ranges requested comes from\nthe same resource than the previous one. If it doesn’t match, then a 416 (Range\nNot Satisfiable) response is returned. - For other methods, and in particular\nfor PUT, If-Match can be used to prevent the lost update problem. It can check\nif the modification of a resource that the user wants to upload will not\noverride another change that has been done since the original resource was\nfetched. If the request cannot be fulfilled, the 412 (Precondition Failed)\nresponse is returned.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.IF_MATCH"},{"id":"prose_docs_api_rust_tauri_http_header_constant_IF_MODIFIED_SINCE_md","title":"Constant tauri::http::header::IF_MODIFIED_SINCE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::IF_MODIFIED_SINCE, ```rs pub const\nIF_MODIFIED_SINCE: HeaderName; ``` Expand description Makes a request\nconditional based on the modification date. The If-Modified-Since request HTTP\nheader makes the request conditional: the server will send back the requested\nresource, with a 200 status, only if it has been last modified after the given\ndate. If the request has not been modified since, the response will be a 304\nwithout any body; the Last-Modified header will contain the date of last\nmodification. Unlike If-Unmodified-Since, If-Modified-Since can only be used\nwith a GET or HEAD. When used in combination with If-None-Match, it is ignored,\nunless the server doesn’t support If-None-Match. The most common use case is to\nupdate a cached entity that has no associated ETag.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.IF_MODIFIED_SINCE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_IF_NONE_MATCH_md","title":"Constant tauri::http::header::IF_NONE_MATCH","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::IF_NONE_MATCH, ```rs pub const IF_NONE_MATCH:\nHeaderName; ``` Expand description Makes a request conditional based on the\nE-Tag. The If-None-Match HTTP request header makes the request conditional. For\nGET and HEAD methods, the server will send back the requested resource, with a\n200 status, only if it doesn’t have an ETag matching the given ones. For other\nmethods, the request will be processed only if the eventually existing\nresource’s ETag doesn’t match any of the values listed. When the condition fails\nfor GET and HEAD methods, then the server must return HTTP status code 304 (Not\nModified). For methods that apply server-side changes, the status code 412\n(Precondition Failed) is used. Note that the server generating a 304 response\nMUST generate any of the following header fields that would have been sent in a\n200 (OK) response to the same request: Cache-Control, Content-Location, Date,\nETag, Expires, and Vary. The comparison with the stored ETag uses the weak\ncomparison algorithm, meaning two files are considered identical not only if\nthey are identical byte to byte, but if the content is equivalent. For example,\ntwo pages that would differ only by the date of generation in the footer would\nbe considered as identical. When used in combination with If-Modified-Since, it\nhas precedence (if the server supports it). There are two common use cases: -\nFor `GET` and `HEAD` methods, to update a cached entity that has an associated\nETag. - For other methods, and in particular for `PUT`, `If-None-Match` used\nwith the `*` value can be used to save a file not known to exist, guaranteeing\nthat another upload didn’t happen before, losing the data of the previous put;\nthis problems is the variation of the lost update problem.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.IF_NONE_MATCH"},{"id":"prose_docs_api_rust_tauri_http_header_constant_IF_RANGE_md","title":"Constant tauri::http::header::IF_RANGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::IF_RANGE, ```rs pub const IF_RANGE: HeaderName;\n``` Expand description Makes a request conditional based on range. The If-Range\nHTTP request header makes a range request conditional: if the condition is\nfulfilled, the range request will be issued and the server sends back a 206\nPartial Content answer with the appropriate body. If the condition is not\nfulfilled, the full resource is sent back, with a 200 OK status. This header can\nbe used either with a Last-Modified validator, or with an ETag, but not with\nboth. The most common use case is to resume a download, to guarantee that the\nstored resource has not been modified since the last fragment has been received.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.IF_RANGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_IF_UNMODIFIED_SINCE_md","title":"Constant tauri::http::header::IF_UNMODIFIED_SINCE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::IF_UNMODIFIED_SINCE, ```rs pub const\nIF_UNMODIFIED_SINCE: HeaderName; ``` Expand description Makes the request\nconditional based on the last modification date. The If-Unmodified-Since request\nHTTP header makes the request conditional: the server will send back the\nrequested resource, or accept it in the case of a POST or another non-safe\nmethod, only if it has not been last modified after the given date. If the\nrequest has been modified after the given date, the response will be a 412\n(Precondition Failed) error. There are two common use cases: - In conjunction\nnon-safe methods, like POST, it can be used to implement an optimistic\nconcurrency control, like done by some wikis: editions are rejected if the\nstored document has been modified since the original has been retrieved. - In\nconjunction with a range request with a If-Range header, it can be used to\nensure that the new fragment requested comes from an unmodified document.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.IF_UNMODIFIED_SINCE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_LAST_MODIFIED_md","title":"Constant tauri::http::header::LAST_MODIFIED","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::LAST_MODIFIED, ```rs pub const LAST_MODIFIED:\nHeaderName; ``` Expand description Content-Types that are acceptable for the\nresponse.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.LAST_MODIFIED"},{"id":"prose_docs_api_rust_tauri_http_header_constant_LINK_md","title":"Constant tauri::http::header::LINK","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::LINK, ```rs pub const LINK: HeaderName; ```\nExpand description Allows the server to point an interested client to another\nresource containing metadata about the requested resource.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.LINK"},{"id":"prose_docs_api_rust_tauri_http_header_constant_LOCATION_md","title":"Constant tauri::http::header::LOCATION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::LOCATION, ```rs pub const LOCATION: HeaderName;\n``` Expand description Indicates the URL to redirect a page to. The Location\nresponse header indicates the URL to redirect a page to. It only provides a\nmeaning when served with a 3xx status response. The HTTP method used to make the\nnew request to fetch the page pointed to by Location depends of the original\nmethod and of the kind of redirection: - If 303 (See Also) responses always lead\nto the use of a GET method, 307 (Temporary Redirect) and 308 (Permanent\nRedirect) don’t change the method used in the original request; - 301 (Permanent\nRedirect) and 302 (Found) doesn’t change the method most of the time, though\nolder user-agents may (so you basically don’t know). All responses with one of\nthese status codes send a Location header. Beside redirect response, messages\nwith 201 (Created) status also include the Location header. It indicates the URL\nto the newly created resource. Location and Content-Location are different:\nLocation indicates the target of a redirection (or the URL of a newly created\nresource), while Content-Location indicates the direct URL to use to access the\nresource when content negotiation happened, without the need of further content\nnegotiation. Location is a header associated with the response, while\nContent-Location is associated with the entity returned.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.LOCATION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_MAX_FORWARDS_md","title":"Constant tauri::http::header::MAX_FORWARDS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::MAX_FORWARDS, ```rs pub const MAX_FORWARDS:\nHeaderName; ``` Expand description Indicates the max number of intermediaries\nthe request should be sent through.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.MAX_FORWARDS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_ORIGIN_md","title":"Constant tauri::http::header::ORIGIN","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::ORIGIN, ```rs pub const ORIGIN: HeaderName; ```\nExpand description Indicates where a fetch originates from. It doesn’t include\nany path information, but only the server name. It is sent with CORS requests,\nas well as with POST requests. It is similar to the Referer header, but, unlike\nthis header, it doesn’t disclose the whole path.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.ORIGIN"},{"id":"prose_docs_api_rust_tauri_http_header_constant_PRAGMA_md","title":"Constant tauri::http::header::PRAGMA","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::PRAGMA, ```rs pub const PRAGMA: HeaderName; ```\nExpand description HTTP/1.0 header usually used for backwards compatibility. The\nPragma HTTP/1.0 general header is an implementation-specific header that may\nhave various effects along the request-response chain. It is used for backwards\ncompatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is\nnot yet present.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.PRAGMA"},{"id":"prose_docs_api_rust_tauri_http_header_constant_PROXY_AUTHENTICATE_md","title":"Constant tauri::http::header::PROXY_AUTHENTICATE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::PROXY_AUTHENTICATE, ```rs pub const\nPROXY_AUTHENTICATE: HeaderName; ``` Expand description Defines the\nauthentication method that should be used to gain access to a proxy. Unlike\n`www-authenticate`, the `proxy-authenticate` header field applies only to the\nnext outbound client on the response chain. This is because only the client that\nchose a given proxy is likely to have the credentials necessary for\nauthentication. However, when multiple proxies are used within the same\nadministrative domain, such as office and regional caching proxies within a\nlarge corporate network, it is common for credentials to be generated by the\nuser agent and passed through the hierarchy until consumed. Hence, in such a\nconfiguration, it will appear as if Proxy-Authenticate is being forwarded\nbecause each proxy will send the same challenge set. The `proxy-authenticate`\nheader is sent along with a `407 Proxy Authentication Required`.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.PROXY_AUTHENTICATE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_PROXY_AUTHORIZATION_md","title":"Constant tauri::http::header::PROXY_AUTHORIZATION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::PROXY_AUTHORIZATION, ```rs pub const\nPROXY_AUTHORIZATION: HeaderName; ``` Expand description Contains the credentials\nto authenticate a user agent to a proxy server. This header is usually included\nafter the server has responded with a 407 Proxy Authentication Required status\nand the Proxy-Authenticate header.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.PROXY_AUTHORIZATION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_PUBLIC_KEY_PINS_md","title":"Constant tauri::http::header::PUBLIC_KEY_PINS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::PUBLIC_KEY_PINS, ```rs pub const\nPUBLIC_KEY_PINS: HeaderName; ``` Expand description Associates a specific\ncryptographic public key with a certain server. This decreases the risk of MITM\nattacks with forged certificates. If one or several keys are pinned and none of\nthem are used by the server, the browser will not accept the response as\nlegitimate, and will not display it.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.PUBLIC_KEY_PINS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_PUBLIC_KEY_PINS_REPORT_ONLY_md","title":"Constant tauri::http::header::PUBLIC_KEY_PINS_REPORT_ONLY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::PUBLIC_KEY_PINS_REPORT_ONLY, ```rs pub const\nPUBLIC_KEY_PINS_REPORT_ONLY: HeaderName; ``` Expand description Sends reports of\npinning violation to the report-uri specified in the header. Unlike\n`Public-Key-Pins`, this header still allows browsers to connect to the server if\nthe pinning is violated.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.PUBLIC_KEY_PINS_REPORT_ONLY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_RANGE_md","title":"Constant tauri::http::header::RANGE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::RANGE, ```rs pub const RANGE: HeaderName; ```\nExpand description Indicates the part of a document that the server should\nreturn. Several parts can be requested with one Range header at once, and the\nserver may send back these ranges in a multipart document. If the server sends\nback ranges, it uses the 206 Partial Content for the response. If the ranges are\ninvalid, the server returns the 416 Range Not Satisfiable error. The server can\nalso ignore the Range header and return the whole document with a 200 status\ncode.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.RANGE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_REFERER_md","title":"Constant tauri::http::header::REFERER","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::REFERER, ```rs pub const REFERER: HeaderName;\n``` Expand description Contains the address of the previous web page from which\na link to the currently requested page was followed. The Referer header allows\nservers to identify where people are visiting them from and may use that data\nfor analytics, logging, or optimized caching, for example.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.REFERER"},{"id":"prose_docs_api_rust_tauri_http_header_constant_REFERRER_POLICY_md","title":"Constant tauri::http::header::REFERRER_POLICY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::REFERRER_POLICY, ```rs pub const\nREFERRER_POLICY: HeaderName; ``` Expand description Governs which referrer\ninformation should be included with requests made.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.REFERRER_POLICY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_REFRESH_md","title":"Constant tauri::http::header::REFRESH","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::REFRESH, ```rs pub const REFRESH: HeaderName;\n``` Expand description Informs the web browser that the current page or frame\nshould be refreshed.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.REFRESH"},{"id":"prose_docs_api_rust_tauri_http_header_constant_RETRY_AFTER_md","title":"Constant tauri::http::header::RETRY_AFTER","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::RETRY_AFTER, ```rs pub const RETRY_AFTER:\nHeaderName; ``` Expand description The Retry-After response HTTP header\nindicates how long the user agent should wait before making a follow-up request.\nThere are two main cases this header is used: - When sent with a 503 (Service\nUnavailable) response, it indicates how long the service is expected to be\nunavailable. - When sent with a redirect response, such as 301 (Moved\nPermanently), it indicates the minimum time that the user agent is asked to wait\nbefore issuing the redirected request.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.RETRY_AFTER"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SEC_WEBSOCKET_ACCEPT_md","title":"Constant tauri::http::header::SEC_WEBSOCKET_ACCEPT","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SEC_WEBSOCKET_ACCEPT, ```rs pub const\nSEC_WEBSOCKET_ACCEPT: HeaderName; ``` Expand description The\n|Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake.\nIt is sent from the server to the client to confirm that the server is willing\nto initiate the WebSocket connection.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SEC_WEBSOCKET_ACCEPT"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SEC_WEBSOCKET_EXTENSIONS_md","title":"Constant tauri::http::header::SEC_WEBSOCKET_EXTENSIONS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SEC_WEBSOCKET_EXTENSIONS, ```rs pub const\nSEC_WEBSOCKET_EXTENSIONS: HeaderName; ``` Expand description The\n|Sec-WebSocket-Extensions| header field is used in the WebSocket opening\nhandshake. It is initially sent from the client to the server, and then\nsubsequently sent from the server to the client, to agree on a set of\nprotocol-level extensions to use for the duration of the connection.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SEC_WEBSOCKET_EXTENSIONS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SEC_WEBSOCKET_KEY_md","title":"Constant tauri::http::header::SEC_WEBSOCKET_KEY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SEC_WEBSOCKET_KEY, ```rs pub const\nSEC_WEBSOCKET_KEY: HeaderName; ``` Expand description The |Sec-WebSocket-Key|\nheader field is used in the WebSocket opening handshake. It is sent from the\nclient to the server to provide part of the information used by the server to\nprove that it received a valid WebSocket opening handshake. This helps ensure\nthat the server does not accept connections from non-WebSocket clients (e.g.,\nHTTP clients) that are being abused to send data to unsuspecting WebSocket\nservers.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SEC_WEBSOCKET_KEY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SEC_WEBSOCKET_PROTOCOL_md","title":"Constant tauri::http::header::SEC_WEBSOCKET_PROTOCOL","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SEC_WEBSOCKET_PROTOCOL, ```rs pub const\nSEC_WEBSOCKET_PROTOCOL: HeaderName; ``` Expand description The\n|Sec-WebSocket-Protocol| header field is used in the WebSocket opening\nhandshake. It is sent from the client to the server and back from the server to\nthe client to confirm the subprotocol of the connection. This enables scripts to\nboth select a subprotocol and be sure that the server agreed to serve that\nsubprotocol.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SEC_WEBSOCKET_PROTOCOL"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SEC_WEBSOCKET_VERSION_md","title":"Constant tauri::http::header::SEC_WEBSOCKET_VERSION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SEC_WEBSOCKET_VERSION, ```rs pub const\nSEC_WEBSOCKET_VERSION: HeaderName; ``` Expand description The\n|Sec-WebSocket-Version| header field is used in the WebSocket opening handshake.\nIt is sent from the client to the server to indicate the protocol version of the\nconnection. This enables servers to correctly interpret the opening handshake\nand subsequent data being sent from the data, and close the connection if the\nserver cannot interpret that data in a safe manner.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SEC_WEBSOCKET_VERSION"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SERVER_md","title":"Constant tauri::http::header::SERVER","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SERVER, ```rs pub const SERVER: HeaderName; ```\nExpand description Contains information about the software used by the origin\nserver to handle the request. Overly long and detailed Server values should be\navoided as they potentially reveal internal implementation details that might\nmake it (slightly) easier for attackers to find and exploit known security\nholes.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SERVER"},{"id":"prose_docs_api_rust_tauri_http_header_constant_SET_COOKIE_md","title":"Constant tauri::http::header::SET_COOKIE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::SET_COOKIE, ```rs pub const SET_COOKIE:\nHeaderName; ``` Expand description Used to send cookies from the server to the\nuser agent.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.SET_COOKIE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_STRICT_TRANSPORT_SECURITY_md","title":"Constant tauri::http::header::STRICT_TRANSPORT_SECURITY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::STRICT_TRANSPORT_SECURITY, ```rs pub const\nSTRICT_TRANSPORT_SECURITY: HeaderName; ``` Expand description Tells the client\nto communicate with HTTPS instead of using HTTP.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.STRICT_TRANSPORT_SECURITY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_TE_md","title":"Constant tauri::http::header::TE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::TE, ```rs pub const TE: HeaderName; ``` Expand\ndescription Informs the server of transfer encodings willing to be accepted as\npart of the response. See also the Transfer-Encoding response header for more\ndetails on transfer encodings. Note that chunked is always acceptable for\nHTTP/1.1 recipients and you that don’t have to specify “chunked” using the TE\nheader. However, it is useful for setting if the client is accepting trailer\nfields in a chunked transfer coding using the “trailers” value.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.TE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_TRAILER_md","title":"Constant tauri::http::header::TRAILER","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::TRAILER, ```rs pub const TRAILER: HeaderName;\n``` Expand description Allows the sender to include additional fields at the end\nof chunked messages.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.TRAILER"},{"id":"prose_docs_api_rust_tauri_http_header_constant_TRANSFER_ENCODING_md","title":"Constant tauri::http::header::TRANSFER_ENCODING","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::TRANSFER_ENCODING, ```rs pub const\nTRANSFER_ENCODING: HeaderName; ``` Expand description Specifies the form of\nencoding used to safely transfer the entity to the client. `transfer-encoding`\nis a hop-by-hop header, that is applying to a message between two nodes, not to\na resource itself. Each segment of a multi-node connection can use different\n`transfer-encoding` values. If you want to compress data over the whole\nconnection, use the end-to-end header `content-encoding` header instead. When\npresent on a response to a `HEAD` request that has no body, it indicates the\nvalue that would have applied to the corresponding `GET` message.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.TRANSFER_ENCODING"},{"id":"prose_docs_api_rust_tauri_http_header_constant_UPGRADE_md","title":"Constant tauri::http::header::UPGRADE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::UPGRADE, ```rs pub const UPGRADE: HeaderName;\n``` Expand description Used as part of the exchange to upgrade the protocol.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.UPGRADE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_UPGRADE_INSECURE_REQUESTS_md","title":"Constant tauri::http::header::UPGRADE_INSECURE_REQUESTS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::UPGRADE_INSECURE_REQUESTS, ```rs pub const\nUPGRADE_INSECURE_REQUESTS: HeaderName; ``` Expand description Sends a signal to\nthe server expressing the client’s preference for an encrypted and authenticated\nresponse.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.UPGRADE_INSECURE_REQUESTS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_USER_AGENT_md","title":"Constant tauri::http::header::USER_AGENT","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::USER_AGENT, ```rs pub const USER_AGENT:\nHeaderName; ``` Expand description Contains a string that allows identifying the\nrequesting client’s software.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.USER_AGENT"},{"id":"prose_docs_api_rust_tauri_http_header_constant_VARY_md","title":"Constant tauri::http::header::VARY","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::VARY, ```rs pub const VARY: HeaderName; ```\nExpand description Determines how to match future requests with cached\nresponses. The `vary` HTTP response header determines how to match future\nrequest headers to decide whether a cached response can be used rather than\nrequesting a fresh one from the origin server. It is used by the server to\nindicate which headers it used when selecting a representation of a resource in\na content negotiation algorithm. The `vary` header should be set on a 304 Not\nModified response exactly like it would have been set on an equivalent 200 OK\nresponse.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.VARY"},{"id":"prose_docs_api_rust_tauri_http_header_constant_VIA_md","title":"Constant tauri::http::header::VIA","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::VIA, ```rs pub const VIA: HeaderName; ``` Expand\ndescription Added by proxies to track routing. The `via` general header is added\nby proxies, both forward and reverse proxies, and can appear in the request\nheaders and the response headers. It is used for tracking message forwards,\navoiding request loops, and identifying the protocol capabilities of senders\nalong the request/response chain.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.VIA"},{"id":"prose_docs_api_rust_tauri_http_header_constant_WARNING_md","title":"Constant tauri::http::header::WARNING","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::WARNING, ```rs pub const WARNING: HeaderName;\n``` Expand description General HTTP header contains information about possible\nproblems with the status of the message. More than one `warning` header may\nappear in a response. Warning header fields can in general be applied to any\nmessage, however some warn-codes are specific to caches and can only be applied\nto response messages.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.WARNING"},{"id":"prose_docs_api_rust_tauri_http_header_constant_WWW_AUTHENTICATE_md","title":"Constant tauri::http::header::WWW_AUTHENTICATE","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::WWW_AUTHENTICATE, ```rs pub const\nWWW_AUTHENTICATE: HeaderName; ``` Expand description Defines the authentication\nmethod that should be used to gain access to a resource.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.WWW_AUTHENTICATE"},{"id":"prose_docs_api_rust_tauri_http_header_constant_X_CONTENT_TYPE_OPTIONS_md","title":"Constant tauri::http::header::X_CONTENT_TYPE_OPTIONS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::X_CONTENT_TYPE_OPTIONS, ```rs pub const\nX_CONTENT_TYPE_OPTIONS: HeaderName; ``` Expand description Marker used by the\nserver to indicate that the MIME types advertised in the `content-type` headers\nshould not be changed and be followed. This allows to opt-out of MIME type\nsniffing, or, in other words, it is a way to say that the webmasters knew what\nthey were doing. This header was introduced by Microsoft in IE 8 as a way for\nwebmasters to block content sniffing that was happening and could transform\nnon-executable MIME types into executable MIME types. Since then, other browsers\nhave introduced it, even if their MIME sniffing algorithms were less aggressive.\nSite security testers usually expect this header to be set.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.X_CONTENT_TYPE_OPTIONS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_X_DNS_PREFETCH_CONTROL_md","title":"Constant tauri::http::header::X_DNS_PREFETCH_CONTROL","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::X_DNS_PREFETCH_CONTROL, ```rs pub const\nX_DNS_PREFETCH_CONTROL: HeaderName; ``` Expand description Controls DNS\nprefetching. The `x-dns-prefetch-control` HTTP response header controls DNS\nprefetching, a feature by which browsers proactively perform domain name\nresolution on both links that the user may choose to follow as well as URLs for\nitems referenced by the document, including images, CSS, JavaScript, and so\nforth. This prefetching is performed in the background, so that the DNS is\nlikely to have been resolved by the time the referenced items are needed. This\nreduces latency when the user clicks a link.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.X_DNS_PREFETCH_CONTROL"},{"id":"prose_docs_api_rust_tauri_http_header_constant_X_FRAME_OPTIONS_md","title":"Constant tauri::http::header::X_FRAME_OPTIONS","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::X_FRAME_OPTIONS, ```rs pub const\nX_FRAME_OPTIONS: HeaderName; ``` Expand description Indicates whether or not a\nbrowser should be allowed to render a page in a frame. Sites can use this to\navoid clickjacking attacks, by ensuring that their content is not embedded into\nother sites. The added security is only provided if the user accessing the\ndocument is using a browser supporting `x-frame-options`.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.X_FRAME_OPTIONS"},{"id":"prose_docs_api_rust_tauri_http_header_constant_X_XSS_PROTECTION_md","title":"Constant tauri::http::header::X_XSS_PROTECTION","sections":[],"subSections":[],"code":["rs"],"text":"# Constant tauri::http::header::X_XSS_PROTECTION, ```rs pub const\nX_XSS_PROTECTION: HeaderName; ``` Expand description Stop pages from loading\nwhen an XSS attack is detected. The HTTP X-XSS-Protection response header is a\nfeature of Internet Explorer, Chrome and Safari that stops pages from loading\nwhen they detect reflected cross-site scripting (XSS) attacks. Although these\nprotections are largely unnecessary in modern browsers when sites implement a\nstrong Content-Security-Policy that disables the use of inline JavaScript\n(‘unsafe-inline’), they can still provide protections for users of older web\nbrowsers that don’t yet support CSP.","url":"https://tauri.studio/docs/api/rust/tauri/http/header/constant.X_XSS_PROTECTION"},{"id":"prose_docs_api_rust_tauri_http_header_enum_Entry_md","title":"Enum tauri::http::header::Entry","sections":["Variants","Implementations","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Enum tauri::http::header::Entry, ```rs pub enum Entry<'a, T> where     T: 'a, \n{ Occupied(OccupiedEntry<'a, T>), Vacant(VacantEntry<'a, T>), } ``` Expand\ndescription A view into a single location in a `HeaderMap`, which may be vacant\nor occupied. ## Variants `Occupied(OccupiedEntry<'a, T>)` An occupied entry\n`Vacant(VacantEntry<'a, T>)` A vacant entry ## Implementations ### impl<'a, T>\n[Entry](/docs/api/rust/tauri/enum.Entry \"enum tauri::http::header::Entry\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2264-2361\n\"goto source code\") #### pub fn\n[or_insert](/docs/api/rust/tauri/about:blank#method.or_insert)(self, default: T)\n-> [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2291\n\"goto source code\") Ensures a value is in the entry by inserting the default if\nempty. Returns a mutable reference to the **first** value in the entry. ##\nExamples ```rs let mut map: HeaderMap = HeaderMap::default(); let headers = &[\n\"content-length\", \"x-hello\", \"Content-Length\", \"x-world\", ]; for &header in\nheaders { let counter = map.entry(header) .or_insert(0); *counter += 1; }\nassert_eq!(map[\"content-length\"], 2); assert_eq!(map[\"x-hello\"], 1); ``` ####\npub fn\n[or_insert_with](/docs/api/rust/tauri/about:blank#method.or_insert_with)<F>(self,\ndefault: F) -> [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait core::ops::function::FnOnce\")() ->\nT,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2334 \"goto\nsource code\") Ensures a value is in the entry by inserting the result of the\ndefault function if empty. The default function is not called if the entry\nexists in the map. Returns a mutable reference to the **first** value in the\nentry. ## Examples Basic usage. ```rs let mut map = HeaderMap::new(); let res =\nmap.entry(\"x-hello\") .or_insert_with(|| \"world\".parse().unwrap());\nassert_eq!(res, \"world\"); ``` The default function is not called if the entry\nexists in the map. ```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"world\".parse().unwrap()); let res = map.entry(\"host\") .or_insert_with(||\nunreachable!()); assert_eq!(res, \"world\"); ``` #### pub fn\n[key](/docs/api/rust/tauri/about:blank#method.key)(&self) ->\n&[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2353\n\"goto source code\") Returns a reference to the entry’s key ## Examples ```rs let\nmut map = HeaderMap::new(); assert_eq!(map.entry(\"x-hello\").key(), \"x-hello\");\n``` ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Entry](/docs/api/rust/tauri/enum.Entry \"enum\ntauri::http::header::Entry\")<'a, T> where T: 'a +\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#156\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#156\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Entry](/docs/api/rust/tauri/enum.Entry\n\"enum tauri::http::header::Entry\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Entry](/docs/api/rust/tauri/enum.Entry \"enum\ntauri::http::header::Entry\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Entry](/docs/api/rust/tauri/enum.Entry \"enum\ntauri::http::header::Entry\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Entry](/docs/api/rust/tauri/enum.Entry \"enum\ntauri::http::header::Entry\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Entry](/docs/api/rust/tauri/enum.Entry\n\"enum tauri::http::header::Entry\")<'a, T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/enum.Entry"},{"id":"prose_docs_api_rust_tauri_http_header_struct_Drain_md","title":"Struct tauri::http::header::Drain","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::Drain, ```rs pub struct Drain<'a, T> { /* fields\nomitted */ } ``` Expand description A drain iterator for `HeaderMap`. ## Trait\nImplementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#135\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#135\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html \"trait\ncore::ops::drop::Drop\") for [Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2253-2257\n\"goto source code\") #### pub fn\n[drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)(&mut\nself)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2254 \"goto\nsource code\") Executes the destructor for this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2199-2249\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n=\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")>,\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) The type of the\nelements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2202\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2239\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2251 \"goto\nsource code\") ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2260 \"goto\nsource code\") ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2259 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Drain](/docs/api/rust/tauri/struct.Drain\n\"struct tauri::http::header::Drain\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Drain](/docs/api/rust/tauri/struct.Drain\n\"struct tauri::http::header::Drain\")<'a, T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.Drain"},{"id":"prose_docs_api_rust_tauri_http_header_struct_GetAll_md","title":"Struct tauri::http::header::GetAll","sections":["Implementations","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::GetAll, ```rs pub struct GetAll<'a, T> { /* fields\nomitted */ } ``` Expand description A view to all values stored in a single\nentry. This struct is returned by `HeaderMap::get_all`. ## Implementations ###\nimpl<'a, T> [GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2456-2485\n\"goto source code\") #### pub fn\n[iter](/docs/api/rust/tauri/about:blank#method.iter)(&self) ->\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>ⓘNotable traits for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>`impl<'a, T> Iterator for ValueIter<'a,\nT> where T: 'a,type Item =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2476\n\"goto source code\") Returns an iterator visiting all values associated with the\nentry. Values are iterated in insertion order. ## Examples ```rs let mut map =\nHeaderMap::new(); map.insert(HOST, \"hello.world\".parse().unwrap());\nmap.append(HOST, \"hello.earth\".parse().unwrap()); let values =\nmap.get_all(\"host\"); let mut iter = values.iter(); assert_eq!(&\"hello.world\",\niter.next().unwrap()); assert_eq!(&\"hello.earth\", iter.next().unwrap());\nassert!(iter.next().is_none()); ``` ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#149\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#149\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for\n[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2493-2500\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The type\nof the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> Which kind of iterator are we turning\nthis into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>ⓘNotable traits for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>`impl<'a, T> Iterator for ValueIter<'a,\nT> where T: 'a,type Item =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2497\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<'a, 'b, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for &'b\n[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where 'b:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2502-2509\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The type\nof the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> Which kind of iterator are we turning\nthis into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>ⓘNotable traits for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>`impl<'a, T> Iterator for ValueIter<'a,\nT> where T: 'a,type Item =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2506\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<'a, T>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[GetAll](/docs/api/rust/tauri/struct.GetAll\n\"struct tauri::http::header::GetAll\")<'a, T>> for\n[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<T>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2487-2491\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2488\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ## Auto Trait Implementations\n### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'a, T> ### impl<'a, T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [GetAll](/docs/api/rust/tauri/struct.GetAll\n\"struct tauri::http::header::GetAll\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.GetAll"},{"id":"prose_docs_api_rust_tauri_http_header_struct_HeaderMap_md","title":"Struct tauri::http::header::HeaderMap","sections":["Examples","Implementations","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Panics","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Errors","Examples","Examples","Examples","Trait Implementations","Panics","Examples","Panics","Examples","Examples","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::HeaderMap, ```rs pub struct HeaderMap { /* fields\nomitted */ } ``` Expand description A set of HTTP headers `HeaderMap` is an\nmultimap of [`HeaderName`](/docs/api/rust/tauri/struct.HeaderName) to values. ##\nExamples Basic usage ```rs let mut headers = HeaderMap::new();\nheaders.insert(HOST, \"example.com\".parse().unwrap());\nheaders.insert(CONTENT_LENGTH, \"123\".parse().unwrap());\nassert!(headers.contains_key(HOST)); assert!(!headers.contains_key(LOCATION));\nassert_eq!(headers[HOST], \"example.com\"); headers.remove(HOST);\nassert!(!headers.contains_key(HOST)); ``` ## Implementations ### impl\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct\ntauri::http::header::HeaderValue\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#426-444\n\"goto source code\") #### pub fn\n[new](/docs/api/rust/tauri/about:blank#method.new)() ->\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct\ntauri::http::header::HeaderValue\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#441\n\"goto source code\") Create an empty `HeaderMap`. The map will be created without\nany capacity. This function will not allocate. ## Examples ```rs let map =\nHeaderMap::new(); assert!(map.is_empty()); assert_eq!(0, map.capacity()); ```\n### impl<T> [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#446-1591\n\"goto source code\") #### pub fn\n[with_capacity](/docs/api/rust/tauri/about:blank#method.with_capacity)(capacity:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#465\n\"goto source code\") Create an empty `HeaderMap` with the specified capacity. The\nreturned map will allocate internal storage in order to hold about `capacity`\nelements without reallocating. However, this is a “best effort” as there are\nusage patterns that could cause additional allocations before `capacity` headers\nare stored in the map. More capacity than requested may be allocated. ##\nExamples ```rs let map: HeaderMap = HeaderMap::with_capacity(10);\nassert!(map.is_empty()); assert_eq!(12, map.capacity()); ``` #### pub fn\n[len](/docs/api/rust/tauri/about:blank#method.len)(&self) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#513\n\"goto source code\") Returns the number of headers stored in the map. This number\nrepresents the total number of **values** stored in the map. This number can be\ngreater than or equal to the number of **keys** stored given that a single key\nmay have more than one associated value. ## Examples ```rs let mut map =\nHeaderMap::new(); assert_eq!(0, map.len()); map.insert(ACCEPT,\n\"text/plain\".parse().unwrap()); map.insert(HOST, \"localhost\".parse().unwrap());\nassert_eq!(2, map.len()); map.append(ACCEPT, \"text/html\".parse().unwrap());\nassert_eq!(3, map.len()); ``` #### pub fn\n[keys_len](/docs/api/rust/tauri/about:blank#method.keys_len)(&self) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#540\n\"goto source code\") Returns the number of keys stored in the map. This number\nwill be less than or equal to `len()` as each key may have more than one\nassociated value. ## Examples ```rs let mut map = HeaderMap::new();\nassert_eq!(0, map.keys_len()); map.insert(ACCEPT,\n\"text/plain\".parse().unwrap()); map.insert(HOST, \"localhost\".parse().unwrap());\nassert_eq!(2, map.keys_len()); map.insert(ACCEPT, \"text/html\".parse().unwrap());\nassert_eq!(2, map.keys_len()); ``` #### pub fn\n[is_empty](/docs/api/rust/tauri/about:blank#method.is_empty)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#559\n\"goto source code\") Returns true if the map contains no elements. ## Examples\n```rs let mut map = HeaderMap::new(); assert!(map.is_empty()); map.insert(HOST,\n\"hello.world\".parse().unwrap()); assert!(!map.is_empty()); ``` #### pub fn\n[clear](/docs/api/rust/tauri/about:blank#method.clear)(&mut\nself)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#578 \"goto\nsource code\") Clears the map, removing all key-value pairs. Keeps the allocated\nmemory for reuse. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(HOST, \"hello.world\".parse().unwrap()); map.clear();\nassert!(map.is_empty()); assert!(map.capacity() > 0); ``` #### pub fn\n[capacity](/docs/api/rust/tauri/about:blank#method.capacity)(&self) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#605\n\"goto source code\") Returns the number of headers the map can hold without\nreallocating. This number is an approximation as certain usage patterns could\ncause additional allocations before the returned capacity is filled. ## Examples\n```rs let mut map = HeaderMap::new(); assert_eq!(0, map.capacity());\nmap.insert(HOST, \"hello.world\".parse().unwrap()); assert_eq!(6, map.capacity());\n``` #### pub fn [reserve](/docs/api/rust/tauri/about:blank#method.reserve)(&mut\nself, additional:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html))[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#631\n\"goto source code\") Reserves capacity for at least `additional` more headers to\nbe inserted into the `HeaderMap`. The header map may reserve more space to avoid\nfrequent reallocations. Like with `with_capacity`, this will be a “best effort”\nto avoid allocations until `additional` more headers are inserted. Certain usage\npatterns could cause additional allocations before the number is reached. ##\nPanics Panics if the new allocation size overflows `usize`. ## Examples ```rs\nlet mut map = HeaderMap::new(); map.reserve(10); ``` #### pub fn\n[get](/docs/api/rust/tauri/about:blank#method.get)<K>(&self, key: K) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>\nwhere K: [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#676-678\n\"goto source code\") Returns a reference to the value associated with the key. If\nthere are multiple values associated with the key, then the first one is\nreturned. Use `get_all` to get all values associated with a given key. Returns\n`None` if there are no values associated with the key. ## Examples ```rs let mut\nmap = HeaderMap::new(); assert!(map.get(\"host\").is_none()); map.insert(HOST,\n\"hello\".parse().unwrap()); assert_eq!(map.get(HOST).unwrap(), &\"hello\");\nassert_eq!(map.get(\"host\").unwrap(), &\"hello\"); map.append(HOST,\n\"world\".parse().unwrap()); assert_eq!(map.get(\"host\").unwrap(), &\"hello\"); ```\n#### pub fn [get_mut](/docs/api/rust/tauri/about:blank#method.get_mut)<K>(&mut\nself, key: K) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>\nwhere K: [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#713-715\n\"goto source code\") Returns a mutable reference to the value associated with the\nkey. If there are multiple values associated with the key, then the first one is\nreturned. Use `entry` to get all values associated with a given key. Returns\n`None` if there are no values associated with the key. ## Examples ```rs let mut\nmap = HeaderMap::default(); map.insert(HOST, \"hello\".to_string());\nmap.get_mut(\"host\").unwrap().push_str(\"-world\");\nassert_eq!(map.get(HOST).unwrap(), &\"hello-world\"); ``` #### pub fn\n[get_all](/docs/api/rust/tauri/about:blank#method.get_all)<K>(&self, key: K) ->\n[GetAll](/docs/api/rust/tauri/struct.GetAll \"struct\ntauri::http::header::GetAll\")<'\\_, T> where K:\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#751-753\n\"goto source code\") Returns a view of all values associated with a key. The\nreturned view does not incur any allocations and allows iterating the values\nassociated with the key. See [`GetAll`](/docs/api/rust/tauri/struct.GetAll) for\nmore details. Returns `None` if there are no values associated with the key. ##\nExamples ```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"hello\".parse().unwrap()); map.append(HOST, \"goodbye\".parse().unwrap()); let\nview = map.get_all(\"host\"); let mut iter = view.iter(); assert_eq!(&\"hello\",\niter.next().unwrap()); assert_eq!(&\"goodbye\", iter.next().unwrap());\nassert!(iter.next().is_none()); ``` #### pub fn\n[contains_key](/docs/api/rust/tauri/about:blank#method.contains_key)<K>(&self,\nkey: K) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere K: [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#774-776\n\"goto source code\") Returns true if the map contains a value for the specified\nkey. ## Examples ```rs let mut map = HeaderMap::new();\nassert!(!map.contains_key(HOST)); map.insert(HOST, \"world\".parse().unwrap());\nassert!(map.contains_key(\"host\")); ``` #### pub fn\n[iter](/docs/api/rust/tauri/about:blank#method.iter)(&self) ->\n[Iter](/docs/api/rust/tauri/struct.Iter \"struct tauri::http::header::Iter\")<'\\_,\nT>ⓘNotable traits for [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T>`impl<'a, T> Iterator for Iter<'a, T>type Item\n= (&'a HeaderName,\n&'aT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#802\n\"goto source code\") An iterator visiting all key-value pairs. The iteration\norder is arbitrary, but consistent across platforms for the same crate version.\nEach key will be yielded once per associated value. So, if a key has 3\nassociated values, it will be yielded 3 times. ## Examples ```rs let mut map =\nHeaderMap::new(); map.insert(HOST, \"hello\".parse().unwrap()); map.append(HOST,\n\"goodbye\".parse().unwrap()); map.insert(CONTENT_LENGTH, \"123\".parse().unwrap());\nfor (key, value) in map.iter() { println!(\"{:?}: {:?}\", key, value); } ``` ####\npub fn [iter_mut](/docs/api/rust/tauri/about:blank#method.iter_mut)(&mut self)\n-> [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'\\_, T>ⓘNotable traits for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T>`impl<'a, T> Iterator for IterMut<'a,\nT>type Item = (&'a HeaderName, &'a\nmutT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#834\n\"goto source code\") An iterator visiting all key-value pairs, with mutable value\nreferences. The iterator order is arbitrary, but consistent across platforms for\nthe same crate version. Each key will be yielded once per associated value, so\nif a key has 3 associated values, it will be yielded 3 times. ## Examples ```rs\nlet mut map = HeaderMap::default(); map.insert(HOST, \"hello\".to_string());\nmap.append(HOST, \"goodbye\".to_string()); map.insert(CONTENT_LENGTH,\n\"123\".to_string()); for (key, value) in map.iter_mut() {\nvalue.push_str(\"-boop\"); } ``` #### pub fn\n[keys](/docs/api/rust/tauri/about:blank#method.keys)(&self) ->\n[Keys](/docs/api/rust/tauri/struct.Keys \"struct tauri::http::header::Keys\")<'\\_,\nT>ⓘNotable traits for [Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T>`impl<'a, T> Iterator for Keys<'a, T>type Item\n= &'a\nHeaderName;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#864\n\"goto source code\") An iterator visiting all keys. The iteration order is\narbitrary, but consistent across platforms for the same crate version. Each key\nwill be yielded only once even if it has multiple associated values. ## Examples\n```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"hello\".parse().unwrap()); map.append(HOST, \"goodbye\".parse().unwrap());\nmap.insert(CONTENT_LENGTH, \"123\".parse().unwrap()); for key in map.keys() {\nprintln!(\"{:?}\", key); } ``` #### pub fn\n[values](/docs/api/rust/tauri/about:blank#method.values)(&self) ->\n[Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'\\_, T>ⓘNotable traits for\n[Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T>`impl<'a, T> Iterator for Values<'a, T>type\nItem =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#890 \"goto\nsource code\") An iterator visiting all values. The iteration order is arbitrary,\nbut consistent across platforms for the same crate version. ## Examples ```rs\nlet mut map = HeaderMap::new(); map.insert(HOST, \"hello\".parse().unwrap());\nmap.append(HOST, \"goodbye\".parse().unwrap()); map.insert(CONTENT_LENGTH,\n\"123\".parse().unwrap()); for value in map.values() { println!(\"{:?}\", value); }\n``` #### pub fn\n[values_mut](/docs/api/rust/tauri/about:blank#method.values_mut)(&mut self) ->\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'\\_, T>ⓘNotable traits for\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a, T>`impl<'a, T> Iterator for ValuesMut<'a,\nT>type Item = &'a\nmutT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#914 \"goto\nsource code\") An iterator visiting all values mutably. The iteration order is\narbitrary, but consistent across platforms for the same crate version. ##\nExamples ```rs let mut map = HeaderMap::default(); map.insert(HOST,\n\"hello\".to_string()); map.append(HOST, \"goodbye\".to_string());\nmap.insert(CONTENT_LENGTH, \"123\".to_string()); for value in map.values_mut() {\nvalue.push_str(\"-boop\"); } ``` #### pub fn\n[drain](/docs/api/rust/tauri/about:blank#method.drain)(&mut self) ->\n[Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'\\_, T>ⓘNotable traits for\n[Drain](/docs/api/rust/tauri/struct.Drain \"struct\ntauri::http::header::Drain\")<'a, T>`impl<'a, T> Iterator for Drain<'a, T>type\nItem = (Option,\nT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#949 \"goto\nsource code\") Clears the map, returning all entries as an iterator. The internal\nmemory is kept for reuse. For each yielded item that has `None` provided for the\n`HeaderName`, then the associated header name is the same as that of the\npreviously yielded item. The first yielded item will have `HeaderName` set. ##\nExamples ```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"hello\".parse().unwrap()); map.append(HOST, \"goodbye\".parse().unwrap());\nmap.insert(CONTENT_LENGTH, \"123\".parse().unwrap()); let mut drain = map.drain();\nassert_eq!(drain.next(), Some((Some(HOST), \"hello\".parse().unwrap())));\nassert_eq!(drain.next(), Some((None, \"goodbye\".parse().unwrap())));\nassert_eq!(drain.next(), Some((Some(CONTENT_LENGTH), \"123\".parse().unwrap())));\nassert_eq!(drain.next(), None); ``` #### pub fn\n[entry](/docs/api/rust/tauri/about:blank#method.entry)<K>(&mut self, key: K) ->\n[Entry](/docs/api/rust/tauri/enum.Entry \"enum tauri::http::header::Entry\")<'\\_,\nT> where K: [IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1044-1046\n\"goto source code\") Gets the given key’s corresponding entry in the map for\nin-place manipulation. ## Examples ```rs let mut map: HeaderMap =\nHeaderMap::default(); let headers = &[ \"content-length\", \"x-hello\",\n\"Content-Length\", \"x-world\", ]; for &header in headers { let counter =\nmap.entry(header).or_insert(0); *counter += 1; }\nassert_eq!(map[\"content-length\"], 2); assert_eq!(map[\"x-hello\"], 1); ``` ####\npub fn [try_entry](/docs/api/rust/tauri/about:blank#method.try_entry)<K>( &mut\nself, key: K ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Entry](/docs/api/rust/tauri/enum.Entry \"enum\ntauri::http::header::Entry\")<'\\_, T>,\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")> where K:\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1060-1062\n\"goto source code\") Gets the given key’s corresponding entry in the map for\nin-place manipulation. ## Errors This method differs from `entry` by allowing\ntypes that may not be valid `HeaderName`s to passed as the key (such as\n`String`). If they do not parse as a valid `HeaderName`, this returns an\n`InvalidHeaderName` error. #### pub fn\n[insert](/docs/api/rust/tauri/about:blank#method.insert)<K>(&mut self, key: K,\nval: T) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<T> where K:\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1131-1133\n\"goto source code\") Inserts a key-value pair into the map. If the map did not\npreviously have this key present, then `None` is returned. If the map did have\nthis key present, the new value is associated with the key and all previous\nvalues are removed. **Note** that only a single one of the previous values is\nreturned. If there are multiple values that have been previously associated with\nthe key, then the first one is returned. See `insert_mult` on `OccupiedEntry`\nfor an API that returns all values. The key is not updated, though; this matters\nfor types that can be `==` without being identical. ## Examples ```rs let mut\nmap = HeaderMap::new(); assert!(map.insert(HOST,\n\"world\".parse().unwrap()).is_none()); assert!(!map.is_empty()); let mut prev =\nmap.insert(HOST, \"earth\".parse().unwrap()).unwrap(); assert_eq!(\"world\", prev);\n``` #### pub fn [append](/docs/api/rust/tauri/about:blank#method.append)<K>(&mut\nself, key: K, value: T) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where K:\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1234-1236\n\"goto source code\") Inserts a key-value pair into the map. If the map did not\npreviously have this key present, then `false` is returned. If the map did have\nthis key present, the new value is pushed to the end of the list of values\ncurrently associated with the key. The key is not updated, though; this matters\nfor types that can be `==` without being identical. ## Examples ```rs let mut\nmap = HeaderMap::new(); assert!(map.insert(HOST,\n\"world\".parse().unwrap()).is_none()); assert!(!map.is_empty()); map.append(HOST,\n\"earth\".parse().unwrap()); let values = map.get_all(\"host\"); let mut i =\nvalues.iter(); assert_eq!(\"world\", *i.next().unwrap()); assert_eq!(\"earth\",\n*i.next().unwrap()); ``` #### pub fn\n[remove](/docs/api/rust/tauri/about:blank#method.remove)<K>(&mut self, key: K)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<T> where K:\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1353-1355\n\"goto source code\") Removes a key from the map, returning the value associated\nwith the key. Returns `None` if the map does not contain the key. If there are\nmultiple values associated with the key, then the first one is returned. See\n`remove_entry_mult` on `OccupiedEntry` for an API that yields all values. ##\nExamples ```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"hello.world\".parse().unwrap()); let prev = map.remove(HOST).unwrap();\nassert_eq!(\"hello.world\", prev); assert!(map.remove(HOST).is_none()); ``` ##\nTrait Implementations ### impl<T>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T> where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#44\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#44\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1978-1982\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1979\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1984-1988\n\"goto source code\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1985\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<T>\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1943-1963\n\"goto source code\") #### pub fn\n[extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend)<I>(&mut\nself, iter: I) where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1944\n\"goto source code\") Extends a collection with the contents of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend)\n#### fn\n[extend_one](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_one)(&mut\nself, item:\nA)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#341\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`extend_one`)\nExtends a collection with exactly one element. #### fn\n[extend_reserve](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve)(&mut\nself, additional:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html))[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#349\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`extend_one`)\nReserves capacity in a collection for the given number of additional elements.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve)\n### impl<T>\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")>,\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1863-1941\n\"goto source code\") #### pub fn\n[extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend)<I>(&mut\nself, iter: I) where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")>,\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1900\n\"goto source code\") Extend a `HeaderMap` with the contents of another\n`HeaderMap`. This function expects the yielded items to follow the same\nstructure as `IntoIter`. ## Panics This panics if the first yielded item does\nnot have a `HeaderName`. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(ACCEPT, \"text/plain\".parse().unwrap()); map.insert(HOST,\n\"hello.world\".parse().unwrap()); let mut extra = HeaderMap::new();\nextra.insert(HOST, \"foo.bar\".parse().unwrap()); extra.insert(COOKIE,\n\"hello\".parse().unwrap()); extra.append(COOKIE, \"world\".parse().unwrap());\nmap.extend(extra); assert_eq!(map[\"host\"], \"foo.bar\"); assert_eq!(map[\"accept\"],\n\"text/plain\"); assert_eq!(map[\"cookie\"], \"hello\"); let v = map.get_all(\"host\");\nassert_eq!(1, v.iter().count()); let v = map.get_all(\"cookie\"); assert_eq!(2,\nv.iter().count()); ``` #### fn\n[extend_one](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_one)(&mut\nself, item:\nA)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#341\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`extend_one`)\nExtends a collection with exactly one element. #### fn\n[extend_reserve](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve)(&mut\nself, additional:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html))[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#349\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`extend_one`)\nReserves capacity in a collection for the given number of additional elements.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve)\n### impl<T>\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1816-1825\n\"goto source code\") #### pub fn\n[from_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter)<I>(iter:\nI) -> [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1817-1819\n\"goto source code\") Creates a value from an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter)\n### impl<'a, K, T>\n[Index](https://doc.rust-lang.org/1.54.0/core/ops/index/trait.Index.html \"trait\ncore::ops::index::Index\")<K> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where K:\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1990-2005\n\"goto source code\") #### pub fn\n[index](https://doc.rust-lang.org/1.54.0/core/ops/index/trait.Index.html#tymethod.index)(&self,\nindex: K) ->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1999\n\"goto source code\") ## Panics Using the index operator will cause a panic if the\nheader you’re querying isn’t set. #### type\n[Output](https://doc.rust-lang.org/1.54.0/core/ops/index/trait.Index.html#associatedtype.Output)\n= T The returned type after indexing. ### impl<'a, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for &'a\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1736-1743\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)&'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"),\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nThe type of the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> Which kind of iterator are we turning this\ninto? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T>ⓘNotable traits for\n[Iter](/docs/api/rust/tauri/struct.Iter \"struct tauri::http::header::Iter\")<'a,\nT>`impl<'a, T> Iterator for Iter<'a, T>type Item = (&'a HeaderName,\n&'aT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1740\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<'a, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for &'a mut\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1745-1752\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)&'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"), [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nThe type of the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> Which kind of iterator are we turning this\ninto? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T>ⓘNotable traits for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T>`impl<'a, T> Iterator for IterMut<'a,\nT>type Item = (&'a HeaderName, &'a\nmutT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1749\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1754-1814\n\"goto source code\") #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T>ⓘNotable traits for\n[IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T>`impl Iterator for IntoItertype Item =\n(Option,\nT);`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1807 \"goto\nsource code\") Creates a consuming iterator, that is, one that moves keys and\nvalues out of the map in arbitrary order. The map cannot be used after calling\nthis. For each yielded item that has `None` provided for the `HeaderName`, then\nthe associated header name is the same as that of the previously yielded item.\nThe first yielded item will have `HeaderName` set. ## Examples Basic usage.\n```rs let mut map = HeaderMap::new(); map.insert(header::CONTENT_LENGTH,\n\"123\".parse().unwrap()); map.insert(header::CONTENT_TYPE,\n\"json\".parse().unwrap()); let mut iter = map.into_iter();\nassert_eq!(iter.next(), Some((Some(header::CONTENT_LENGTH),\n\"123\".parse().unwrap()))); assert_eq!(iter.next(),\nSome((Some(header::CONTENT_TYPE), \"json\".parse().unwrap())));\nassert!(iter.next().is_none()); ``` Multiple values per key. ```rs let mut map =\nHeaderMap::new(); map.append(header::CONTENT_LENGTH, \"123\".parse().unwrap());\nmap.append(header::CONTENT_LENGTH, \"456\".parse().unwrap());\nmap.append(header::CONTENT_TYPE, \"json\".parse().unwrap());\nmap.append(header::CONTENT_TYPE, \"html\".parse().unwrap());\nmap.append(header::CONTENT_TYPE, \"xml\".parse().unwrap()); let mut iter =\nmap.into_iter(); assert_eq!(iter.next(), Some((Some(header::CONTENT_LENGTH),\n\"123\".parse().unwrap()))); assert_eq!(iter.next(), Some((None,\n\"456\".parse().unwrap()))); assert_eq!(iter.next(),\nSome((Some(header::CONTENT_TYPE), \"json\".parse().unwrap())));\nassert_eq!(iter.next(), Some((None, \"html\".parse().unwrap())));\nassert_eq!(iter.next(), Some((None, \"xml\".parse().unwrap())));\nassert!(iter.next().is_none()); ``` #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n=\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")>,\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) The type of the\nelements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> Which kind of iterator are we turning this\ninto? ### impl<T>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T>> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where T:\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<T>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1965-1974\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1966\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a, K, V, T>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct std::collections::hash::map::HashMap\")<K, V,\n[RandomState](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.RandomState.html\n\"struct std::collections::hash::map::RandomState\")>> for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where T:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)V>,\nK: [Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") +\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\"), [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"):\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)K>,\n<[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)K>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Error](https://docs.rs/http/0.2.4/http/error/struct.Error.html\n\"struct http::error::Error\")>, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)V>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\"):\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Error](https://docs.rs/http/0.2.4/http/error/struct.Error.html\n\"struct\nhttp::error::Error\")>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1842-1861\n\"goto source code\") Try to convert a `HashMap` into a `HeaderMap`. ## Examples\n```rs use std::collections::HashMap; use std::convert::TryInto; use\nhttp::HeaderMap; let mut map = HashMap::new();\nmap.insert(\"X-Custom-Header\".to_string(), \"my value\".to_string()); let headers:\nHeaderMap = (&map).try_into().expect(\"valid headers\");\nassert_eq!(headers[\"X-Custom-Header\"], \"my value\"); ``` #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [Error](https://docs.rs/http/0.2.4/http/error/struct.Error.html \"struct\nhttp::error::Error\") The type returned in the event of a conversion error. ####\npub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nc: &'a\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct std::collections::hash::map::HashMap\")<K, V,\n[RandomState](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.RandomState.html\n\"struct std::collections::hash::map::RandomState\")> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T>,\n<[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct std::collections::hash::map::HashMap\")<K, V,\n[RandomState](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.RandomState.html\n\"struct\nstd::collections::hash::map::RandomState\")>>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1852\n\"goto source code\") Performs the conversion. ### impl<T>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where T:\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#1976 \"goto\nsource code\") ## Auto Trait Implementations ### impl<T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [HeaderMap](/docs/api/rust/tauri/struct.HeaderMap\n\"struct tauri::http::header::HeaderMap\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[HeaderMap](/docs/api/rust/tauri/struct.HeaderMap \"struct\ntauri::http::header::HeaderMap\")<T> where T:\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.HeaderMap"},{"id":"prose_docs_api_rust_tauri_http_header_struct_HeaderName_md","title":"Struct tauri::http::header::HeaderName","sections":["Representation","Implementations","Examples","Examples","Trait Implementations","Examples","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl ","impl ","impl ","impl","impl","impl ","impl","impl ","impl","impl","impl","impl","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::HeaderName, ```rs pub struct HeaderName { /*\nfields omitted */ } ``` Expand description Represents an HTTP header field name\nHeader field names identify the header. Header sets may include multiple headers\nwith the same name. The HTTP specification defines a number of standard headers,\nbut HTTP messages may include non-standard header names as well as long as they\nadhere to the specification. `HeaderName` is used as the\n[`HeaderMap`](/docs/api/rust/tauri/struct.HeaderMap) key. Constants are\navailable for all standard header names in the\n[`header`](/docs/api/rust/tauri/index) module. ## Representation `HeaderName`\nrepresents standard header names using an `enum`, as such they will not require\nan allocation for storage. All custom header names are lower cased upon\nconversion to a `HeaderName` value. This avoids the overhead of dynamically\ndoing lower case conversion during the hash code computation and the comparison\noperation. ## Implementations ### impl\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1649-1807\n\"goto source code\") #### pub fn\n[from_bytes](/docs/api/rust/tauri/about:blank#method.from_bytes)(src:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1654\n\"goto source code\") Converts a slice of bytes to an HTTP header name. This\nfunction normalizes the input. #### pub fn\n[from_lowercase](/docs/api/rust/tauri/about:blank#method.from_lowercase)(src:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1704\n\"goto source code\") Converts a slice of bytes to an HTTP header name. This\nfunction expects the input to only contain lowercase characters. This is useful\nwhen decoding HTTP/2.0 or HTTP/3.0 headers. Both require that all headers be\nrepresented in lower case. ## Examples ```rs // Parsing a lower case header let\nhdr = HeaderName::from_lowercase(b\"content-length\").unwrap();\nassert_eq!(CONTENT_LENGTH, hdr); // Parsing a header that contains uppercase\ncharacters assert!(HeaderName::from_lowercase(b\"Content-Length\").is_err()); ```\n#### pub fn\n[from_static](/docs/api/rust/tauri/about:blank#method.from_static)(src: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1764\n\"goto source code\") Converts a static string to a HTTP header name. This\nfunction panics when the static string is a invalid header. This function\nrequires the static string to only contain lowercase characters, numerals and\nsymbols, as per the HTTP/2.0 specification and header names internal\nrepresentation within this library. ## Examples ```rs // Parsing a standard\nheader let hdr = HeaderName::from_static(\"content-length\");\nassert_eq!(CONTENT_LENGTH, hdr); // Parsing a custom header let CUSTOM_HEADER:\n&'static str = \"custom-header\"; let a =\nHeaderName::from_lowercase(b\"custom-header\").unwrap(); let b =\nHeaderName::from_static(CUSTOM_HEADER); assert_eq!(a, b); ``` ⓘ ```rs // Parsing\na header that contains invalid symbols(s):\nHeaderName::from_static(\"content{}{}length\"); // This line panics! // Parsing a\nheader that contains invalid uppercase characters. let a =\nHeaderName::from_static(\"foobar\"); let b = HeaderName::from_static(\"FOOBAR\"); //\nThis line panics! ``` #### pub fn\n[as_str](/docs/api/rust/tauri/about:blank#method.as_str)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1797\n\"goto source code\") Returns a `str` representation of the header. The returned\nstring will always be lower case. ## Trait Implementations ### impl\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1823-1827\n\"goto source code\") #### pub fn\n[as_ref](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html#tymethod.as_ref)(&self)\n->\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1824\n\"goto source code\") Performs the conversion. ### impl\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1817-1821\n\"goto source code\") #### pub fn\n[as_ref](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html#tymethod.as_ref)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1818\n\"goto source code\") Performs the conversion. ### impl\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1829-1833\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1830\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl [Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html\n\"trait core::clone::Clone\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1835-1839\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1836\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1841-1845\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1842\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl<'a>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<&'a [HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1853-1857\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(src:\n&'a [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1854\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#371-379\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(h:\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#373\n\"goto source code\") Performs the conversion. ### impl\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait core::str::traits::FromStr\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1809-1815\n\"goto source code\") #### type\n[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err)\n= [InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") The associated error which can be\nreturned from parsing. #### pub fn\n[from_str](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)(s:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1812\n\"goto source code\") Parses a string `s` to return a value of this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<&'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1921-1926\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &&'a [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1923\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1973-1980\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &&'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1977\n\"goto source code\") Performs a case-insensitive comparison of the string against\nthe header name #### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")> for &'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1928-1933\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1930\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1935-1952\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1949\n\"goto source code\") Performs a case-insensitive comparison of the string against\nthe header name ## Examples ```rs use http::header::CONTENT_LENGTH;\nassert_eq!(CONTENT_LENGTH, \"content-length\"); assert_eq!(CONTENT_LENGTH,\n\"Content-Length\"); assert_ne!(CONTENT_LENGTH, \"content length\"); ``` ####\n\\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1895-1901\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\ns: [&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)\n) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n<[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1898\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1887-1893\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\ns: &'a [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n<[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1890\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1879-1885\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\ns: &'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n<[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1882\n\"goto source code\") Performs the conversion. ### impl<'a>\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\") for &'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3428 \"goto\nsource code\") ### impl [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName\n\"trait tauri::http::header::AsHeaderName\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3407 \"goto\nsource code\") ### impl\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31 \"goto\nsource code\") ### impl<'a>\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\") for &'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3336 \"goto\nsource code\") ### impl\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3315 \"goto\nsource code\") ### impl\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31 \"goto\nsource code\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#31 \"goto\nsource code\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.HeaderName"},{"id":"prose_docs_api_rust_tauri_http_header_struct_HeaderValue_md","title":"Struct tauri::http::header::HeaderValue","sections":["Implementations","Panics","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl ","impl ","impl","impl ","impl ","impl","impl ","impl","impl ","impl ","impl ","impl","impl","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::HeaderValue, ```rs pub struct HeaderValue { /*\nfields omitted */ } ``` Expand description Represents an HTTP header field\nvalue. In practice, HTTP header field values are usually valid ASCII. However,\nthe HTTP spec allows for a header value to contain opaque bytes as well. In this\ncase, the header field value is not able to be represented as a string. To\nhandle this, the `HeaderValue` is useable as a type and can be compared with\nstrings and implements `Debug`. A `to_str` fn is provided that returns an `Err`\nif the header value contains non visible ascii characters. ## Implementations\n### impl [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#40-334\n\"goto source code\") #### pub fn\n[from_static](/docs/api/rust/tauri/about:blank#method.from_static)(src: &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#60\n\"goto source code\") Convert a static string to a `HeaderValue`. This function\nwill not perform any copying, however the string is checked to ensure that no\ninvalid characters are present. Only visible ASCII characters (32-127) are\npermitted. ## Panics This function panics if the argument contains invalid\nheader value characters. ## Examples ```rs let val =\nHeaderValue::from_static(\"hello\"); assert_eq!(val, \"hello\"); ``` #### pub fn\n[from_str](/docs/api/rust/tauri/about:blank#method.from_str)(src:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#100\n\"goto source code\") Attempt to convert a string to a `HeaderValue`. If the\nargument contains invalid header value characters, an error is returned. Only\nvisible ASCII characters (32-127) are permitted. Use `from_bytes` to create a\n`HeaderValue` that includes opaque octets (128-255). This function is intended\nto be replaced in the future by a `TryFrom` implementation once the trait is\nstabilized in std. ## Examples ```rs let val =\nHeaderValue::from_str(\"hello\").unwrap(); assert_eq!(val, \"hello\"); ``` An\ninvalid value ```rs let val = HeaderValue::from_str(\"\\n\");\nassert!(val.is_err()); ``` #### pub fn\n[from_name](/docs/api/rust/tauri/about:blank#method.from_name)(name:\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#117\n\"goto source code\") Converts a HeaderName into a HeaderValue Since every valid\nHeaderName is a valid HeaderValue this is done infallibly. ## Examples ```rs let\nval = HeaderValue::from_name(ACCEPT); assert_eq!(val,\nHeaderValue::from_bytes(b\"accept\").unwrap()); ``` #### pub fn\n[from_bytes](/docs/api/rust/tauri/about:blank#method.from_bytes)(src:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#146\n\"goto source code\") Attempt to convert a byte slice to a `HeaderValue`. If the\nargument contains invalid header value bytes, an error is returned. Only byte\nvalues between 32 and 255 (inclusive) are permitted, excluding byte 127 (DEL).\nThis function is intended to be replaced in the future by a `TryFrom`\nimplementation once the trait is stabilized in std. ## Examples ```rs let val =\nHeaderValue::from_bytes(b\"hello\\xfa\").unwrap(); assert_eq!(val,\n&b\"hello\\xfa\"[..]); ``` An invalid value ```rs let val =\nHeaderValue::from_bytes(b\"\\n\"); assert!(val.is_err()); ``` #### pub fn\n[from_maybe_shared](/docs/api/rust/tauri/about:blank#method.from_maybe_shared)<T>(src:\nT) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")> where T:\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\n+\n'static,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#154-156\n\"goto source code\") Attempt to convert a `Bytes` buffer to a `HeaderValue`. This\nwill try to prevent a copy if the type passed is the type used internally, and\nwill copy the data if it is not. #### pub unsafe fn\n[from_maybe_shared_unchecked](/docs/api/rust/tauri/about:blank#method.from_maybe_shared_unchecked)<T>(src:\nT) -> [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") where T:\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\n+\n'static,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#169-171\n\"goto source code\") Convert a `Bytes` directly into a `HeaderValue` without\nvalidating. This function does NOT validate that illegal bytes are not contained\nwithin the buffer. #### pub fn\n[to_str](/docs/api/rust/tauri/about:blank#method.to_str)(&self) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html),\n[ToStrError](/docs/api/rust/tauri/struct.ToStrError \"struct\ntauri::http::header::ToStrError\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#226\n\"goto source code\") Yields a `&str` slice if the `HeaderValue` only contains\nvisible ASCII chars. This function will perform a scan of the header value,\nchecking all the characters. ## Examples ```rs let val =\nHeaderValue::from_static(\"hello\"); assert_eq!(val.to_str().unwrap(), \"hello\");\n``` #### pub fn [len](/docs/api/rust/tauri/about:blank#method.len)(&self) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#250\n\"goto source code\") Returns the length of `self`. This length is in bytes. ##\nExamples ```rs let val = HeaderValue::from_static(\"hello\");\nassert_eq!(val.len(), 5); ``` #### pub fn\n[is_empty](/docs/api/rust/tauri/about:blank#method.is_empty)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#267\n\"goto source code\") Returns true if the `HeaderValue` has a length of zero\nbytes. ## Examples ```rs let val = HeaderValue::from_static(\"\");\nassert!(val.is_empty()); let val = HeaderValue::from_static(\"hello\");\nassert!(!val.is_empty()); ``` #### pub fn\n[as_bytes](/docs/api/rust/tauri/about:blank#method.as_bytes)(&self) ->\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#281\n\"goto source code\") Converts a `HeaderValue` to a byte slice. ## Examples ```rs\nlet val = HeaderValue::from_static(\"hello\"); assert_eq!(val.as_bytes(),\nb\"hello\"); ``` #### pub fn\n[set_sensitive](/docs/api/rust/tauri/about:blank#method.set_sensitive)(&mut\nself, val:\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#300\n\"goto source code\") Mark that the header value represents sensitive information.\n## Examples ```rs let mut val = HeaderValue::from_static(\"my secret\");\nval.set_sensitive(true); assert!(val.is_sensitive()); val.set_sensitive(false);\nassert!(!val.is_sensitive()); ``` #### pub fn\n[is_sensitive](/docs/api/rust/tauri/about:blank#method.is_sensitive)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#331\n\"goto source code\") Returns `true` if the value represents sensitive data.\nSensitive data could represent passwords or other data that should not be stored\non disk or in memory. By marking header values as sensitive, components using\nthis crate can be instructed to treat them with special care for security\nreasons. For example, caches can avoid storing sensitive values, and HPACK\nencoders used by HTTP/2.0 implementations can choose not to compress them.\nAdditionally, sensitive values will be masked by the `Debug` implementation of\n`HeaderValue`. Note that sensitivity is not factored into equality or ordering.\n## Examples ```rs let mut val = HeaderValue::from_static(\"my secret\");\nval.set_sensitive(true); assert!(val.is_sensitive()); val.set_sensitive(false);\nassert!(!val.is_sensitive()); ``` ## Trait Implementations ### impl\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#336-341\n\"goto source code\") #### pub fn\n[as_ref](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html#tymethod.as_ref)(&self)\n->\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#338\n\"goto source code\") Performs the conversion. ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#19\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#19\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#343-369\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#344\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<&'a [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#493-498\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\n&'a [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#495\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#371-379\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(h:\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#373\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[i16](https://doc.rust-lang.org/1.54.0/std/primitive.i16.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[i16](https://doc.rust-lang.org/1.54.0/std/primitive.i16.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[i64](https://doc.rust-lang.org/1.54.0/std/primitive.i64.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[i64](https://doc.rust-lang.org/1.54.0/std/primitive.i64.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[isize](https://doc.rust-lang.org/1.54.0/std/primitive.isize.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#452-455\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[isize](https://doc.rust-lang.org/1.54.0/std/primitive.isize.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#452-455\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[u64](https://doc.rust-lang.org/1.54.0/std/primitive.u64.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#427-437\n\"goto source code\") Performs the conversion. ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#452-455\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(num:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#452-455\n\"goto source code\") Performs the conversion. ### impl\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait core::str::traits::FromStr\") for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#484-491\n\"goto source code\") #### type\n[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The associated error which can be\nreturned from parsing. #### pub fn\n[from_str](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)(s:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait\ncore::str::traits::FromStr\")>::[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err\n\"type\ncore::str::traits::FromStr::Err\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#488\n\"goto source code\") Parses a string `s` to return a value of this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#19\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#19\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl [Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#609-614\n\"goto source code\") #### pub fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)(&self,\nother: &[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#611\n\"goto source code\") This method returns an\n[`Ordering`](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"Ordering\") between `self` and `other`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)\n#### \\#\\[must_use]fn\n[max](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#738-740\n\"goto source code\") Compares and returns the maximum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max) ####\n\\#\\[must_use]fn\n[min](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#758-760\n\"goto source code\") Compares and returns the minimum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min) ####\n\\#\\[must_use]fn\n[clamp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp)(self,\nmin: Self, max: Self) ->\nSelf1.50.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#783-785\n\"goto source code\") Restrict a value to a certain interval. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp) ###\nimpl<'a, T>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<T>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#714-722\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#719\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#623-628\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#625\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#593-598\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#595\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> for &'a\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#700-705\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#702\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#672-677\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother:\n&[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#674\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#616-621\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#618\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a, T>\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"), [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<T>,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#724-732\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#729\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#637-642\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#639\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl<'a>\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> for &'a\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#707-712\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#709\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#602-607\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#604\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#679-684\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother:\n&[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#681\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#630-635\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#632\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#517-524\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: [&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)\n) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#521\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#509-515\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\ns: &'a [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#512\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#500-507\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: &'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#504\n\"goto source code\") Performs the conversion. ### impl\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#526-533\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\") ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#530\n\"goto source code\") Performs the conversion. ### impl\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>> for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#535-542\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nvec: [Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\"),\n<[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct\nalloc::vec::Vec\")<[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")>>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#539\n\"goto source code\") Performs the conversion. ### impl\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#600 \"goto\nsource code\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [HeaderValue](/docs/api/rust/tauri/struct.HeaderValue\n\"struct tauri::http::header::HeaderValue\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[HeaderValue](/docs/api/rust/tauri/struct.HeaderValue \"struct\ntauri::http::header::HeaderValue\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.HeaderValue"},{"id":"prose_docs_api_rust_tauri_http_header_struct_IntoIter_md","title":"Struct tauri::http::header::IntoIter","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::IntoIter, ```rs pub struct IntoIter { /* fields\nomitted */ } ``` Expand description An owning iterator over the entries of a\n`HeaderMap`. This struct is created by the `into_iter` method on `HeaderMap`. ##\nTrait Implementations ### impl<T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#103\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#103\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<T>\n[Drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html \"trait\ncore::ops::drop::Drop\") for [IntoIter](/docs/api/rust/tauri/struct.IntoIter\n\"struct\ntauri::http::header::IntoIter\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2724-2734\n\"goto source code\") #### pub fn\n[drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)(&mut\nself)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2725 \"goto\nsource code\") Executes the destructor for this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)\n### impl<T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2687-2720\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n=\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\")>,\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) The type of the\nelements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[IntoIter](/docs/api/rust/tauri/struct.IntoIter\n\"struct tauri::http::header::IntoIter\")<T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2690\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2713\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2722 \"goto\nsource code\") ## Auto Trait Implementations ### impl<T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [IntoIter](/docs/api/rust/tauri/struct.IntoIter\n\"struct tauri::http::header::IntoIter\")<T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[IntoIter](/docs/api/rust/tauri/struct.IntoIter \"struct\ntauri::http::header::IntoIter\")<T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") +\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.IntoIter"},{"id":"prose_docs_api_rust_tauri_http_header_struct_InvalidHeaderName_md","title":"Struct tauri::http::header::InvalidHeaderName","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::InvalidHeaderName, ```rs pub struct\nInvalidHeaderName { /* fields omitted */ } ``` Expand description A possible\nerror when converting a `HeaderName` from another type. ## Trait Implementations\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1991-1997\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1992\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#1999-2003\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#2000\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/name.rs.html#2005\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName\n\"struct tauri::http::header::InvalidHeaderName\")> for\n[Error](/docs/api/rust/tauri/../../api/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/error.rs#6 \"goto\nsource code\") Performs the conversion. ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvalidHeaderName](/docs/api/rust/tauri/struct.InvalidHeaderName \"struct\ntauri::http::header::InvalidHeaderName\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.InvalidHeaderName"},{"id":"prose_docs_api_rust_tauri_http_header_struct_InvalidHeaderValue_md","title":"Struct tauri::http::header::InvalidHeaderValue","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::InvalidHeaderValue, ```rs pub struct\nInvalidHeaderValue { /* fields omitted */ } ``` Expand description A possible\nerror when converting a `HeaderValue` from a string or byte slice. ## Trait\nImplementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#567-573\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#568\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#575-579\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#576\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#581\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvalidHeaderValue](/docs/api/rust/tauri/struct.InvalidHeaderValue \"struct\ntauri::http::header::InvalidHeaderValue\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.InvalidHeaderValue"},{"id":"prose_docs_api_rust_tauri_http_header_struct_Iter_md","title":"Struct tauri::http::header::Iter","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::Iter, ```rs pub struct Iter<'a, T> { /* fields\nomitted */ } ``` Expand description `HeaderMap` entry iterator. Yields\n`(&HeaderName, &value)` tuples. The same header name may be yielded more than\nonce if it has more than one associated value. ## Trait Implementations ###\nimpl<'a, T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#83\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#83\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[Iter](/docs/api/rust/tauri/struct.Iter \"struct tauri::http::header::Iter\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2067-2079\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)&'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"),\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nThe type of the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2070\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2076\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[Iter](/docs/api/rust/tauri/struct.Iter \"struct tauri::http::header::Iter\")<'a,\nT> [\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2081 \"goto\nsource code\") ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2084 \"goto\nsource code\") ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2083 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Iter](/docs/api/rust/tauri/struct.Iter\n\"struct tauri::http::header::Iter\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Iter](/docs/api/rust/tauri/struct.Iter \"struct\ntauri::http::header::Iter\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Iter](/docs/api/rust/tauri/struct.Iter\n\"struct tauri::http::header::Iter\")<'a, T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.Iter"},{"id":"prose_docs_api_rust_tauri_http_header_struct_IterMut_md","title":"Struct tauri::http::header::IterMut","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::IterMut, ```rs pub struct IterMut<'a, T> { /*\nfields omitted */ } ``` Expand description `HeaderMap` mutable entry iterator\nYields `(&HeaderName, &mut value)` tuples. The same header name may be yielded\nmore than once if it has more than one associated value. ## Trait\nImplementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#92\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#92\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2122-2141\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)&'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\"), [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)\nThe type of the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[IterMut](/docs/api/rust/tauri/struct.IterMut\n\"struct tauri::http::header::IterMut\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2125\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2130\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2143 \"goto\nsource code\") ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2146 \"goto\nsource code\") ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2145 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[IterMut](/docs/api/rust/tauri/struct.IterMut \"struct\ntauri::http::header::IterMut\")<'a, T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.IterMut"},{"id":"prose_docs_api_rust_tauri_http_header_struct_Keys_md","title":"Struct tauri::http::header::Keys","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::Keys, ```rs pub struct Keys<'a, T> { /* fields\nomitted */ } ``` Expand description An iterator over `HeaderMap` keys. Each\nheader name is yielded only once, even if it has more than one associated value.\n## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#115\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#115\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") for\n[Keys](/docs/api/rust/tauri/struct.Keys \"struct tauri::http::header::Keys\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2162 \"goto\nsource code\") #### fn\n[len](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html#method.len)(&self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/exact_size.rs.html#103\n\"goto source code\") Returns the exact length of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html#method.len)\n#### fn\n[is_empty](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html#method.is_empty)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/exact_size.rs.html#135\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`exact_size_is_empty`) Returns `true` if the iterator is empty. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html#method.is_empty)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[Keys](/docs/api/rust/tauri/struct.Keys \"struct tauri::http::header::Keys\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2150-2160\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= &'a [HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\") The type of the elements being iterated over.\n#### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2153\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2157\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[Keys](/docs/api/rust/tauri/struct.Keys \"struct tauri::http::header::Keys\")<'a,\nT> [\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2163 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for [Keys](/docs/api/rust/tauri/struct.Keys\n\"struct tauri::http::header::Keys\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Keys](/docs/api/rust/tauri/struct.Keys \"struct\ntauri::http::header::Keys\")<'a, T> ### impl<'a, T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Keys](/docs/api/rust/tauri/struct.Keys\n\"struct tauri::http::header::Keys\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.Keys"},{"id":"prose_docs_api_rust_tauri_http_header_struct_OccupiedEntry_md","title":"Struct tauri::http::header::OccupiedEntry","sections":["Implementations","Examples","Panics","Examples","Panics","Examples","Panics","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::OccupiedEntry, ```rs pub struct OccupiedEntry<'a,\nT> { /* fields omitted */ } ``` Expand description A view into a single occupied\nlocation in a `HeaderMap`. This struct is returned as part of the `Entry` enum.\n## Implementations ### impl<'a, T>\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2738-3037\n\"goto source code\") #### pub fn\n[key](/docs/api/rust/tauri/about:blank#method.key)(&self) ->\n&[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2752\n\"goto source code\") Returns a reference to the entry’s key. ## Examples ```rs\nlet mut map = HeaderMap::new(); map.insert(HOST, \"world\".parse().unwrap()); if\nlet Entry::Occupied(e) = map.entry(\"host\") { assert_eq!(\"host\", e.key()); } ```\n#### pub fn [get](/docs/api/rust/tauri/about:blank#method.get)(&self) ->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2779\n\"goto source code\") Get a reference to the first value in the entry. Values are\nstored in insertion order. ## Panics `get` panics if there are no values\nassociated with the entry. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(HOST, \"hello.world\".parse().unwrap()); if let Entry::Occupied(mut e)\n= map.entry(\"host\") { assert_eq!(e.get(), &\"hello.world\");\ne.append(\"hello.earth\".parse().unwrap()); assert_eq!(e.get(), &\"hello.world\"); }\n``` #### pub fn [get_mut](/docs/api/rust/tauri/about:blank#method.get_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2803\n\"goto source code\") Get a mutable reference to the first value in the entry.\nValues are stored in insertion order. ## Panics `get_mut` panics if there are no\nvalues associated with the entry. ## Examples ```rs let mut map =\nHeaderMap::default(); map.insert(HOST, \"hello.world\".to_string()); if let\nEntry::Occupied(mut e) = map.entry(\"host\") { e.get_mut().push_str(\"-2\");\nassert_eq!(e.get(), &\"hello.world-2\"); } ``` #### pub fn\n[into_mut](/docs/api/rust/tauri/about:blank#method.into_mut)(self) -> [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2830\n\"goto source code\") Converts the `OccupiedEntry` into a mutable reference to the\n**first** value. The lifetime of the returned reference is bound to the original\nmap. ## Panics `into_mut` panics if there are no values associated with the\nentry. ## Examples ```rs let mut map = HeaderMap::default(); map.insert(HOST,\n\"hello.world\".to_string()); map.append(HOST, \"hello.earth\".to_string()); if let\nEntry::Occupied(e) = map.entry(\"host\") { e.into_mut().push_str(\"-2\"); }\nassert_eq!(\"hello.world-2\", map[\"host\"]); ``` #### pub fn\n[insert](/docs/api/rust/tauri/about:blank#method.insert)(&mut self, value: T) ->\nT[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2853 \"goto\nsource code\") Sets the value of the entry. All previous values associated with\nthe entry are removed and the first one is returned. See `insert_mult` for an\nAPI that returns all values. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(HOST, \"hello.world\".parse().unwrap()); if let Entry::Occupied(mut e)\n= map.entry(\"host\") { let mut prev = e.insert(\"earth\".parse().unwrap());\nassert_eq!(\"hello.world\", prev); } assert_eq!(\"earth\", map[\"host\"]); ``` ####\npub fn [insert_mult](/docs/api/rust/tauri/about:blank#method.insert_mult)(&mut\nself, value: T) -> [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'\\_, T>ⓘNotable traits for\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a, T>`impl<'a, T> Iterator for ValueDrain<'a,\nT>type Item =\nT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2879 \"goto\nsource code\") Sets the value of the entry. This function does the same as\n`insert` except it returns an iterator that yields all values previously\nassociated with the key. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(HOST, \"world\".parse().unwrap()); map.append(HOST,\n\"world2\".parse().unwrap()); if let Entry::Occupied(mut e) = map.entry(\"host\") {\nlet mut prev = e.insert_mult(\"earth\".parse().unwrap()); assert_eq!(\"world\",\nprev.next().unwrap()); assert_eq!(\"world2\", prev.next().unwrap());\nassert!(prev.next().is_none()); } assert_eq!(\"earth\", map[\"host\"]); ``` #### pub\nfn [append](/docs/api/rust/tauri/about:blank#method.append)(&mut self, value:\nT)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2904 \"goto\nsource code\") Insert the value into the entry. The new value is appended to the\nend of the entry’s value list. All previous values associated with the entry are\nretained. ## Examples ```rs let mut map = HeaderMap::new(); map.insert(HOST,\n\"world\".parse().unwrap()); if let Entry::Occupied(mut e) = map.entry(\"host\") {\ne.append(\"earth\".parse().unwrap()); } let values = map.get_all(\"host\"); let mut\ni = values.iter(); assert_eq!(\"world\", *i.next().unwrap()); assert_eq!(\"earth\",\n*i.next().unwrap()); ``` #### pub fn\n[remove](/docs/api/rust/tauri/about:blank#method.remove)(self) ->\nT[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2929 \"goto\nsource code\") Remove the entry from the map. All values associated with the\nentry are removed and the first one is returned. See `remove_entry_mult` for an\nAPI that returns all values. ## Examples ```rs let mut map = HeaderMap::new();\nmap.insert(HOST, \"world\".parse().unwrap()); if let Entry::Occupied(e) =\nmap.entry(\"host\") { let mut prev = e.remove(); assert_eq!(\"world\", prev); }\nassert!(!map.contains_key(\"host\")); ``` #### pub fn\n[remove_entry](/docs/api/rust/tauri/about:blank#method.remove_entry)(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\nT[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2954\n\"goto source code\") Remove the entry from the map. The key and all values\nassociated with the entry are removed and the first one is returned. See\n`remove_entry_mult` for an API that returns all values. ## Examples ```rs let\nmut map = HeaderMap::new(); map.insert(HOST, \"world\".parse().unwrap()); if let\nEntry::Occupied(e) = map.entry(\"host\") { let (key, mut prev) = e.remove_entry();\nassert_eq!(\"host\", key.as_str()); assert_eq!(\"world\", prev); }\nassert!(!map.contains_key(\"host\")); ``` #### pub fn\n[remove_entry_mult](/docs/api/rust/tauri/about:blank#method.remove_entry_mult)(self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[HeaderName](/docs/api/rust/tauri/struct.HeaderName\n\"struct tauri::http::header::HeaderName\"),\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a,\nT>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2968\n\"goto source code\") Remove the entry from the map. The key and all values\nassociated with the entry are removed and returned. #### pub fn\n[iter](/docs/api/rust/tauri/about:blank#method.iter)(&self) ->\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'\\_, T>ⓘNotable traits for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>`impl<'a, T> Iterator for ValueIter<'a,\nT> where T: 'a,type Item =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3006\n\"goto source code\") Returns an iterator visiting all values associated with the\nentry. Values are iterated in insertion order. ## Examples ```rs let mut map =\nHeaderMap::new(); map.insert(HOST, \"world\".parse().unwrap()); map.append(HOST,\n\"earth\".parse().unwrap()); if let Entry::Occupied(e) = map.entry(\"host\") { let\nmut iter = e.iter(); assert_eq!(&\"world\", iter.next().unwrap());\nassert_eq!(&\"earth\", iter.next().unwrap()); assert!(iter.next().is_none()); }\n``` #### pub fn\n[iter_mut](/docs/api/rust/tauri/about:blank#method.iter_mut)(&mut self) ->\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'\\_, T>ⓘNotable traits for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>`impl<'a, T> Iterator for\nValueIterMut<'a, T> where T: 'a,type Item = &'a\nmutT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3034\n\"goto source code\") Returns an iterator mutably visiting all values associated\nwith the entry. Values are iterated in insertion order. ## Examples ```rs let\nmut map = HeaderMap::default(); map.insert(HOST, \"world\".to_string());\nmap.append(HOST, \"earth\".to_string()); if let Entry::Occupied(mut e) =\nmap.entry(\"host\") { for e in e.iter_mut() { e.push_str(\"-boop\"); } } let mut\nvalues = map.get_all(\"host\"); let mut i = values.iter();\nassert_eq!(&\"world-boop\", i.next().unwrap()); assert_eq!(&\"earth-boop\",\ni.next().unwrap()); ``` ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry\n\"struct tauri::http::header::OccupiedEntry\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#180\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#180\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3039-3046\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [&'a mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The\ntype of the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> Which kind of iterator are we turning\nthis into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>ⓘNotable traits for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>`impl<'a, T> Iterator for\nValueIterMut<'a, T> where T: 'a,type Item = &'a\nmutT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3043\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<'a, 'b, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for &'b\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> where 'b:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3048-3055\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The type\nof the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> Which kind of iterator are we turning\nthis into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>ⓘNotable traits for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>`impl<'a, T> Iterator for ValueIter<'a,\nT> where T: 'a,type Item =\n&'aT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3052\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<'a, 'b, T>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for &'b mut\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> where 'b:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3057-3064\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= [&'a mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The\ntype of the elements being iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> Which kind of iterator are we turning\nthis into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n-> [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>ⓘNotable traits for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>`impl<'a, T> Iterator for\nValueIterMut<'a, T> where T: 'a,type Item = &'a\nmutT;`[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3061\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a, T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.OccupiedEntry"},{"id":"prose_docs_api_rust_tauri_http_header_struct_ToStrError_md","title":"Struct tauri::http::header::ToStrError","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::ToStrError, ```rs pub struct ToStrError { /*\nfields omitted */ } ``` Expand description A possible error when converting a\n`HeaderValue` to a string representation. Header field values may contain opaque\nbytes, in which case it is not possible to represent the value as a string. ##\nTrait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ToStrError](/docs/api/rust/tauri/struct.ToStrError\n\"struct\ntauri::http::header::ToStrError\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#35\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#35\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[ToStrError](/docs/api/rust/tauri/struct.ToStrError \"struct\ntauri::http::header::ToStrError\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#583-587\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#584\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[ToStrError](/docs/api/rust/tauri/struct.ToStrError \"struct\ntauri::http::header::ToStrError\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/value.rs.html#589\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ToStrError](/docs/api/rust/tauri/struct.ToStrError \"struct\ntauri::http::header::ToStrError\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ToStrError](/docs/api/rust/tauri/struct.ToStrError\n\"struct tauri::http::header::ToStrError\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ToStrError](/docs/api/rust/tauri/struct.ToStrError\n\"struct tauri::http::header::ToStrError\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [ToStrError](/docs/api/rust/tauri/struct.ToStrError\n\"struct tauri::http::header::ToStrError\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ToStrError](/docs/api/rust/tauri/struct.ToStrError \"struct\ntauri::http::header::ToStrError\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.ToStrError"},{"id":"prose_docs_api_rust_tauri_http_header_struct_VacantEntry_md","title":"Struct tauri::http::header::VacantEntry","sections":["Implementations","Examples","Examples","Examples","Examples","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::VacantEntry, ```rs pub struct VacantEntry<'a, T> {\n/* fields omitted */ } ``` Expand description A view into a single empty\nlocation in a `HeaderMap`. This struct is returned as part of the `Entry` enum.\n## Implementations ### impl<'a, T>\n[VacantEntry](/docs/api/rust/tauri/struct.VacantEntry \"struct\ntauri::http::header::VacantEntry\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2365-2452\n\"goto source code\") #### pub fn\n[key](/docs/api/rust/tauri/about:blank#method.key)(&self) ->\n&[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2376\n\"goto source code\") Returns a reference to the entry’s key ## Examples ```rs let\nmut map = HeaderMap::new(); assert_eq!(map.entry(\"x-hello\").key().as_str(),\n\"x-hello\"); ``` #### pub fn\n[into_key](/docs/api/rust/tauri/about:blank#method.into_key)(self) ->\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2392\n\"goto source code\") Take ownership of the key ## Examples ```rs let mut map =\nHeaderMap::new(); if let Entry::Vacant(v) = map.entry(\"x-hello\") {\nassert_eq!(v.into_key().as_str(), \"x-hello\"); } ``` #### pub fn\n[insert](/docs/api/rust/tauri/about:blank#method.insert)(self, value: T) -> [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2413\n\"goto source code\") Insert the value into the entry. The value will be\nassociated with this entry’s key. A mutable reference to the inserted value will\nbe returned. ## Examples ```rs let mut map = HeaderMap::new(); if let\nEntry::Vacant(v) = map.entry(\"x-hello\") { v.insert(\"world\".parse().unwrap()); }\nassert_eq!(map[\"x-hello\"], \"world\"); ``` #### pub fn\n[insert_entry](/docs/api/rust/tauri/about:blank#method.insert_entry)(self,\nvalue: T) -> [OccupiedEntry](/docs/api/rust/tauri/struct.OccupiedEntry \"struct\ntauri::http::header::OccupiedEntry\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2440 \"goto\nsource code\") Insert the value into the entry. The value will be associated with\nthis entry’s key. The new `OccupiedEntry` is returned, allowing for further\nmanipulation. ## Examples ```rs let mut map = HeaderMap::new(); if let\nEntry::Vacant(v) = map.entry(\"x-hello\") { let mut e =\nv.insert_entry(\"world\".parse().unwrap()); e.insert(\"world2\".parse().unwrap()); }\nassert_eq!(map[\"x-hello\"], \"world2\"); ``` ## Trait Implementations ### impl<'a,\nT> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [VacantEntry](/docs/api/rust/tauri/struct.VacantEntry\n\"struct tauri::http::header::VacantEntry\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#168\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#168\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[VacantEntry](/docs/api/rust/tauri/struct.VacantEntry \"struct\ntauri::http::header::VacantEntry\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [VacantEntry](/docs/api/rust/tauri/struct.VacantEntry\n\"struct tauri::http::header::VacantEntry\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [VacantEntry](/docs/api/rust/tauri/struct.VacantEntry\n\"struct tauri::http::header::VacantEntry\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [VacantEntry](/docs/api/rust/tauri/struct.VacantEntry\n\"struct tauri::http::header::VacantEntry\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[VacantEntry](/docs/api/rust/tauri/struct.VacantEntry \"struct\ntauri::http::header::VacantEntry\")<'a, T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.VacantEntry"},{"id":"prose_docs_api_rust_tauri_http_header_struct_ValueDrain_md","title":"Struct tauri::http::header::ValueDrain","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::ValueDrain, ```rs pub struct ValueDrain<'a, T> {\n/* fields omitted */ } ``` Expand description An drain iterator of all values\nassociated with a single header name. ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain\n\"struct tauri::http::header::ValueDrain\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#207\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#207\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html \"trait\ncore::ops::drop::Drop\") for [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain\n\"struct tauri::http::header::ValueDrain\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3100-3104\n\"goto source code\") #### pub fn\n[drop](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)(&mut\nself)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3101 \"goto\nsource code\") Executes the destructor for this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3068-3096\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= T The type of the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<T>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3071\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3081\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3098 \"goto\nsource code\") ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain\n\"struct tauri::http::header::ValueDrain\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3107 \"goto\nsource code\") ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain\n\"struct tauri::http::header::ValueDrain\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3106 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [ValueDrain](/docs/api/rust/tauri/struct.ValueDrain\n\"struct tauri::http::header::ValueDrain\")<'a, T> where T:\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ValueDrain](/docs/api/rust/tauri/struct.ValueDrain \"struct\ntauri::http::header::ValueDrain\")<'a, T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<I> ElementIterator for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\nNodeDataRef<ElementData>>, #### fn\n[select](/docs/api/rust/tauri/about:blank#method.select)(self, selectors:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Select<Self, Selectors>,\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)> Filter this\nelement iterator to elements maching the given selectors. ### impl<T>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<I> NodeIterator for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item = NodeRef>, #### fn\n[elements](/docs/api/rust/tauri/about:blank#method.elements)(self) ->\nElements<Self> Filter this element iterator to elements. #### fn\n[text_nodes](/docs/api/rust/tauri/about:blank#method.text_nodes)(self) ->\nTextNodes<Self> Filter this node iterator to text nodes. #### fn\n[comments](/docs/api/rust/tauri/about:blank#method.comments)(self) ->\nComments<Self> Filter this node iterator to comment nodes. #### fn\n[select](/docs/api/rust/tauri/about:blank#method.select)( self, selectors:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Select<Elements<Self>, Selectors>,\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)> Filter this node\niterator to elements maching the given selectors. ### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<I> UnicodeNormalization<I>\nfor I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[char](https://doc.rust-lang.org/1.54.0/std/primitive.char.html)>, #### pub fn\n[nfd](/docs/api/rust/tauri/about:blank#tymethod.nfd)(self) -> Decompositions<I>\nReturns an iterator over the string in Unicode Normalization Form D (canonical\ndecomposition). [Read more](/docs/api/rust/tauri/about:blank#tymethod.nfd) ####\npub fn [nfkd](/docs/api/rust/tauri/about:blank#tymethod.nfkd)(self) ->\nDecompositions<I> Returns an iterator over the string in Unicode Normalization\nForm KD (compatibility decomposition). [Read\nmore](/docs/api/rust/tauri/about:blank#tymethod.nfkd) #### pub fn\n[nfc](/docs/api/rust/tauri/about:blank#tymethod.nfc)(self) -> Recompositions<I>\nAn Iterator over the string in Unicode Normalization Form C (canonical\ndecomposition followed by canonical composition). [Read\nmore](/docs/api/rust/tauri/about:blank#tymethod.nfc) #### pub fn\n[nfkc](/docs/api/rust/tauri/about:blank#tymethod.nfkc)(self) ->\nRecompositions<I> An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition). [Read\nmore](/docs/api/rust/tauri/about:blank#tymethod.nfkc) #### pub fn\n[cjk_compat_variants](/docs/api/rust/tauri/about:blank#tymethod.cjk_compat_variants)(self)\n-> Replacements<I> A transformation which replaces CJK Compatibility Ideograph\ncodepoints with normal forms using Standardized Variation Sequences. This is not\npart of the canonical or compatibility decomposition algorithms, but performing\nit before those algorithms produces normalized output which better preserves the\nintent of the original text. [Read\nmore](/docs/api/rust/tauri/about:blank#tymethod.cjk_compat_variants) #### pub fn\n[stream_safe](/docs/api/rust/tauri/about:blank#tymethod.stream_safe)(self) ->\nStreamSafe<I> An Iterator over the string with Conjoining Grapheme Joiner\ncharacters inserted according to the Stream-Safe Text Process (UAX15-D4) [Read\nmore](/docs/api/rust/tauri/about:blank#tymethod.stream_safe) ### impl<V, T>\nVZip<V> for T where V: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.ValueDrain"},{"id":"prose_docs_api_rust_tauri_http_header_struct_ValueIter_md","title":"Struct tauri::http::header::ValueIter","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::ValueIter, ```rs pub struct ValueIter<'a, T> { /*\nfields omitted */ } ``` Expand description An iterator of all values associated\nwith a single header name. ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#188\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#188\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\") for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> where T:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2569-2597\n\"goto source code\") #### pub fn\n[next_back](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#tymethod.next_back)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[ValueIter](/docs/api/rust/tauri/struct.ValueIter\n\"struct tauri::http::header::ValueIter\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2570\n\"goto source code\") Removes and returns an element from the end of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#tymethod.next_back)\n#### fn\n[advance_back_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.advance_back_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#130\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator from the back by `n`\nelements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.advance_back_by)\n#### fn\n[nth_back](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.nth_back)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.37.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#180\n\"goto source code\") Returns the `n`th element from the end of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.nth_back)\n#### fn\n[try_rfold](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.try_rfold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#217-221\n\"goto source code\") This is the reverse version of\n[`Iterator::try_fold()`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold\n\"Iterator::try_fold()\"): it takes elements starting from the back of the\niterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.try_rfold)\n#### fn\n[rfold](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#281-284\n\"goto source code\") An iterator method that reduces the iterator’s elements to a\nsingle, final value, starting from the back. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfold)\n#### fn\n[rfind](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfind)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#336-339\n\"goto source code\") Searches for an element of an iterator from the back that\nsatisfies a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfind)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> where T:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2513-2567\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The type\nof the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[ValueIter](/docs/api/rust/tauri/struct.ValueIter\n\"struct tauri::http::header::ValueIter\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2516\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2557\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2599 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ValueIter](/docs/api/rust/tauri/struct.ValueIter\n\"struct tauri::http::header::ValueIter\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ValueIter](/docs/api/rust/tauri/struct.ValueIter\n\"struct tauri::http::header::ValueIter\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [ValueIter](/docs/api/rust/tauri/struct.ValueIter\n\"struct tauri::http::header::ValueIter\")<'a, T> ### impl<'a, T>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ValueIter](/docs/api/rust/tauri/struct.ValueIter \"struct\ntauri::http::header::ValueIter\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.ValueIter"},{"id":"prose_docs_api_rust_tauri_http_header_struct_ValueIterMut_md","title":"Struct tauri::http::header::ValueIterMut","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::ValueIterMut, ```rs pub struct ValueIterMut<'a, T>\n{ /* fields omitted */ } ``` Expand description A mutable iterator of all values\nassociated with a single header name. ## Trait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut\n\"struct tauri::http::header::ValueIterMut\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#197\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#197\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> where T:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2648-2678\n\"goto source code\") #### pub fn\n[next_back](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#tymethod.next_back)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<<[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut\n\"struct tauri::http::header::ValueIterMut\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2649\n\"goto source code\") Removes and returns an element from the end of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#tymethod.next_back)\n#### fn\n[advance_back_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.advance_back_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#130\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator from the back by `n`\nelements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.advance_back_by)\n#### fn\n[nth_back](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.nth_back)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.37.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#180\n\"goto source code\") Returns the `n`th element from the end of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.nth_back)\n#### fn\n[try_rfold](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.try_rfold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#217-221\n\"goto source code\") This is the reverse version of\n[`Iterator::try_fold()`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold\n\"Iterator::try_fold()\"): it takes elements starting from the back of the\niterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.try_rfold)\n#### fn\n[rfold](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#281-284\n\"goto source code\") An iterator method that reduces the iterator’s elements to a\nsingle, final value, starting from the back. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfold)\n#### fn\n[rfind](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfind)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/double_ended.rs.html#336-339\n\"goto source code\") Searches for an element of an iterator from the back that\nsatisfies a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html#method.rfind)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> where T:\n'a,[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2603-2646\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [&'a mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The\ntype of the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<<[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut\n\"struct tauri::http::header::ValueIterMut\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2606\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#166\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2680 \"goto\nsource code\") ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut\n\"struct tauri::http::header::ValueIterMut\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2683 \"goto\nsource code\") ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut\n\"struct tauri::http::header::ValueIterMut\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"),\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2682 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ValueIterMut](/docs/api/rust/tauri/struct.ValueIterMut \"struct\ntauri::http::header::ValueIterMut\")<'a, T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.ValueIterMut"},{"id":"prose_docs_api_rust_tauri_http_header_struct_Values_md","title":"Struct tauri::http::header::Values","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::Values, ```rs pub struct Values<'a, T> { /* fields\nomitted */ } ``` Expand description `HeaderMap` value iterator. Each value\ncontained in the `HeaderMap` will be yielded. ## Trait Implementations ###\nimpl<'a, T> [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Values](/docs/api/rust/tauri/struct.Values\n\"struct tauri::http::header::Values\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#123\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#123\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2167-2177\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The type\nof the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[Values](/docs/api/rust/tauri/struct.Values\n\"struct tauri::http::header::Values\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2170\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2174\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2179 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Values](/docs/api/rust/tauri/struct.Values \"struct\ntauri::http::header::Values\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Values](/docs/api/rust/tauri/struct.Values\n\"struct tauri::http::header::Values\")<'a, T> ## Blanket Implementations ###\nimpl<T> [Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.Values"},{"id":"prose_docs_api_rust_tauri_http_header_struct_ValuesMut_md","title":"Struct tauri::http::header::ValuesMut","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::header::ValuesMut, ```rs pub struct ValuesMut<'a, T> { /*\nfields omitted */ } ``` Expand description `HeaderMap` mutable value iterator ##\nTrait Implementations ### impl<'a, T>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a, T> where T:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#129\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#129\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<'a, T>\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\") for\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a,\nT>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2183-2193\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item)\n= [&'a mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T The\ntype of the elements being iterated over. #### pub fn\n[next](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)(&mut\nself) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<<[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut\n\"struct tauri::http::header::ValuesMut\")<'a, T> as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2186\n\"goto source code\") Advances the iterator and returns the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#tymethod.next)\n#### pub fn\n[size_hint](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)(&self)\n->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html),\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2190\n\"goto source code\") Returns the bounds on the remaining length of the iterator.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.size_hint)\n#### fn\n[count](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)(self)\n->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#203-205\n\"goto source code\") Consumes the iterator, counting the number of iterations and\nreturning it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.count)\n#### fn\n[last](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#233-235\n\"goto source code\") Consumes the iterator, returning the last element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.last)\n#### fn\n[advance_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#276\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_advance_by`) recently added Advances the iterator by `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.advance_by)\n#### fn\n[nth](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)(&mut\nself, n: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#324\n\"goto source code\") Returns the `n`th element of the iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.nth)\n#### fn\n[step_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)(self,\nstep: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[StepBy](https://doc.rust-lang.org/1.54.0/core/iter/adapters/step_by/struct.StepBy.html\n\"struct\ncore::iter::adapters::step_by::StepBy\")<Self>1.28.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#375-377\n\"goto source code\") Creates an iterator starting at the same point, but stepping\nby the given amount at each iteration. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.step_by)\n#### fn\n[chain](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)<U>(self,\nother: U) ->\n[Chain](https://doc.rust-lang.org/1.54.0/core/iter/adapters/chain/struct.Chain.html\n\"struct core::iter::adapters::chain::Chain\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#446-449\n\"goto source code\") Takes two iterators and creates a new iterator over both in\nsequence. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.chain)\n#### fn\n[zip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)<U>(self,\nother: U) ->\n[Zip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/zip/struct.Zip.html\n\"struct core::iter::adapters::zip::Zip\")<Self, <U as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\n\"type core::iter::traits::collect::IntoIterator::IntoIter\")> where U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#522-525\n\"goto source code\") ‘Zips up’ two iterators into a single iterator of pairs.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.zip)\n#### fn\n[intersperse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)(self,\nseparator:\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Intersperse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.Intersperse.html\n\"struct core::iter::adapters::intersperse::Intersperse\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#564-567\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places a copy\nof `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse)\n#### fn\n[intersperse_with](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)<G>(self,\nseparator: G) ->\n[IntersperseWith](https://doc.rust-lang.org/1.54.0/core/iter/adapters/intersperse/struct.IntersperseWith.html\n\"struct core::iter::adapters::intersperse::IntersperseWith\")<Self, G> where G:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")() ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#622-625\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_intersperse`) recently added Creates a new iterator which places an item\ngenerated by `separator` between adjacent items of the original iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.intersperse_with)\n#### fn\n[map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)<B,\nF>(self, f: F) ->\n[Map](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map/struct.Map.html\n\"struct core::iter::adapters::map::Map\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#681-684\n\"goto source code\") Takes a closure and creates an iterator which calls that\nclosure on each element. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map)\n#### fn\n[for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)<F>(self,\nf: F) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#726-729\n\"goto source code\") Calls a closure on each element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.for_each)\n#### fn\n[filter](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)<P>(self,\npredicate: P) ->\n[Filter](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter/struct.Filter.html\n\"struct core::iter::adapters::filter::Filter\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#801-804\n\"goto source code\") Creates an iterator which uses a closure to determine if an\nelement should be yielded. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter)\n#### fn\n[filter_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)<B,\nF>(self, f: F) ->\n[FilterMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/filter_map/struct.FilterMap.html\n\"struct core::iter::adapters::filter_map::FilterMap\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#846-849\n\"goto source code\") Creates an iterator that both filters and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.filter_map)\n#### fn\n[enumerate](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)(self)\n->\n[Enumerate](https://doc.rust-lang.org/1.54.0/core/iter/adapters/enumerate/struct.Enumerate.html\n\"struct\ncore::iter::adapters::enumerate::Enumerate\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#893-895\n\"goto source code\") Creates an iterator which gives the current iteration count\nas well as the next value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.enumerate)\n#### fn\n[peekable](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)(self)\n->\n[Peekable](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html\n\"struct\ncore::iter::adapters::peekable::Peekable\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#964-966\n\"goto source code\") Creates an iterator which can use the\n[`peek`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek)\nand\n[`peek_mut`](https://doc.rust-lang.org/1.54.0/core/iter/adapters/peekable/struct.Peekable.html#method.peek_mut)\nmethods to look at the next element of the iterator without consuming it. See\ntheir documentation for more information. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.peekable)\n#### fn\n[skip_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)<P>(self,\npredicate: P) ->\n[SkipWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip_while/struct.SkipWhile.html\n\"struct core::iter::adapters::skip_while::SkipWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1028-1031\n\"goto source code\") Creates an iterator that\n[`skip`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)s\nelements based on a predicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip_while)\n#### fn\n[take_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)<P>(self,\npredicate: P) ->\n[TakeWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take_while/struct.TakeWhile.html\n\"struct core::iter::adapters::take_while::TakeWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1109-1112\n\"goto source code\") Creates an iterator that yields elements based on a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take_while)\n#### fn\n[map_while](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)<B,\nP>(self, predicate: P) ->\n[MapWhile](https://doc.rust-lang.org/1.54.0/core/iter/adapters/map_while/struct.MapWhile.html\n\"struct core::iter::adapters::map_while::MapWhile\")<Self, P> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1204-1207\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_map_while`) recently added Creates an iterator that both yields elements\nbased on a predicate and maps. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.map_while)\n#### fn\n[skip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Skip](https://doc.rust-lang.org/1.54.0/core/iter/adapters/skip/struct.Skip.html\n\"struct\ncore::iter::adapters::skip::Skip\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1235-1237\n\"goto source code\") Creates an iterator that skips the first `n` elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.skip)\n#### fn\n[take](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)(self,\nn: [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)) ->\n[Take](https://doc.rust-lang.org/1.54.0/core/iter/adapters/take/struct.Take.html\n\"struct\ncore::iter::adapters::take::Take\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1288-1290\n\"goto source code\") Creates an iterator that yields the first `n` elements, or\nfewer if the underlying iterator ends sooner. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.take)\n#### fn\n[scan](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)<St,\nB, F>(self, initial_state: St, f: F) ->\n[Scan](https://doc.rust-lang.org/1.54.0/core/iter/adapters/scan/struct.Scan.html\n\"struct core::iter::adapters::scan::Scan\")<Self, St, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)St,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1332-1335\n\"goto source code\") An iterator adaptor similar to\n[`fold`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\nthat holds internal state and produces a new iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.scan)\n#### fn\n[flat_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)<U,\nF>(self, f: F) ->\n[FlatMap](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.FlatMap.html\n\"struct core::iter::adapters::flatten::FlatMap\")<Self, U, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> U, U:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1372-1376\n\"goto source code\") Creates an iterator that works like map, but flattens nested\nstructure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flat_map)\n#### fn\n[flatten](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)(self)\n->\n[Flatten](https://doc.rust-lang.org/1.54.0/core/iter/adapters/flatten/struct.Flatten.html\n\"struct core::iter::adapters::flatten::Flatten\")<Self> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),1.29.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1444-1447\n\"goto source code\") Creates an iterator that flattens nested structure. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.flatten)\n#### fn\n[fuse](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)(self)\n->\n[Fuse](https://doc.rust-lang.org/1.54.0/core/iter/adapters/fuse/struct.Fuse.html\n\"struct\ncore::iter::adapters::fuse::Fuse\")<Self>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1512-1514\n\"goto source code\") Creates an iterator which ends after the first\n[`None`](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html#variant.None\n\"None\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fuse)\n#### fn\n[inspect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)<F>(self,\nf: F) ->\n[Inspect](https://doc.rust-lang.org/1.54.0/core/iter/adapters/inspect/struct.Inspect.html\n\"struct core::iter::adapters::inspect::Inspect\")<Self, F> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1596-1599\n\"goto source code\") Does something with each element of an iterator, passing the\nvalue on. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.inspect)\n#### fn\n[by_ref](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1626-1628\n\"goto source code\") Borrows an iterator, rather than consuming it. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.by_ref)\n#### \\#\\[must_use = \"if you really need to exhaust the iterator, consider\n\\`.for_each(drop)\\` instead\"]fn\n[collect](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)<B>(self)\n-> B where B:\n[FromIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.FromIterator.html\n\"trait\ncore::iter::traits::collect::FromIterator\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1744-1746\n\"goto source code\") Transforms an iterator into a collection. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.collect)\n#### fn\n[partition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)<B,\nF>(self, f: F) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)B,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), B:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1777-1781\n\"goto source code\") Consumes an iterator, creating two collections from it.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition)\n#### fn\n[partition_in_place](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)<'a,\nT, P>(self, predicate: P) ->\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\")<Item = [&'a\nmut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a, P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")([&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1838-1841\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_partition_in_place`) new API Reorders the elements of this iterator\n_in-place_ according to the given predicate, such that all those that return\n`true` precede all those that return `false`. Returns the number of `true`\nelements found. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partition_in_place)\n#### fn\n[is_partitioned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)<P>(self,\npredicate: P) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1895-1898\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_is_partitioned`) new API Checks if the elements of this iterator are\npartitioned according to the given predicate, such that all those that return\n`true` precede all those that return `false`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_partitioned)\n#### fn\n[try_fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)<B,\nF, R>(&mut self, init: B, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output = B>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#1964-1968\n\"goto source code\") An iterator method that applies a function as long as it\nreturns successfully, producing a single, final value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_fold)\n#### fn\n[try_for_each](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)<F,\nR>(&mut self, f: F) -> R where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>, F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,1.27.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2006-2010\n\"goto source code\") An iterator method that applies a fallible function to each\nitem in the iterator, stopping at the first error and returning that error.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_for_each)\n#### fn\n[fold](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)<B,\nF>(self, init: B, f: F) -> B where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait core::ops::function::FnMut\")(B,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nB,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2105-2108\n\"goto source code\") Folds every element into an accumulator by applying an\noperation, returning the final result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.fold)\n#### fn\n[reduce](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)<F>(self,\nf: F) -> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\"),1.51.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2150-2153\n\"goto source code\") Reduces the elements to a single one, by repeatedly applying\na reducing operation. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.reduce)\n#### fn\n[all](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2199-2202\n\"goto source code\") Tests if every element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.all)\n#### fn\n[any](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)<F>(&mut\nself, f: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2252-2255\n\"goto source code\") Tests if any element of the iterator matches a predicate.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.any)\n#### fn\n[find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2312-2315\n\"goto source code\") Searches for an element of an iterator that satisfies a\npredicate. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find)\n#### fn\n[find_map](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)<B,\nF>(&mut self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<B>,1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2343-2346\n\"goto source code\") Applies function to the elements of iterator and returns the\nfirst non-none result. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.find_map)\n#### fn\n[try_find](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)<F,\nR, E>(&mut self, f: F) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>, E> where R:\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\")<Output =\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), Residual =\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\"), E>> +\n[Try](https://doc.rust-lang.org/1.54.0/core/ops/try_trait/trait.Try.html \"trait\ncore::ops::try_trait::Try\"), F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\nR,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2382-2389\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`try_find`) new\nAPI Applies function to the elements of iterator and returns the first true\nresult or the first error. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.try_find)\n#### fn\n[position](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2488-2491\n\"goto source code\") Searches for an element in an iterator, returning its index.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.position)\n#### fn\n[rposition](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)<P>(&mut\nself, predicate: P) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html)>\nwhere Self:\n[ExactSizeIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/exact_size/trait.ExactSizeIterator.html\n\"trait core::iter::traits::exact_size::ExactSizeIterator\") +\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait core::iter::traits::double_ended::DoubleEndedIterator\"), P:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2545-2548\n\"goto source code\") Searches for an element in an iterator from the right,\nreturning its index. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rposition)\n#### fn\n[max](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2596-2599\n\"goto source code\") Returns the maximum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max)\n#### fn\n[min](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)(self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2634-2637\n\"goto source code\") Returns the minimum element of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min)\n#### fn\n[max_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2656-2659\n\"goto source code\") Returns the element that gives the maximum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by_key)\n#### fn\n[max_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2689-2692\n\"goto source code\") Returns the element that gives the maximum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.max_by)\n#### fn\n[min_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)<B,\nF>(self, f: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> B, B:\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.6.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2716-2719\n\"goto source code\") Returns the element that gives the minimum value from the\nspecified function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by_key)\n#### fn\n[min_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)<F>(self,\ncompare: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"),1.15.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2749-2752\n\"goto source code\") Returns the element that gives the minimum value with\nrespect to the specified comparison function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.min_by)\n#### fn\n[rev](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)(self)\n-> [Rev](https://doc.rust-lang.org/1.54.0/core/iter/adapters/rev/struct.Rev.html\n\"struct core::iter::adapters::rev::Rev\")<Self> where Self:\n[DoubleEndedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\n\"trait\ncore::iter::traits::double_ended::DoubleEndedIterator\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2786-2788\n\"goto source code\") Reverses an iterator’s direction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.rev)\n#### fn\n[unzip](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)<A,\nB, FromA, FromB>(self) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)FromA,\nFromB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html) where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)A,\nB[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)>, FromA:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait core::iter::traits::collect::Extend\")<A>, FromB:\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") +\n[Extend](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.Extend.html\n\"trait\ncore::iter::traits::collect::Extend\")<B>,1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2816-2820\n\"goto source code\") Converts an iterator of pairs into a pair of containers.\n[Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.unzip)\n#### fn\n[copied](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)<'a,\nT>(self) ->\n[Copied](https://doc.rust-lang.org/1.54.0/core/iter/adapters/copied/struct.Copied.html\n\"struct core::iter::adapters::copied::Copied\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\"),1.36.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2867-2870\n\"goto source code\") Creates an iterator which copies all of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.copied)\n#### fn\n[cloned](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)<'a,\nT>(self) ->\n[Cloned](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cloned/struct.Cloned.html\n\"struct core::iter::adapters::cloned::Cloned\")<Self> where Self:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait core::iter::traits::iterator::Iterator\")<Item =\n[&'a](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T>, T: 'a +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2898-2901\n\"goto source code\") Creates an iterator which\n[`clone`](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)s\nall of its elements. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cloned)\n#### fn\n[cycle](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)(self)\n->\n[Cycle](https://doc.rust-lang.org/1.54.0/core/iter/adapters/cycle/struct.Cycle.html\n\"struct core::iter::adapters::cycle::Cycle\")<Self> where Self:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2931-2933\n\"goto source code\") Repeats an iterator endlessly. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cycle)\n#### fn\n[sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)<S>(self)\n-> S where S:\n[Sum](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Sum.html\n\"trait\ncore::iter::traits::accum::Sum\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2961-2964\n\"goto source code\") Sums the elements of an iterator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.sum)\n#### fn\n[product](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)<P>(self)\n-> P where P:\n[Product](https://doc.rust-lang.org/1.54.0/core/iter/traits/accum/trait.Product.html\n\"trait\ncore::iter::traits::accum::Product\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,1.11.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#2990-2993\n\"goto source code\") Iterates over the entire iterator, multiplying all the\nelements [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.product)\n#### fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)<I>(self,\nother: I) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\")<Item =\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")>,\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\"),1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3011-3015\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp)\n#### fn\n[cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)<I,\nF>(self, other: I, cmp: F) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\") where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\"), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3040-3044\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.cmp_by)\n#### fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)<I>(self,\nother: I) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3087-3091\n\"goto source code\")\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp)\n#### fn\n[partial_cmp_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)<I,\nF>(self, other: I, partial_cmp: F) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")> where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum core::cmp::Ordering\")>, I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3125-3129\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`)\n[Lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ncompares the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") with those of another with respect to the specified comparison\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.partial_cmp_by)\n#### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3167-3171\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq)\n#### fn\n[eq_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)<I,\nF>(self, other: I, eq: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"), <I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type core::iter::traits::collect::IntoIterator::Item\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html), I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3192-3196\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`iter_order_by`) Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are equal to those of another with respect to the specified equality\nfunction. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.eq_by)\n#### fn\n[ne](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3227-3231\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are unequal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ne)\n#### fn\n[lt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3248-3252\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.lt)\n#### fn\n[le](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3269-3273\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\nless or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.le)\n#### fn\n[gt](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3290-3294\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.gt)\n#### fn\n[ge](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)<I>(self,\nother: I) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere I:\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\"),\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<<I as\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait\ncore::iter::traits::collect::IntoIterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\n\"type\ncore::iter::traits::collect::IntoIterator::Item\")>,1.5.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3311-3315\n\"goto source code\") Determines if the elements of this\n[`Iterator`](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"Iterator\") are\n[lexicographically](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#lexicographical-comparison)\ngreater than or equal to those of another. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.ge)\n#### fn\n[is_sorted](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)(self)\n-> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where\nSelf::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"):\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3342-3345\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted)\n#### fn\n[is_sorted_by](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)<F>(self,\ncompare: F) -> [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)\nwhere F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n&Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3370-3373\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given\ncomparator function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by)\n#### fn\n[is_sorted_by_key](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)<F,\nK>(self, f: F) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html) where F:\n[FnMut](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnMut.html\n\"trait\ncore::ops::function::FnMut\")(Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")) -> K, K:\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<K>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/iterator.rs.html#3416-3420\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`is_sorted`)\nnew API Checks if the elements of this iterator are sorted using the given key\nextraction function. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#method.is_sorted_by_key)\n### impl<'a, T>\n[FusedIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/marker/trait.FusedIterator.html\n\"trait core::iter::traits::marker::FusedIterator\") for\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a, T>\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2195 \"goto\nsource code\") ## Auto Trait Implementations ### impl<'a, T>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a, T> where T:\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<'a, T>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [ValuesMut](/docs/api/rust/tauri/struct.ValuesMut\n\"struct tauri::http::header::ValuesMut\")<'a, T> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\"), ### impl<'a, T>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [ValuesMut](/docs/api/rust/tauri/struct.ValuesMut\n\"struct tauri::http::header::ValuesMut\")<'a, T> where T:\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<'a, T>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [ValuesMut](/docs/api/rust/tauri/struct.ValuesMut\n\"struct tauri::http::header::ValuesMut\")<'a, T> ### impl<'a, T>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[ValuesMut](/docs/api/rust/tauri/struct.ValuesMut \"struct\ntauri::http::header::ValuesMut\")<'a, T> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<I>\n[IntoIterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html\n\"trait core::iter::traits::collect::IntoIterator\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#237-244\n\"goto source code\") #### type\n[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item)\n= <I as\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\")>::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\") The type of the elements\nbeing iterated over. #### type\n[IntoIter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter)\n= I Which kind of iterator are we turning this into? #### pub fn\n[into_iter](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)(self)\n->\nI[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/iter/traits/collect.rs.html#241\n\"goto source code\") Creates an iterator from a value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter)\n### impl<I>\n[IteratorRandom](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html\n\"trait rand::seq::IteratorRandom\") for I where I:\n[Iterator](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html\n\"trait\ncore::iter::traits::iterator::Iterator\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#615\n\"goto source code\") #### fn\n[choose](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#304-305\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose)\n#### fn\n[choose_stable](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#373-374\n\"goto source code\") Choose one element at random from the iterator. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_stable)\n#### fn\n[choose_multiple_fill](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)<R>(self,\nrng: [&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R,\nbuf: [&mut\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type\ncore::iter::traits::iterator::Iterator::Item\")[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#426-427\n\"goto source code\") Collects values at random from the iterator into a supplied\nbuffer until that buffer is filled. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple_fill)\n#### fn\n[choose_multiple](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)<R>(\nself, rng:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)R, amount:\n[usize](https://doc.rust-lang.org/1.54.0/std/primitive.usize.html) ) ->\n[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html \"struct\nalloc::vec::Vec\")<Self::[Item](https://doc.rust-lang.org/1.54.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\n\"type core::iter::traits::iterator::Iterator::Item\"),\n[Global](https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html \"struct\nalloc::alloc::Global\")> where R:\n[Rng](https://rust-random.github.io/rand/rand/rng/trait.Rng.html \"trait\nrand::rng::Rng\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://rust-random.github.io/rand/src/rand/seq/mod.rs.html#466-467\n\"goto source code\") Collects `amount` values at random from the iterator into a\nvector. [Read\nmore](https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html#method.choose_multiple)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/header/struct.ValuesMut"},{"id":"prose_docs_api_rust_tauri_http_header_trait_AsHeaderName_md","title":"Trait tauri::http::header::AsHeaderName","sections":["Implementations on Foreign Types","Implementors"],"subSections":["impl","impl ","impl","impl ","impl"],"code":["rs"],"text":"# Trait tauri::http::header::AsHeaderName, ```rs pub trait AsHeaderName: Sealed\n{ } ``` Expand description A marker trait used to identify values that can be\nused as search keys to a `HeaderMap`. ## Implementations on Foreign Types ###\nimpl<'a> [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\") for &'a\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3491 \"goto\nsource code\") ### impl [AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName\n\"trait tauri::http::header::AsHeaderName\") for\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3470 \"goto\nsource code\") ### impl<'a>\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\") for &'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3449 \"goto\nsource code\") ## Implementors ### impl\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3407 \"goto\nsource code\") ### impl<'a>\n[AsHeaderName](/docs/api/rust/tauri/trait.AsHeaderName \"trait\ntauri::http::header::AsHeaderName\") for &'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3428 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/http/header/trait.AsHeaderName"},{"id":"prose_docs_api_rust_tauri_http_header_trait_IntoHeaderName_md","title":"Trait tauri::http::header::IntoHeaderName","sections":["Implementations on Foreign Types","Implementors"],"subSections":["impl ","impl ","impl"],"code":["rs"],"text":"# Trait tauri::http::header::IntoHeaderName, ```rs pub trait IntoHeaderName:\nSealed { } ``` Expand description A marker trait used to identify values that\ncan be used as insert keys to a `HeaderMap`. ## Implementations on Foreign Types\n### impl [IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\") for &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3357 \"goto\nsource code\") ## Implementors ### impl\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\") for\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3315 \"goto\nsource code\") ### impl<'a>\n[IntoHeaderName](/docs/api/rust/tauri/trait.IntoHeaderName \"trait\ntauri::http::header::IntoHeaderName\") for &'a\n[HeaderName](/docs/api/rust/tauri/struct.HeaderName \"struct\ntauri::http::header::HeaderName\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/header/map.rs.html#3336 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/http/header/trait.IntoHeaderName"},{"id":"prose_docs_api_rust_tauri_http_method_struct_InvalidMethod_md","title":"Struct tauri::http::method::InvalidMethod","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::method::InvalidMethod, ```rs pub struct InvalidMethod { /*\nfields omitted */ } ``` Expand description A possible error value when\nconverting `Method` from bytes. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod\n\"struct\ntauri::http::method::InvalidMethod\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#296-302\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#297\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#304-308\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#305\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#310\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ### impl\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod\n\"struct tauri::http::method::InvalidMethod\")> for\n[Error](/docs/api/rust/tauri/../../api/enum.Error \"enum\ntauri::api::Error\")[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/error.rs#6\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(source:\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\")) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../../src/tauri/api/error.rs#6 \"goto\nsource code\") Performs the conversion. ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/method/struct.InvalidMethod"},{"id":"prose_docs_api_rust_tauri_http_method_struct_Method_md","title":"Struct tauri::http::method::Method","sections":["Examples","Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl","impl ","impl ","impl","impl","impl ","impl","impl ","impl","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::method::Method, ```rs pub struct Method(_); ``` Expand\ndescription The Request Method (VERB) This type also contains constants for a\nnumber of common HTTP methods such as GET, POST, etc. Currently includes 8\nvariants representing the 8 methods defined in [RFC\n7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an\nExtension variant for all extensions. ## Examples ```rs use http::Method;\nassert_eq!(Method::GET, Method::from_bytes(b\"GET\").unwrap());\nassert!(Method::GET.is_idempotent()); assert_eq!(Method::POST.as_str(), \"POST\");\n``` ## Implementations ### impl [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#71-186\n\"goto source code\") #### pub const\n[**GET**](/docs/api/rust/tauri/about:blank#associatedconstant.GET):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#73\n\"goto source code\") GET #### pub const\n[**POST**](/docs/api/rust/tauri/about:blank#associatedconstant.POST):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#76\n\"goto source code\") POST #### pub const\n[**PUT**](/docs/api/rust/tauri/about:blank#associatedconstant.PUT):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#79\n\"goto source code\") PUT #### pub const\n[**DELETE**](/docs/api/rust/tauri/about:blank#associatedconstant.DELETE):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#82\n\"goto source code\") DELETE #### pub const\n[**HEAD**](/docs/api/rust/tauri/about:blank#associatedconstant.HEAD):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#85\n\"goto source code\") HEAD #### pub const\n[**OPTIONS**](/docs/api/rust/tauri/about:blank#associatedconstant.OPTIONS):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#88\n\"goto source code\") OPTIONS #### pub const\n[**CONNECT**](/docs/api/rust/tauri/about:blank#associatedconstant.CONNECT):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#91\n\"goto source code\") CONNECT #### pub const\n[**PATCH**](/docs/api/rust/tauri/about:blank#associatedconstant.PATCH):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#94\n\"goto source code\") PATCH #### pub const\n[**TRACE**](/docs/api/rust/tauri/about:blank#associatedconstant.TRACE):\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#97\n\"goto source code\") TRACE #### pub fn\n[from_bytes](/docs/api/rust/tauri/about:blank#method.from_bytes)(src:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\"),\n[InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#100\n\"goto source code\") Converts a slice of bytes to an HTTP method. #### pub fn\n[is_safe](/docs/api/rust/tauri/about:blank#method.is_safe)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#150\n\"goto source code\") Whether a method is considered “safe”, meaning the request\nis essentially read-only. See [the\nspec](https://tools.ietf.org/html/rfc7231#section-4.2.1) for more words. ####\npub fn\n[is_idempotent](/docs/api/rust/tauri/about:blank#method.is_idempotent)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#162\n\"goto source code\") Whether a method is considered “idempotent”, meaning the\nrequest has the same result if executed multiple times. See [the\nspec](https://tools.ietf.org/html/rfc7231#section-4.2.2) for more words. ####\npub fn [as_str](/docs/api/rust/tauri/about:blank#method.as_str)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#171\n\"goto source code\") Return a &str representation of the HTTP method ## Trait\nImplementations ### impl\n[AsRef](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html \"trait\ncore::convert::AsRef\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#188-193\n\"goto source code\") #### pub fn\n[as_ref](https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html#tymethod.as_ref)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#190\n\"goto source code\") Performs the conversion. ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#237-241\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#238\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#249-254\n\"goto source code\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#251\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#243-247\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nfmt: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#244\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl<'a>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<&'a [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")> for [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#256-261\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\n&'a [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")) -> [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#258\n\"goto source code\") Performs the conversion. ### impl\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait core::str::traits::FromStr\") for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#281-288\n\"goto source code\") #### type\n[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err)\n= [InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") The associated error which can be returned\nfrom parsing. #### pub fn\n[from_str](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)(t:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\"), <[Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\") as\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait\ncore::str::traits::FromStr\")>::[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err\n\"type\ncore::str::traits::FromStr::Err\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#285\n\"goto source code\") Parses a string `s` to return a value of this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for [Method](/docs/api/rust/tauri/struct.Method\n\"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<&'a [Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\")> for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#195-200\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &&'a [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#197\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#223-228\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &&'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#225\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\")> for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\")> for &'a\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#202-207\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#204\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>\nfor [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#209-214\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#211\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#263-270\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: [&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)\n) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\"), <[Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#267\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#272-279\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidMethod](/docs/api/rust/tauri/struct.InvalidMethod \"struct\ntauri::http::method::InvalidMethod\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: &'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\"), <[Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#276\n\"goto source code\") Performs the conversion. ### impl\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45 \"goto source\ncode\") ### impl\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45 \"goto source\ncode\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/method.rs.html#45 \"goto source\ncode\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Method](/docs/api/rust/tauri/struct.Method \"struct\ntauri::http::method::Method\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Method](/docs/api/rust/tauri/struct.Method\n\"struct tauri::http::method::Method\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/method/struct.Method"},{"id":"prose_docs_api_rust_tauri_http_status_struct_InvalidStatusCode_md","title":"Struct tauri::http::status::InvalidStatusCode","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::status::InvalidStatusCode, ```rs pub struct\nInvalidStatusCode { /* fields omitted */ } ``` Expand description A possible\nerror value when converting a `StatusCode` from a `u16` or `&str` This error\nindicates that the supplied input was not a valid number, was less than 100, or\nwas greater than 999. ## Trait Implementations ### impl\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#525-531\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#526\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#533-537\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#534\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl [Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html\n\"trait std::error::Error\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#539\n\"goto source code\") #### fn\n[source](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&(dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\") +\n'static)>1.30.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#106\n\"goto source code\") The lower-level source of this error, if any. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.source)\n#### fn\n[backtrace](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[Backtrace](https://doc.rust-lang.org/1.54.0/std/backtrace/struct.Backtrace.html\n\"struct\nstd::backtrace::Backtrace\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#134\n\"goto source code\") 🔬 This is a nightly-only experimental API. (`backtrace`)\nReturns a stack backtrace, if available, of where this error occurred. [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.backtrace)\n#### fn\n[description](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)(&self)\n->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#146\n\"goto source code\") 👎 Deprecated since 1.42.0: use the Display impl or\nto_string() [Read\nmore](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.description)\n#### fn\n[cause](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html#method.cause)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&dyn\n[Error](https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html \"trait\nstd::error::Error\")>1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/std/error.rs.html#156\n\"goto source code\") 👎 Deprecated since 1.33.0: replaced by Error::source, which\ncan support downcasting ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/status/struct.InvalidStatusCode"},{"id":"prose_docs_api_rust_tauri_http_status_struct_StatusCode_md","title":"Struct tauri::http::status::StatusCode","sections":["Examples","Implementations","Example","Note","Example","Example","Example","Trait Implementations","Example","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::status::StatusCode, ```rs pub struct StatusCode(_); ```\nExpand description An HTTP status code (`status-code` in RFC 7230 et al.).\nConstants are provided for known status codes, including those in the IANA [HTTP\nStatus Code\nRegistry](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml).\nStatus code values in the range 100-999 (inclusive) are supported by this type.\nValues in the range 100-599 are semantically classified by the most significant\ndigit. See\n[`StatusCode::is_success`](/docs/api/rust/tauri/struct.StatusCode#method.is_success\n\"StatusCode::is_success\"), etc. Values above 599 are unclassified but allowed\nfor legacy compatibility, though their use is discouraged. Applications may\ninterpret such values as protocol errors. ## Examples ```rs use\nhttp::StatusCode; assert_eq!(StatusCode::from_u16(200).unwrap(),\nStatusCode::OK); assert_eq!(StatusCode::NOT_FOUND.as_u16(), 404);\nassert!(StatusCode::OK.is_success()); ``` ## Implementations ### impl\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#55-200\n\"goto source code\") #### pub fn\n[from_u16](/docs/api/rust/tauri/about:blank#method.from_u16)(src:\n[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#73\n\"goto source code\") Converts a u16 to a status code. The function validates the\ncorrectness of the supplied u16. It must be greater or equal to 100 and less\nthan 1000. ## Example ```rs use http::StatusCode; let ok =\nStatusCode::from_u16(200).unwrap(); assert_eq!(ok, StatusCode::OK); let err =\nStatusCode::from_u16(99); assert!(err.is_err()); ``` #### pub fn\n[from_bytes](/docs/api/rust/tauri/about:blank#method.from_bytes)(src:\n[&\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html))\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#84\n\"goto source code\") Converts a\n&[u8](https://docs.rs/http/0.2.4/std/primitive.u8.html \"u8\") to a status code\n#### pub fn [as_u16](/docs/api/rust/tauri/about:blank#method.as_u16)(&self) ->\n[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#119\n\"goto source code\") Returns the `u16` corresponding to this `StatusCode`. ##\nNote This is the same as the `From` implementation, but included as an inherent\nmethod because that implementation doesn’t appear in rustdocs, as well as a way\nto force the type instead of relying on inference. ## Example ```rs let status =\nhttp::StatusCode::OK; assert_eq!(status.as_u16(), 200); ``` #### pub fn\n[as_str](/docs/api/rust/tauri/about:blank#method.as_str)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#135\n\"goto source code\") Returns a &str representation of the `StatusCode` The return\nvalue only includes a numerical representation of the status code. The canonical\nreason is not included. ## Example ```rs let status = http::StatusCode::OK;\nassert_eq!(status.as_str(), \"200\"); ``` #### pub fn\n[canonical_reason](/docs/api/rust/tauri/about:blank#method.canonical_reason)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#167\n\"goto source code\") Get the standardised `reason-phrase` for this status code.\nThis is mostly here for servers writing responses, but could potentially have\napplication at other times. The reason phrase is defined as being exclusively\nfor human readers. You should avoid deriving any meaning from it at all costs.\nBear in mind also that in HTTP/2.0 and HTTP/3.0 the reason phrase is abolished\nfrom transmission, and so this canonical reason phrase really is the only reason\nphrase you’ll find. ## Example ```rs let status = http::StatusCode::OK;\nassert_eq!(status.canonical_reason(), Some(\"OK\")); ``` #### pub fn\n[is_informational](/docs/api/rust/tauri/about:blank#method.is_informational)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#173\n\"goto source code\") Check if status is within 100-199. #### pub fn\n[is_success](/docs/api/rust/tauri/about:blank#method.is_success)(&self) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#179\n\"goto source code\") Check if status is within 200-299. #### pub fn\n[is_redirection](/docs/api/rust/tauri/about:blank#method.is_redirection)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#185\n\"goto source code\") Check if status is within 300-399. #### pub fn\n[is_client_error](/docs/api/rust/tauri/about:blank#method.is_client_error)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#191\n\"goto source code\") Check if status is within 400-499. #### pub fn\n[is_server_error](/docs/api/rust/tauri/about:blank#method.is_server_error)(&self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#197\n\"goto source code\") Check if status is within 500-599. ### impl\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") #### pub const\n[**CONTINUE**](/docs/api/rust/tauri/about:blank#associatedconstant.CONTINUE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 100 Continue \\[[RFC7231, Section\n6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)] #### pub const\n[**SWITCHING_PROTOCOLS**](/docs/api/rust/tauri/about:blank#associatedconstant.SWITCHING_PROTOCOLS):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 101 Switching Protocols \\[[RFC7231, Section\n6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)] #### pub const\n[**PROCESSING**](/docs/api/rust/tauri/about:blank#associatedconstant.PROCESSING):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 102 Processing\n\\[[RFC2518](https://tools.ietf.org/html/rfc2518)] #### pub const\n[**OK**](/docs/api/rust/tauri/about:blank#associatedconstant.OK):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 200 OK \\[[RFC7231, Section\n6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)] #### pub const\n[**CREATED**](/docs/api/rust/tauri/about:blank#associatedconstant.CREATED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 201 Created \\[[RFC7231, Section\n6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)] #### pub const\n[**ACCEPTED**](/docs/api/rust/tauri/about:blank#associatedconstant.ACCEPTED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 202 Accepted \\[[RFC7231, Section\n6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)] #### pub const\n[**NON_AUTHORITATIVE_INFORMATION**](/docs/api/rust/tauri/about:blank#associatedconstant.NON_AUTHORITATIVE_INFORMATION):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 203 Non-Authoritative Information \\[[RFC7231, Section\n6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)] #### pub const\n[**NO_CONTENT**](/docs/api/rust/tauri/about:blank#associatedconstant.NO_CONTENT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 204 No Content \\[[RFC7231, Section\n6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)] #### pub const\n[**RESET_CONTENT**](/docs/api/rust/tauri/about:blank#associatedconstant.RESET_CONTENT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 205 Reset Content \\[[RFC7231, Section\n6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)] #### pub const\n[**PARTIAL_CONTENT**](/docs/api/rust/tauri/about:blank#associatedconstant.PARTIAL_CONTENT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 206 Partial Content \\[[RFC7233, Section\n4.1](https://tools.ietf.org/html/rfc7233#section-4.1)] #### pub const\n[**MULTI_STATUS**](/docs/api/rust/tauri/about:blank#associatedconstant.MULTI_STATUS):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 207 Multi-Status\n\\[[RFC4918](https://tools.ietf.org/html/rfc4918)] #### pub const\n[**ALREADY_REPORTED**](/docs/api/rust/tauri/about:blank#associatedconstant.ALREADY_REPORTED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 208 Already Reported\n\\[[RFC5842](https://tools.ietf.org/html/rfc5842)] #### pub const\n[**IM_USED**](/docs/api/rust/tauri/about:blank#associatedconstant.IM_USED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 226 IM Used\n\\[[RFC3229](https://tools.ietf.org/html/rfc3229)] #### pub const\n[**MULTIPLE_CHOICES**](/docs/api/rust/tauri/about:blank#associatedconstant.MULTIPLE_CHOICES):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 300 Multiple Choices \\[[RFC7231, Section\n6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)] #### pub const\n[**MOVED_PERMANENTLY**](/docs/api/rust/tauri/about:blank#associatedconstant.MOVED_PERMANENTLY):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 301 Moved Permanently \\[[RFC7231, Section\n6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)] #### pub const\n[**FOUND**](/docs/api/rust/tauri/about:blank#associatedconstant.FOUND):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 302 Found \\[[RFC7231, Section\n6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)] #### pub const\n[**SEE_OTHER**](/docs/api/rust/tauri/about:blank#associatedconstant.SEE_OTHER):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 303 See Other \\[[RFC7231, Section\n6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)] #### pub const\n[**NOT_MODIFIED**](/docs/api/rust/tauri/about:blank#associatedconstant.NOT_MODIFIED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 304 Not Modified \\[[RFC7232, Section\n4.1](https://tools.ietf.org/html/rfc7232#section-4.1)] #### pub const\n[**USE_PROXY**](/docs/api/rust/tauri/about:blank#associatedconstant.USE_PROXY):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 305 Use Proxy \\[[RFC7231, Section\n6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)] #### pub const\n[**TEMPORARY_REDIRECT**](/docs/api/rust/tauri/about:blank#associatedconstant.TEMPORARY_REDIRECT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 307 Temporary Redirect \\[[RFC7231, Section\n6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)] #### pub const\n[**PERMANENT_REDIRECT**](/docs/api/rust/tauri/about:blank#associatedconstant.PERMANENT_REDIRECT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 308 Permanent Redirect\n\\[[RFC7238](https://tools.ietf.org/html/rfc7238)] #### pub const\n[**BAD_REQUEST**](/docs/api/rust/tauri/about:blank#associatedconstant.BAD_REQUEST):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 400 Bad Request \\[[RFC7231, Section\n6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)] #### pub const\n[**UNAUTHORIZED**](/docs/api/rust/tauri/about:blank#associatedconstant.UNAUTHORIZED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 401 Unauthorized \\[[RFC7235, Section\n3.1](https://tools.ietf.org/html/rfc7235#section-3.1)] #### pub const\n[**PAYMENT_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.PAYMENT_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 402 Payment Required \\[[RFC7231, Section\n6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)] #### pub const\n[**FORBIDDEN**](/docs/api/rust/tauri/about:blank#associatedconstant.FORBIDDEN):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 403 Forbidden \\[[RFC7231, Section\n6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)] #### pub const\n[**NOT_FOUND**](/docs/api/rust/tauri/about:blank#associatedconstant.NOT_FOUND):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 404 Not Found \\[[RFC7231, Section\n6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)] #### pub const\n[**METHOD_NOT_ALLOWED**](/docs/api/rust/tauri/about:blank#associatedconstant.METHOD_NOT_ALLOWED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 405 Method Not Allowed \\[[RFC7231, Section\n6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)] #### pub const\n[**NOT_ACCEPTABLE**](/docs/api/rust/tauri/about:blank#associatedconstant.NOT_ACCEPTABLE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 406 Not Acceptable \\[[RFC7231, Section\n6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)] #### pub const\n[**PROXY_AUTHENTICATION_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.PROXY_AUTHENTICATION_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 407 Proxy Authentication Required \\[[RFC7235, Section\n3.2](https://tools.ietf.org/html/rfc7235#section-3.2)] #### pub const\n[**REQUEST_TIMEOUT**](/docs/api/rust/tauri/about:blank#associatedconstant.REQUEST_TIMEOUT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 408 Request Timeout \\[[RFC7231, Section\n6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)] #### pub const\n[**CONFLICT**](/docs/api/rust/tauri/about:blank#associatedconstant.CONFLICT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 409 Conflict \\[[RFC7231, Section\n6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)] #### pub const\n[**GONE**](/docs/api/rust/tauri/about:blank#associatedconstant.GONE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 410 Gone \\[[RFC7231, Section\n6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)] #### pub const\n[**LENGTH_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.LENGTH_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 411 Length Required \\[[RFC7231, Section\n6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)] #### pub const\n[**PRECONDITION_FAILED**](/docs/api/rust/tauri/about:blank#associatedconstant.PRECONDITION_FAILED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 412 Precondition Failed \\[[RFC7232, Section\n4.2](https://tools.ietf.org/html/rfc7232#section-4.2)] #### pub const\n[**PAYLOAD_TOO_LARGE**](/docs/api/rust/tauri/about:blank#associatedconstant.PAYLOAD_TOO_LARGE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 413 Payload Too Large \\[[RFC7231, Section\n6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)] #### pub const\n[**URI_TOO_LONG**](/docs/api/rust/tauri/about:blank#associatedconstant.URI_TOO_LONG):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 414 URI Too Long \\[[RFC7231, Section\n6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)] #### pub const\n[**UNSUPPORTED_MEDIA_TYPE**](/docs/api/rust/tauri/about:blank#associatedconstant.UNSUPPORTED_MEDIA_TYPE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 415 Unsupported Media Type \\[[RFC7231, Section\n6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)] #### pub const\n[**RANGE_NOT_SATISFIABLE**](/docs/api/rust/tauri/about:blank#associatedconstant.RANGE_NOT_SATISFIABLE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 416 Range Not Satisfiable \\[[RFC7233, Section\n4.4](https://tools.ietf.org/html/rfc7233#section-4.4)] #### pub const\n[**EXPECTATION_FAILED**](/docs/api/rust/tauri/about:blank#associatedconstant.EXPECTATION_FAILED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 417 Expectation Failed \\[[RFC7231, Section\n6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)] #### pub const\n[**IM_A_TEAPOT**](/docs/api/rust/tauri/about:blank#associatedconstant.IM_A_TEAPOT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 418 I’m a teapot \\[curiously not registered by IANA but\n[RFC2324](https://tools.ietf.org/html/rfc2324)] #### pub const\n[**MISDIRECTED_REQUEST**](/docs/api/rust/tauri/about:blank#associatedconstant.MISDIRECTED_REQUEST):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 421 Misdirected Request [RFC7540, Section\n9.1.2](http://tools.ietf.org/html/rfc7540#section-9.1.2) #### pub const\n[**UNPROCESSABLE_ENTITY**](/docs/api/rust/tauri/about:blank#associatedconstant.UNPROCESSABLE_ENTITY):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 422 Unprocessable Entity\n\\[[RFC4918](https://tools.ietf.org/html/rfc4918)] #### pub const\n[**LOCKED**](/docs/api/rust/tauri/about:blank#associatedconstant.LOCKED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 423 Locked \\[[RFC4918](https://tools.ietf.org/html/rfc4918)]\n#### pub const\n[**FAILED_DEPENDENCY**](/docs/api/rust/tauri/about:blank#associatedconstant.FAILED_DEPENDENCY):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 424 Failed Dependency\n\\[[RFC4918](https://tools.ietf.org/html/rfc4918)] #### pub const\n[**UPGRADE_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.UPGRADE_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 426 Upgrade Required \\[[RFC7231, Section\n6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)] #### pub const\n[**PRECONDITION_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.PRECONDITION_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 428 Precondition Required\n\\[[RFC6585](https://tools.ietf.org/html/rfc6585)] #### pub const\n[**TOO_MANY_REQUESTS**](/docs/api/rust/tauri/about:blank#associatedconstant.TOO_MANY_REQUESTS):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 429 Too Many Requests\n\\[[RFC6585](https://tools.ietf.org/html/rfc6585)] #### pub const\n[**REQUEST_HEADER_FIELDS_TOO_LARGE**](/docs/api/rust/tauri/about:blank#associatedconstant.REQUEST_HEADER_FIELDS_TOO_LARGE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 431 Request Header Fields Too Large\n\\[[RFC6585](https://tools.ietf.org/html/rfc6585)] #### pub const\n[**UNAVAILABLE_FOR_LEGAL_REASONS**](/docs/api/rust/tauri/about:blank#associatedconstant.UNAVAILABLE_FOR_LEGAL_REASONS):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 451 Unavailable For Legal Reasons\n\\[[RFC7725](http://tools.ietf.org/html/rfc7725)] #### pub const\n[**INTERNAL_SERVER_ERROR**](/docs/api/rust/tauri/about:blank#associatedconstant.INTERNAL_SERVER_ERROR):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 500 Internal Server Error \\[[RFC7231, Section\n6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)] #### pub const\n[**NOT_IMPLEMENTED**](/docs/api/rust/tauri/about:blank#associatedconstant.NOT_IMPLEMENTED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 501 Not Implemented \\[[RFC7231, Section\n6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)] #### pub const\n[**BAD_GATEWAY**](/docs/api/rust/tauri/about:blank#associatedconstant.BAD_GATEWAY):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 502 Bad Gateway \\[[RFC7231, Section\n6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)] #### pub const\n[**SERVICE_UNAVAILABLE**](/docs/api/rust/tauri/about:blank#associatedconstant.SERVICE_UNAVAILABLE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 503 Service Unavailable \\[[RFC7231, Section\n6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)] #### pub const\n[**GATEWAY_TIMEOUT**](/docs/api/rust/tauri/about:blank#associatedconstant.GATEWAY_TIMEOUT):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 504 Gateway Timeout \\[[RFC7231, Section\n6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)] #### pub const\n[**HTTP_VERSION_NOT_SUPPORTED**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_VERSION_NOT_SUPPORTED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 505 HTTP Version Not Supported \\[[RFC7231, Section\n6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)] #### pub const\n[**VARIANT_ALSO_NEGOTIATES**](/docs/api/rust/tauri/about:blank#associatedconstant.VARIANT_ALSO_NEGOTIATES):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 506 Variant Also Negotiates\n\\[[RFC2295](https://tools.ietf.org/html/rfc2295)] #### pub const\n[**INSUFFICIENT_STORAGE**](/docs/api/rust/tauri/about:blank#associatedconstant.INSUFFICIENT_STORAGE):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 507 Insufficient Storage\n\\[[RFC4918](https://tools.ietf.org/html/rfc4918)] #### pub const\n[**LOOP_DETECTED**](/docs/api/rust/tauri/about:blank#associatedconstant.LOOP_DETECTED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 508 Loop Detected\n\\[[RFC5842](https://tools.ietf.org/html/rfc5842)] #### pub const\n[**NOT_EXTENDED**](/docs/api/rust/tauri/about:blank#associatedconstant.NOT_EXTENDED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 510 Not Extended\n\\[[RFC2774](https://tools.ietf.org/html/rfc2774)] #### pub const\n[**NETWORK_AUTHENTICATION_REQUIRED**](/docs/api/rust/tauri/about:blank#associatedconstant.NETWORK_AUTHENTICATION_REQUIRED):\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#323-515\n\"goto source code\") 511 Network Authentication Required\n\\[[RFC6585](https://tools.ietf.org/html/rfc6585)] ## Trait Implementations ###\nimpl [Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#202-206\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#203\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#227-232\n\"goto source code\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#229\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl [Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html\n\"trait core::fmt::Display\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#216-225\n\"goto source code\") Formats the status code, _including_ the canonical reason.\n## Example ```rs assert_eq!(format!(\"{}\", StatusCode::OK), \"200 OK\"); ``` ####\npub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#217\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt)\n### impl<'a>\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<&'a [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\")> for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#263-268\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\n&'a [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")) ->\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#265\n\"goto source code\") Performs the conversion. ### impl\n[FromStr](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html\n\"trait core::str::traits::FromStr\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#255-261\n\"goto source code\") #### type\n[Err](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err)\n= [InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") The associated error which can be\nreturned from parsing. #### pub fn\n[from_str](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)(s:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n[InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#258\n\"goto source code\") Parses a string `s` to return a value of this type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl [Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") #### pub fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)(&self,\nother: &[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") This method returns an\n[`Ordering`](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"Ordering\") between `self` and `other`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)\n#### \\#\\[must_use]fn\n[max](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#738-740\n\"goto source code\") Compares and returns the maximum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max) ####\n\\#\\[must_use]fn\n[min](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#758-760\n\"goto source code\") Compares and returns the minimum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min) ####\n\\#\\[must_use]fn\n[clamp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp)(self,\nmin: Self, max: Self) ->\nSelf1.50.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#783-785\n\"goto source code\") Restrict a value to a certain interval. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp) ###\nimpl [PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\")> for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait\ncore::cmp::PartialEq\")<[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)>\nfor [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#234-239\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#236\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait\ncore::cmp::PartialOrd\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\")> for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>\nfor [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#270-277\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: [&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)\n) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n<[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<[&'a\n\\[](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)[u8](https://doc.rust-lang.org/1.54.0/std/primitive.u8.html)[\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#274\n\"goto source code\") Performs the conversion. ### impl<'a>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)> for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#279-286\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: &'a [str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n<[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<&'a\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#283\n\"goto source code\") Performs the conversion. ### impl\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)>\nfor [StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#288-295\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n= [InvalidStatusCode](/docs/api/rust/tauri/struct.InvalidStatusCode \"struct\ntauri::http::status::InvalidStatusCode\") The type returned in the event of a\nconversion error. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(\nt: [u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html) ) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\"),\n<[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<[u16](https://doc.rust-lang.org/1.54.0/std/primitive.u16.html)>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#292\n\"goto source code\") Performs the conversion. ### impl\n[Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html \"trait\ncore::marker::Copy\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44 \"goto source\ncode\") ### impl [Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html\n\"trait core::cmp::Eq\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44 \"goto source\ncode\") ### impl\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44 \"goto source\ncode\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/status.rs.html#44 \"goto source\ncode\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [StatusCode](/docs/api/rust/tauri/struct.StatusCode\n\"struct tauri::http::status::StatusCode\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[StatusCode](/docs/api/rust/tauri/struct.StatusCode \"struct\ntauri::http::status::StatusCode\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T>\n[ToString](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html\n\"trait alloc::string::ToString\") for T where T:\n[Display](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html \"trait\ncore::fmt::Display\") +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386\n\"goto source code\") #### pub default fn\n[to_string](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)(&self)\n-> [String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378\n\"goto source code\") Converts the given value to a `String`. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/status/struct.StatusCode"},{"id":"prose_docs_api_rust_tauri_http_version_struct_Version_md","title":"Struct tauri::http::version::Version","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::http::version::Version, ```rs pub struct Version(_); ``` Expand\ndescription Represents a version of the HTTP spec. ## Implementations ### impl\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#28-43\n\"goto source code\") #### pub const\n[**HTTP_09**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_09):\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#30\n\"goto source code\") `HTTP/0.9` #### pub const\n[**HTTP_10**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_10):\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#33\n\"goto source code\") `HTTP/1.0` #### pub const\n[**HTTP_11**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_11):\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#36\n\"goto source code\") `HTTP/1.1` #### pub const\n[**HTTP_2**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_2):\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#39\n\"goto source code\") `HTTP/2.0` #### pub const\n[**HTTP_3**](/docs/api/rust/tauri/about:blank#associatedconstant.HTTP_3):\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#42\n\"goto source code\") `HTTP/3.0` ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") #### pub fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Version](/docs/api/rust/tauri/struct.Version\n\"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#62-75\n\"goto source code\") #### pub fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html),\n[Error](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html \"struct\ncore::fmt::Error\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#63\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#55-60\n\"goto source code\") #### pub fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#57\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl [Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html\n\"trait core::hash::Hash\") for [Version](/docs/api/rust/tauri/struct.Version\n\"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") #### pub fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<\\_\\_H>(&self,\nstate:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)\\_\\_H)\nwhere \\_\\_H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") Feeds this value into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)\n#### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl [Ord](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html \"trait\ncore::cmp::Ord\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") #### pub fn\n[cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)(&self,\nother: &[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")) ->\n[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html \"enum\ncore::cmp::Ordering\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") This method returns an\n[`Ordering`](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"Ordering\") between `self` and `other`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#tymethod.cmp)\n#### \\#\\[must_use]fn\n[max](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#738-740\n\"goto source code\") Compares and returns the maximum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.max) ####\n\\#\\[must_use]fn\n[min](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min)(self,\nother: Self) ->\nSelf1.21.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#758-760\n\"goto source code\") Compares and returns the minimum of two values. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.min) ####\n\\#\\[must_use]fn\n[clamp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp)(self,\nmin: Self, max: Self) ->\nSelf1.50.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#783-785\n\"goto source code\") Restrict a value to a certain interval. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Ord.html#method.clamp) ###\nimpl [PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Version](/docs/api/rust/tauri/struct.Version\n\"struct tauri::http::version::Version\")> for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") #### pub fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: &[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") This method tests for `self` and `other` values to be equal,\nand is used by `==`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)\n#### pub fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: &[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") This method tests for `!=`. ### impl\n[PartialOrd](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html\n\"trait core::cmp::PartialOrd\")<[Version](/docs/api/rust/tauri/struct.Version\n\"struct tauri::http::version::Version\")> for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") #### pub fn\n[partial_cmp](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)(&self,\nother: &[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Ordering](https://doc.rust-lang.org/1.54.0/core/cmp/enum.Ordering.html\n\"enum\ncore::cmp::Ordering\")>[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25\n\"goto source code\") This method returns an ordering between `self` and `other`\nvalues if one exists. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n#### \\#\\[must_use]fn\n[lt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#978\n\"goto source code\") This method tests less than (for `self` and `other`) and is\nused by the `<` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.lt)\n#### \\#\\[must_use]fn\n[le](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#997\n\"goto source code\") This method tests less than or equal to (for `self` and\n`other`) and is used by the `<=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.le)\n#### \\#\\[must_use]fn\n[gt](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1019\n\"goto source code\") This method tests greater than (for `self` and `other`) and\nis used by the `>` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.gt)\n#### \\#\\[must_use]fn\n[ge](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#1038\n\"goto source code\") This method tests greater than or equal to (for `self` and\n`other`) and is used by the `>=` operator. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialOrd.html#method.ge)\n### impl [Copy](https://doc.rust-lang.org/1.54.0/core/marker/trait.Copy.html\n\"trait core::marker::Copy\") for [Version](/docs/api/rust/tauri/struct.Version\n\"struct tauri::http::version::Version\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25 \"goto source\ncode\") ### impl [Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html\n\"trait core::cmp::Eq\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25 \"goto source\ncode\") ### impl\n[StructuralEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralEq.html\n\"trait core::marker::StructuralEq\") for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25 \"goto source\ncode\") ### impl\n[StructuralPartialEq](https://doc.rust-lang.org/1.54.0/core/marker/trait.StructuralPartialEq.html\n\"trait core::marker::StructuralPartialEq\") for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\")\n[\\[src\\]](https://docs.rs/http/0.2.4/src/http/version.rs.html#25 \"goto source\ncode\") ## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Version](/docs/api/rust/tauri/struct.Version \"struct\ntauri::http::version::Version\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/http/version/struct.Version"},{"id":"prose_docs_api_rust_tauri_plugin_trait_Plugin_md","title":"Trait tauri::plugin::Plugin","sections":["Required methods","Provided methods","Implementors"],"subSections":[],"code":["rs"],"text":"# Trait tauri::plugin::Plugin, ```rs pub trait Plugin: Send { fn name(&self) ->\n&'static str; fn initialize(         &mut self,         app: &AppHandle,\n        config: JsonValue     ) -> Result<()> { ... } fn\ninitialization_script(&self) -> Option { ... } fn created(&mut self, window:\nWindow) { ... } fn on_page_load(&mut self, window: Window, payload:\nPageLoadPayload) { ... } fn extend_api(&mut self, invoke: Invoke) { ... } } ```\nExpand description The plugin interface. ## Required methods #### fn\n[name](/docs/api/rust/tauri/about:blank#tymethod.name)(&self) -> &'static\n[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#21\n\"goto source code\") The plugin name. Used as key on the plugin config object. ##\nProvided methods #### fn\n[initialize](/docs/api/rust/tauri/about:blank#method.initialize)(&mut self, app:\n&[AppHandle](/docs/api/rust/tauri/../struct.AppHandle \"struct\ntauri::AppHandle\")<R>, config:\n[JsonValue](https://docs.rs/serde_json/1.0.66/serde_json/value/enum.Value.html\n\"enum serde_json::value::Value\")) -> [Result](/docs/api/rust/tauri/type.Result\n\"type\ntauri::plugin::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#25-27\n\"goto source code\") Initializes the plugin. #### fn\n[initialization_script](/docs/api/rust/tauri/about:blank#method.initialization_script)(&self)\n-> [Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#34-36\n\"goto source code\") The JS script to evaluate on webview initialization. The\nscript is wrapped into its own context with `(function () { /* your script here\n*/ })();`, so global variables must be assigned to `window` instead of implicity\ndeclared. It’s guaranteed that this script is executed before the page is\nloaded. #### fn [created](/docs/api/rust/tauri/about:blank#method.created)(&mut\nself, window: [Window](/docs/api/rust/tauri/../window/struct.Window \"struct\ntauri::window::Window\")<R>)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#40\n\"goto source code\") Callback invoked when the webview is created. #### fn\n[on_page_load](/docs/api/rust/tauri/about:blank#method.on_page_load)(&mut self,\nwindow: [Window](/docs/api/rust/tauri/../window/struct.Window \"struct\ntauri::window::Window\")<R>, payload:\n[PageLoadPayload](/docs/api/rust/tauri/../struct.PageLoadPayload \"struct\ntauri::PageLoadPayload\"))[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#44\n\"goto source code\") Callback invoked when the webview performs a navigation to a\npage. #### fn\n[extend_api](/docs/api/rust/tauri/about:blank#method.extend_api)(&mut self,\ninvoke: [Invoke](/docs/api/rust/tauri/../struct.Invoke \"struct\ntauri::Invoke\")<R>)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/plugin.rs#48\n\"goto source code\") Extend commands to\n[`crate::Builder::invoke_handler`](/docs/api/rust/tauri/../struct.Builder#method.invoke_handler\n\"crate::Builder::invoke_handler\"). ## Implementors","url":"https://tauri.studio/docs/api/rust/tauri/plugin/trait.Plugin"},{"id":"prose_docs_api_rust_tauri_plugin_type_Result_md","title":"Type tauri::plugin::Result","sections":[],"subSections":[],"code":["rs"],"text":"# Type Definition tauri::plugin::Result, ```rs type Result = Result>; ``` Expand\ndescription The result type of Tauri plugin module.","url":"https://tauri.studio/docs/api/rust/tauri/plugin/type.Result"},{"id":"prose_docs_api_rust_tauri_settings_fn_read_settings_md","title":"Fn tauri::settings::read_settings","sections":[],"subSections":[],"code":["rs"],"text":"# Function tauri::settings::read_settings, ```rs pub fn read_settings(config:\n&Config, package_info: &PackageInfo) -> Settings ``` Expand description Reads\nthe settings from the file system.","url":"https://tauri.studio/docs/api/rust/tauri/settings/fn.read_settings"},{"id":"prose_docs_api_rust_tauri_settings_struct_Settings_md","title":"Struct tauri::settings::Settings","sections":["Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::settings::Settings, ```rs #[non_exhaustive] pub struct Settings\n{} ``` Expand description The Tauri Settings. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Settings](/docs/api/rust/tauri/struct.Settings\n\"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl\n[Default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html\n\"trait core::default::Default\") for\n[Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") #### fn\n[default](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)()\n-> [Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") Returns the “default value” for a type. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default)\n### impl<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de> for\n[Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") #### fn\n[deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)<\\_\\_D>(\\_\\_deserializer:\n\\_\\_D) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<Self,\n\\_\\_D::[Error](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html#associatedtype.Error\n\"type serde::de::Deserializer::Error\")> where \\_\\_D:\n[Deserializer](https://docs.rs/serde/1.0.129/serde/de/trait.Deserializer.html\n\"trait\nserde::de::Deserializer\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") Deserialize this value from the given Serde deserializer.\n[Read\nmore](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html#tymethod.deserialize)\n### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for [Settings](/docs/api/rust/tauri/struct.Settings\n\"struct\ntauri::settings::Settings\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(&self,\n\\_\\_serializer: \\_\\_S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<\\_\\_S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\n\\_\\_S::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/settings.rs#24\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Settings](/docs/api/rust/tauri/struct.Settings\n\"struct tauri::settings::Settings\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Settings](/docs/api/rust/tauri/struct.Settings \"struct\ntauri::settings::Settings\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<'de, D, R>\n[CommandArg](/docs/api/rust/tauri/../command/trait.CommandArg \"trait\ntauri::command::CommandArg\")<'de, R> for D where R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\"), D:\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait\nserde::de::Deserialize\")<'de>,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#51-56\n\"goto source code\") #### pub fn\n[from_command](/docs/api/rust/tauri/../command/trait.CommandArg#tymethod.from_command)([CommandItem](/docs/api/rust/tauri/../command/struct.CommandItem\n\"struct tauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<D,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/command.rs#52-55\n\"goto source code\") Derives an instance of `Self` from the\n[`CommandItem`](/docs/api/rust/tauri/../command/struct.CommandItem\n\"CommandItem\"). [Read\nmore](/docs/api/rust/tauri/../command/trait.CommandArg#tymethod.from_command)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V ### impl<T>\n[DeserializeOwned](https://docs.rs/serde/1.0.129/serde/de/trait.DeserializeOwned.html\n\"trait serde::de::DeserializeOwned\") for T where T: for<'de>\n[Deserialize](https://docs.rs/serde/1.0.129/serde/de/trait.Deserialize.html\n\"trait serde::de::Deserialize\")<'de>,\n[\\[src\\]](https://docs.rs/serde/1.0.129/src/serde/de/mod.rs.html#603 \"goto\nsource code\")","url":"https://tauri.studio/docs/api/rust/tauri/settings/struct.Settings"},{"id":"prose_docs_api_rust_tauri_window_struct_MenuEvent_md","title":"Struct tauri::window::MenuEvent","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::window::MenuEvent, ```rs pub struct MenuEvent { /* fields\nomitted */ } ``` Expand description The window menu event. ## Implementations\n### impl [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#20-25\n\"goto source code\") #### pub fn\n[menu_item_id](/docs/api/rust/tauri/about:blank#method.menu_item_id)(&self) ->\nMenuIdRef<'\\_>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#22-24\n\"goto source code\") The menu item id. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#15\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent \"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#15\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct\ntauri::window::MenuEvent\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#15\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#15\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[MenuEvent](/docs/api/rust/tauri/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ### impl\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct tauri::window::MenuEvent\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct tauri::window::MenuEvent\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct tauri::window::MenuEvent\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[MenuEvent](/docs/api/rust/tauri/struct.MenuEvent \"struct\ntauri::window::MenuEvent\") ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/window/struct.MenuEvent"},{"id":"prose_docs_api_rust_tauri_window_struct_MenuHandle_md","title":"Struct tauri::window::MenuHandle","sections":["Implementations","Panics","Panics","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::window::MenuHandle, ```rs pub struct MenuHandle { /* fields\nomitted */ } ``` Expand description A handle to a system tray. Allows updating\nthe context menu items. ## Implementations ### impl<R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[MenuHandle](/docs/api/rust/tauri/struct.MenuHandle \"struct\ntauri::window::MenuHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#61-112\n\"goto source code\") #### pub fn\n[get_item](/docs/api/rust/tauri/about:blank#method.get_item)(&self, id:\nMenuIdRef<'\\_>) ->\nMenuItemHandle<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#63-73\n\"goto source code\") Gets a handle to the menu item that has the specified `id`.\n#### pub fn [show](/docs/api/rust/tauri/about:blank#method.show)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#76-78\n\"goto source code\") Shows the menu. #### pub fn\n[hide](/docs/api/rust/tauri/about:blank#method.hide)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#81-83\n\"goto source code\") Hides the menu. #### pub fn\n[is_visible](/docs/api/rust/tauri/about:blank#method.is_visible)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#93-95\n\"goto source code\") Whether the menu is visible or not. ## Panics - Panics if\nthe event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[toggle](/docs/api/rust/tauri/about:blank#method.toggle)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#105-111\n\"goto source code\") Toggles the menu visibility. ## Panics - Panics if the event\nloop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. ## Trait Implementations ### impl<R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [MenuHandle](/docs/api/rust/tauri/struct.MenuHandle\n\"struct\ntauri::window::MenuHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#35-42\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> Self[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#36-41 \"goto\nsource code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<R: [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait tauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [MenuHandle](/docs/api/rust/tauri/struct.MenuHandle\n\"struct tauri::window::MenuHandle\")<R> where\nR::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\"),[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#29\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window/menu.rs#29\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n## Auto Trait Implementations ### impl<R>\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[MenuHandle](/docs/api/rust/tauri/struct.MenuHandle \"struct\ntauri::window::MenuHandle\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\"), ### impl<R>\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") for [MenuHandle](/docs/api/rust/tauri/struct.MenuHandle\n\"struct tauri::window::MenuHandle\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [MenuHandle](/docs/api/rust/tauri/struct.MenuHandle\n\"struct tauri::window::MenuHandle\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [MenuHandle](/docs/api/rust/tauri/struct.MenuHandle\n\"struct tauri::window::MenuHandle\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R>\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[MenuHandle](/docs/api/rust/tauri/struct.MenuHandle \"struct\ntauri::window::MenuHandle\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\"), ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/window/struct.MenuHandle"},{"id":"prose_docs_api_rust_tauri_window_struct_Monitor_md","title":"Struct tauri::window::Monitor","sections":["Implementations","Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl ","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::window::Monitor, ```rs pub struct Monitor { /* fields omitted */\n} ``` Expand description Monitor descriptor. ## Implementations ### impl\n[Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#58-79\n\"goto source code\") #### pub fn\n[name](/docs/api/rust/tauri/about:blank#method.name)(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<&[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#61-63\n\"goto source code\") Returns a human-readable name of the monitor. Returns None\nif the monitor doesn’t exist anymore. #### pub fn\n[size](/docs/api/rust/tauri/about:blank#method.size)(&self) ->\n&[PhysicalSize](/docs/api/rust/tauri/../struct.PhysicalSize \"struct\ntauri::PhysicalSize\")<[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#66-68\n\"goto source code\") Returns the monitor’s resolution. #### pub fn\n[position](/docs/api/rust/tauri/about:blank#method.position)(&self) ->\n&[PhysicalPosition](/docs/api/rust/tauri/../struct.PhysicalPosition \"struct\ntauri::PhysicalPosition\")<[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#71-73\n\"goto source code\") Returns the top-left corner position of the monitor relative\nto the larger full screen area. #### pub fn\n[scale_factor](/docs/api/rust/tauri/about:blank#method.scale_factor)(&self) ->\n[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#76-78\n\"goto source code\") Returns the scale factor that can be used to map logical\npixels to physical pixels, and vice versa. ## Trait Implementations ### impl\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> [Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl [Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html\n\"trait core::fmt::Debug\") for [Monitor](/docs/api/rust/tauri/struct.Monitor\n\"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<Monitor> for\n[Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#47-56\n\"goto source code\") #### fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(monitor:\nRuntimeMonitor) ->\nSelf[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#48-55 \"goto source\ncode\") Performs the conversion. ### impl\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") for [Monitor](/docs/api/rust/tauri/struct.Monitor\n\"struct\ntauri::window::Monitor\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") #### fn\n[serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)<\\_\\_S>(&self,\n\\_\\_serializer: \\_\\_S) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<\\_\\_S::[Ok](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Ok\n\"type serde::ser::Serializer::Ok\"),\n\\_\\_S::[Error](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html#associatedtype.Error\n\"type serde::ser::Serializer::Error\")> where \\_\\_S:\n[Serializer](https://docs.rs/serde/1.0.129/serde/ser/trait.Serializer.html\n\"trait\nserde::ser::Serializer\"),[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#38\n\"goto source code\") Serialize this value into the given Serde serializer. [Read\nmore](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html#tymethod.serialize)\n## Auto Trait Implementations ### impl\n[RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Monitor](/docs/api/rust/tauri/struct.Monitor \"struct tauri::window::Monitor\")\n### impl [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Monitor](/docs/api/rust/tauri/struct.Monitor\n\"struct tauri::window::Monitor\") ### impl\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\") ### impl\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\") ### impl\n[UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for\n[Monitor](/docs/api/rust/tauri/struct.Monitor \"struct tauri::window::Monitor\")\n## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/window/struct.Monitor"},{"id":"prose_docs_api_rust_tauri_window_struct_Window_md","title":"Struct tauri::window::Window","sections":["Implementations","Panics","Panics","Panics","Panics","Panics","Panics","Panics","Panics","Panics","Panics",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Panics",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Panics",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Panics",[{"content":"Platform","type":"text"},{"content":"-specific","type":"text"}],"Trait Implementations","Auto Trait Implementations","Blanket Implementations"],"subSections":["impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl","impl"],"code":["rs"],"text":"# Struct tauri::window::Window, ```rs pub struct Window { /* fields omitted */ }\n``` Expand description A webview window managed by Tauri. This type also\nimplements [`Manager`](/docs/api/rust/tauri/../trait.Manager \"Manager\") which\nallows you to manage other windows attached to the same application. ##\nImplementations ### impl<R: [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait tauri::Runtime\")> [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#143-723\n\"goto source code\") #### pub fn\n[create_window](/docs/api/rust/tauri/about:blank#method.create_window)<F>( &mut\nself, label:\n[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"), url:\n[WindowUrl](/docs/api/rust/tauri/../enum.WindowUrl \"enum tauri::WindowUrl\"),\nsetup: F ) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>> where F:\n[FnOnce](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html\n\"trait\ncore::ops::function::FnOnce\")(<R::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/../struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")) ->\n[(](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html)<R::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\") as Dispatch>::WindowBuilder,\n[WebviewAttributes](/docs/api/rust/tauri/../struct.WebviewAttributes \"struct\ntauri::WebviewAttributes\")[)](https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html),[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#158-182\n\"goto source code\") Creates a new webview window. #### pub fn\n[label](/docs/api/rust/tauri/about:blank#method.label)(&self) ->\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#237-239\n\"goto source code\") The label of this window. #### pub fn\n[emit](/docs/api/rust/tauri/about:blank#method.emit)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\")>(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#242-251\n\"goto source code\") Emits an event to the current window. #### pub fn\n[emit_others](/docs/api/rust/tauri/about:blank#method.emit_others)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>( &self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S ) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#254-256\n\"goto source code\") Emits an event on all windows except this one. #### pub fn\n[listen](/docs/api/rust/tauri/about:blank#method.listen)<F>(&self, event: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(Event) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#259-265 \"goto\nsource code\") Listen to an event on this window. #### pub fn\n[once](/docs/api/rust/tauri/about:blank#method.once)<F>(&self, event: impl\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(Event) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#268-274 \"goto\nsource code\") Listen to a an event on this window a single time. #### pub fn\n[trigger](/docs/api/rust/tauri/about:blank#method.trigger)(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), data:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#277-280\n\"goto source code\") Triggers an event on this window. #### pub fn\n[eval](/docs/api/rust/tauri/about:blank#method.eval)(&self, js:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#283-285\n\"goto source code\") Evaluates JavaScript on this window. #### pub fn\n[on_window_event](/docs/api/rust/tauri/about:blank#method.on_window_event)<F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(&[WindowEvent](/docs/api/rust/tauri/../enum.WindowEvent\n\"enum tauri::WindowEvent\")) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static>(&self, f:\nF)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#288-290 \"goto source\ncode\") Registers a window event listener. #### pub fn\n[on_menu_event](/docs/api/rust/tauri/about:blank#method.on_menu_event)<F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")([MenuEvent](/docs/api/rust/tauri/struct.MenuEvent\n\"struct tauri::window::MenuEvent\")) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") + 'static>(&self, f: F) ->\n[Uuid](https://docs.rs/uuid/0.8.2/uuid/struct.Uuid.html \"struct\nuuid::Uuid\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#293-300\n\"goto source code\") Registers a menu event listener. #### pub fn\n[menu_handle](/docs/api/rust/tauri/about:blank#method.menu_handle)(&self) ->\n[MenuHandle](/docs/api/rust/tauri/struct.MenuHandle \"struct\ntauri::window::MenuHandle\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#305-310\n\"goto source code\") Gets a handle to the window menu. #### pub fn\n[scale_factor](/docs/api/rust/tauri/about:blank#method.scale_factor)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[f64](https://doc.rust-lang.org/1.54.0/std/primitive.f64.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#320-322\n\"goto source code\") Returns the scale factor that can be used to map logical\npixels to physical pixels, and vice versa. ## Panics - Panics if the event loop\nis not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[inner_position](/docs/api/rust/tauri/about:blank#method.inner_position)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[PhysicalPosition](/docs/api/rust/tauri/../struct.PhysicalPosition\n\"struct\ntauri::PhysicalPosition\")<[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html)>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#332-334\n\"goto source code\") Returns the position of the top-left hand corner of the\nwindow’s client area relative to the top-left hand corner of the desktop. ##\nPanics - Panics if the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[outer_position](/docs/api/rust/tauri/about:blank#method.outer_position)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[PhysicalPosition](/docs/api/rust/tauri/../struct.PhysicalPosition\n\"struct\ntauri::PhysicalPosition\")<[i32](https://doc.rust-lang.org/1.54.0/std/primitive.i32.html)>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#344-346\n\"goto source code\") Returns the position of the top-left hand corner of the\nwindow relative to the top-left hand corner of the desktop. ## Panics - Panics\nif the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[inner_size](/docs/api/rust/tauri/about:blank#method.inner_size)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[PhysicalSize](/docs/api/rust/tauri/../struct.PhysicalSize\n\"struct\ntauri::PhysicalSize\")<[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#358-360\n\"goto source code\") Returns the physical size of the window’s client area. The\nclient area is the content of the window, excluding the title bar and borders.\n## Panics - Panics if the event loop is not running yet, usually when called on\nthe [`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. -\nPanics when called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[outer_size](/docs/api/rust/tauri/about:blank#method.outer_size)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[PhysicalSize](/docs/api/rust/tauri/../struct.PhysicalSize\n\"struct\ntauri::PhysicalSize\")<[u32](https://doc.rust-lang.org/1.54.0/std/primitive.u32.html)>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#372-374\n\"goto source code\") Returns the physical size of the entire window. These\ndimensions include the title bar and borders. If you don’t want that (and you\nusually don’t), use inner_size instead. ## Panics - Panics if the event loop is\nnot running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[is_fullscreen](/docs/api/rust/tauri/about:blank#method.is_fullscreen)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#384-386\n\"goto source code\") Gets the window’s current fullscreen state. ## Panics -\nPanics if the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[is_maximized](/docs/api/rust/tauri/about:blank#method.is_maximized)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#396-398\n\"goto source code\") Gets the window’s current maximized state. ## Panics -\nPanics if the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[is_decorated](/docs/api/rust/tauri/about:blank#method.is_decorated)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#408-410\n\"goto source code\") Gets the window’s current decoration state. ## Panics -\nPanics if the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[is_resizable](/docs/api/rust/tauri/about:blank#method.is_resizable)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#420-422\n\"goto source code\") Gets the window’s current resizable state. ## Panics -\nPanics if the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[is_visible](/docs/api/rust/tauri/about:blank#method.is_visible)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#432-434\n\"goto source code\") Gets the window’s current vibility state. ## Panics - Panics\nif the event loop is not running yet, usually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[current_monitor](/docs/api/rust/tauri/about:blank#method.current_monitor)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[Monitor](/docs/api/rust/tauri/struct.Monitor\n\"struct\ntauri::window::Monitor\")>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#450-457\n\"goto source code\") Returns the monitor on which the window currently resides.\nReturns None if current monitor can’t be detected. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific) -\n**Linux:** Unsupported ## Panics - Panics if the event loop is not running yet,\nusually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[primary_monitor](/docs/api/rust/tauri/about:blank#method.primary_monitor)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html\n\"enum core::option::Option\")<[Monitor](/docs/api/rust/tauri/struct.Monitor\n\"struct\ntauri::window::Monitor\")>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#473-480\n\"goto source code\") Returns the primary monitor of the system. Returns None if\nit can’t identify any monitor as a primary one. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-1) -\n**Linux:** Unsupported ## Panics - Panics if the event loop is not running yet,\nusually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[available_monitors](/docs/api/rust/tauri/about:blank#method.available_monitors)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[Vec](https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html\n\"struct alloc::vec::Vec\")<[Monitor](/docs/api/rust/tauri/struct.Monitor \"struct\ntauri::window::Monitor\")>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#494-501\n\"goto source code\") Returns the list of all the monitors available on the\nsystem. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-2) -\n**Linux:** Unsupported ## Panics - Panics if the event loop is not running yet,\nusually when called on the\n[`setup`](/docs/api/rust/tauri/../struct.Builder#method.setup) closure. - Panics\nwhen called on the main thread, usually on the\n[`run`](/docs/api/rust/tauri/../struct.App#method.run) closure. You can spawn a\ntask to use the API using\n[`crate::async_runtime::spawn`](/docs/api/rust/tauri/../async_runtime/fn.spawn\n\"crate::async_runtime::spawn\") or\n[`std::thread::spawn`](https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html\n\"std::thread::spawn\") to prevent the panic. #### pub fn\n[gtk_window](/docs/api/rust/tauri/about:blank#method.gtk_window)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<ApplicationWindow>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#543-545\n\"goto source code\") Returns the `ApplicatonWindow` from gtk crate that is used\nby this window. Note that this can only be used on the main thread. #### pub fn\n[center](/docs/api/rust/tauri/about:blank#method.center)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#550-552\n\"goto source code\") Centers the window. #### pub fn\n[request_user_attention](/docs/api/rust/tauri/about:blank#method.request_user_attention)(\n&self, request_type:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[UserAttentionType](/docs/api/rust/tauri/../enum.UserAttentionType\n\"enum tauri::UserAttentionType\")> ) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#564-573\n\"goto source code\") Requests user attention to the window, this has no effect if\nthe application is already focused. How requesting for user attention manifests\nis platform dependent, see `UserAttentionType` for details. Providing `None`\nwill unset the request for user attention. Unsetting the request for user\nattention might not be done automatically by the WM when the window receives\ninput. ##\n[Platform-specific](/docs/api/rust/tauri/about:blank#platform-specific-3) -\n**macOS:** `None` has no effect. #### pub fn\n[print](/docs/api/rust/tauri/about:blank#method.print)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#578-580\n\"goto source code\") Opens the dialog to prints the contents of the webview.\nCurrently only supported on macOS on `wry`. `window.print()` works on all\nplatforms. #### pub fn\n[set_resizable](/docs/api/rust/tauri/about:blank#method.set_resizable)(&self,\nresizable: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#583-589\n\"goto source code\") Determines if this window should be resizable. #### pub fn\n[set_title](/docs/api/rust/tauri/about:blank#method.set_title)(&self, title:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#592-598\n\"goto source code\") Set this window’s title. #### pub fn\n[maximize](/docs/api/rust/tauri/about:blank#method.maximize)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#601-603\n\"goto source code\") Maximizes this window. #### pub fn\n[unmaximize](/docs/api/rust/tauri/about:blank#method.unmaximize)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#606-608\n\"goto source code\") Un-maximizes this window. #### pub fn\n[minimize](/docs/api/rust/tauri/about:blank#method.minimize)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#611-613\n\"goto source code\") Minimizes this window. #### pub fn\n[unminimize](/docs/api/rust/tauri/about:blank#method.unminimize)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#616-618\n\"goto source code\") Un-minimizes this window. #### pub fn\n[show](/docs/api/rust/tauri/about:blank#method.show)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#621-623\n\"goto source code\") Show this window. #### pub fn\n[hide](/docs/api/rust/tauri/about:blank#method.hide)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#626-628\n\"goto source code\") Hide this window. #### pub fn\n[close](/docs/api/rust/tauri/about:blank#method.close)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#631-633\n\"goto source code\") Closes this window. #### pub fn\n[set_decorations](/docs/api/rust/tauri/about:blank#method.set_decorations)(&self,\ndecorations: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#638-644\n\"goto source code\") Determines if this window should be\n[decorated](https://en.wikipedia.org/wiki/Window_(computing)#Window_decoration).\n#### pub fn\n[set_always_on_top](/docs/api/rust/tauri/about:blank#method.set_always_on_top)(&self,\nalways_on_top: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html))\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#647-653\n\"goto source code\") Determines if this window should always be on top of other\nwindows. #### pub fn\n[set_size](/docs/api/rust/tauri/about:blank#method.set_size)<S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Size](/docs/api/rust/tauri/../enum.Size \"enum\ntauri::Size\")>>(&self, size: S) -> [Result](/docs/api/rust/tauri/../type.Result\n\"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#656-662\n\"goto source code\") Resizes this window. #### pub fn\n[set_min_size](/docs/api/rust/tauri/about:blank#method.set_min_size)<S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Size](/docs/api/rust/tauri/../enum.Size \"enum\ntauri::Size\")>>(&self, size:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<S>) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#665-671\n\"goto source code\") Sets this window’s minimum size. #### pub fn\n[set_max_size](/docs/api/rust/tauri/about:blank#method.set_max_size)<S:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Size](/docs/api/rust/tauri/../enum.Size \"enum\ntauri::Size\")>>(&self, size:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<S>) -> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#674-680\n\"goto source code\") Sets this window’s maximum size. #### pub fn\n[set_position](/docs/api/rust/tauri/about:blank#method.set_position)<Pos:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<[Position](/docs/api/rust/tauri/../enum.Position \"enum\ntauri::Position\")>>(&self, position: Pos) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#683-689\n\"goto source code\") Sets this window’s position. #### pub fn\n[set_fullscreen](/docs/api/rust/tauri/about:blank#method.set_fullscreen)(&self,\nfullscreen: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#692-698\n\"goto source code\") Determines if this window should be fullscreen. #### pub fn\n[set_focus](/docs/api/rust/tauri/about:blank#method.set_focus)(&self) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#701-703\n\"goto source code\") Bring the window to front and focus. #### pub fn\n[set_icon](/docs/api/rust/tauri/about:blank#method.set_icon)(&self, icon:\n[Icon](/docs/api/rust/tauri/../enum.Icon \"enum tauri::Icon\")) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#706-708\n\"goto source code\") Sets this window’ icon. #### pub fn\n[set_skip_taskbar](/docs/api/rust/tauri/about:blank#method.set_skip_taskbar)(&self,\nskip: [bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#711-717\n\"goto source code\") Whether to show the window icon in the task bar or not. ####\npub fn\n[start_dragging](/docs/api/rust/tauri/about:blank#method.start_dragging)(&self)\n-> [Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#720-722\n\"goto source code\") Starts dragging the window. ## Trait Implementations ###\nimpl<R: [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#96-104\n\"goto source code\") #### fn\n[clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)(&self)\n-> Self[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#97-103 \"goto\nsource code\") Returns a copy of the value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone)\n#### fn\n[clone_from](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)(&mut\nself, source:\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130\n\"goto source code\") Performs copy-assignment from `source`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from)\n### impl<'de, R: [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")> [CommandArg](/docs/api/rust/tauri/../command/trait.CommandArg\n\"trait tauri::command::CommandArg\")<'de, R> for\n[Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#136-141\n\"goto source code\") #### fn\n[from_command](/docs/api/rust/tauri/../command/trait.CommandArg#tymethod.from_command)(command:\n[CommandItem](/docs/api/rust/tauri/../command/struct.CommandItem \"struct\ntauri::command::CommandItem\")<'de, R>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<Self,\n[InvokeError](/docs/api/rust/tauri/../struct.InvokeError \"struct\ntauri::InvokeError\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#138-140\n\"goto source code\") Grabs the [`Window`](/docs/api/rust/tauri/struct.Window\n\"Window\") from the\n[`CommandItem`](/docs/api/rust/tauri/../command/struct.CommandItem\n\"CommandItem\"). This will never fail. ### impl<R:\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") + [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>\n[Debug](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html \"trait\ncore::fmt::Debug\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#87\n\"goto source code\") #### fn\n[fmt](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)(&self,\nf: &mut\n[Formatter](https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html\n\"struct core::fmt::Formatter\")<'\\_>) ->\n[Result](https://doc.rust-lang.org/1.54.0/core/fmt/type.Result.html \"type\ncore::fmt::Result\")[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#87\n\"goto source code\") Formats the value using the given formatter. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt)\n### impl<R: [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>\n[Hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html \"trait\ncore::hash::Hash\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#106-111\n\"goto source code\") #### fn\n[hash](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash)<H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\")>(&self, state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#108-110\n\"goto source code\") Only use the [`Window`](/docs/api/rust/tauri/struct.Window\n\"Window\")’s label to represent its hash. #### fn\n[hash_slice](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)<H>(data:\n[&\\[Self\\]](https://doc.rust-lang.org/1.54.0/std/primitive.slice.html), state:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)H) where H:\n[Hasher](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html \"trait\ncore::hash::Hasher\"),1.3.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213\n\"goto source code\") Feeds a slice of this type into the given\n[`Hasher`](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html\n\"Hasher\"). [Read\nmore](https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice)\n### impl<R: [Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")> [Manager](/docs/api/rust/tauri/../trait.Manager \"trait\ntauri::Manager\")<R> for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#121\n\"goto source code\") #### fn\n[config](/docs/api/rust/tauri/../trait.Manager#method.config)(&self) ->\n[Arc](https://doc.rust-lang.org/1.54.0/alloc/sync/struct.Arc.html \"struct\nalloc::sync::Arc\")<[Config](/docs/api/rust/tauri/../struct.Config \"struct\ntauri::Config\")>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#256-258\n\"goto source code\") The [`Config`](/docs/api/rust/tauri/../struct.Config\n\"Config\") the manager was created with. #### fn\n[emit_all](/docs/api/rust/tauri/../trait.Manager#method.emit_all)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>(&self, event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#261-263\n\"goto source code\") Emits a event to all windows. #### fn\n[emit_to](/docs/api/rust/tauri/../trait.Manager#method.emit_to)<S:\n[Serialize](https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html \"trait\nserde::ser::Serialize\") +\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\")>( &self, label:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), event:\n&[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), payload: S ) ->\n[Result](/docs/api/rust/tauri/../type.Result \"type\ntauri::Result\")<[()](https://doc.rust-lang.org/1.54.0/std/primitive.unit.html)>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#266-270\n\"goto source code\") Emits an event to a window with the specified label. #### fn\n[listen_global](/docs/api/rust/tauri/../trait.Manager#method.listen_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#273-278 \"goto\nsource code\") Listen to a global event. #### fn\n[once_global](/docs/api/rust/tauri/../trait.Manager#method.once_global)<F>(&self,\nevent: impl [Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html\n\"trait\ncore::convert::Into\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\")>, handler: F) -> EventHandler where F:\n[Fn](https://doc.rust-lang.org/1.54.0/core/ops/function/trait.Fn.html \"trait\ncore::ops::function::Fn\")(EmittedEvent) +\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#281-286 \"goto\nsource code\") Listen to a global event only once. #### fn\n[trigger_global](/docs/api/rust/tauri/../trait.Manager#method.trigger_global)(&self,\nevent: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html), data:\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct\nalloc::string::String\")>)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#289-291\n\"goto source code\") Trigger a global event. #### fn\n[unlisten](/docs/api/rust/tauri/../trait.Manager#method.unlisten)(&self,\nhandler_id:\nEventHandler)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#294-296 \"goto\nsource code\") Remove an event listener. #### fn\n[get_window](/docs/api/rust/tauri/../trait.Manager#method.get_window)(&self,\nlabel: &[str](https://doc.rust-lang.org/1.54.0/std/primitive.str.html)) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#299-301\n\"goto source code\") Fetch a single window from the manager. #### fn\n[windows](/docs/api/rust/tauri/../trait.Manager#method.windows)(&self) ->\n[HashMap](https://doc.rust-lang.org/1.54.0/std/collections/hash/map/struct.HashMap.html\n\"struct\nstd::collections::hash::map::HashMap\")<[String](https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html\n\"struct alloc::string::String\"), [Window](/docs/api/rust/tauri/struct.Window\n\"struct\ntauri::window::Window\")<R>>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#304-306\n\"goto source code\") Fetch all managed windows. #### fn\n[manage](/docs/api/rust/tauri/../trait.Manager#method.manage)<T>(&self, state:\nT) where T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#310-315 \"goto\nsource code\") Add `state` to the state managed by the application. See\n[`crate::Builder`](/docs/api/rust/tauri/../struct.Builder#manage\n\"crate::Builder\") for instructions. [Read\nmore](/docs/api/rust/tauri/../trait.Manager#method.manage) #### fn\n[state](/docs/api/rust/tauri/../trait.Manager#method.state)<T>(&self) ->\n[State](/docs/api/rust/tauri/../struct.State \"struct tauri::State\")<'\\_, T>\nwhere T: [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#318-323 \"goto\nsource code\") Gets the managed state for the type `T`. Panics if the type is not\nmanaged. #### fn\n[try_state](/docs/api/rust/tauri/../trait.Manager#method.try_state)<T>(&self) ->\n[Option](https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html \"enum\ncore::option::Option\")<[State](/docs/api/rust/tauri/../struct.State \"struct\ntauri::State\")<'\\_, T>> where T:\n[Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html \"trait\ncore::marker::Send\") +\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") +\n'static,[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/lib.rs#326-331 \"goto\nsource code\") Tries to get the managed state for the type `T`. Returns `None` if\nthe type is not managed. ### impl<R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[PartialEq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html\n\"trait core::cmp::PartialEq\")<[Window](/docs/api/rust/tauri/struct.Window\n\"struct tauri::window::Window\")<R>> for\n[Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#114-119\n\"goto source code\") #### fn\n[eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Self)\n->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#116-118\n\"goto source code\") Only use the [`Window`](/docs/api/rust/tauri/struct.Window\n\"Window\")’s label to compare equality. #### \\#\\[must_use]fn\n[ne](https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne)(&self,\nother: [&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)Rhs) ->\n[bool](https://doc.rust-lang.org/1.54.0/std/primitive.bool.html)1.0.0[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213\n\"goto source code\") This method tests for `!=`. ### impl<R:\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait tauri::Runtime\")>\n[Eq](https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html \"trait\ncore::cmp::Eq\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R>\n[\\[src\\]](/docs/api/rust/tauri/../../src/tauri/window.rs#113 \"goto source code\")\n## Auto Trait Implementations ### impl<R =\n[Wry](/docs/api/rust/tauri/../struct.Wry \"struct tauri::Wry\")>\n\\![RefUnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html\n\"trait std::panic::RefUnwindSafe\") for\n[Window](/docs/api/rust/tauri/struct.Window \"struct tauri::window::Window\")<R>\n### impl<R> [Send](https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html\n\"trait core::marker::Send\") for [Window](/docs/api/rust/tauri/struct.Window\n\"struct tauri::window::Window\")<R> ### impl<R>\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Sync](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html \"trait\ncore::marker::Sync\"), ### impl<R>\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\") for [Window](/docs/api/rust/tauri/struct.Window \"struct\ntauri::window::Window\")<R> where <R as\n[Runtime](/docs/api/rust/tauri/../trait.Runtime \"trait\ntauri::Runtime\")>::[ClipboardManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.ClipboardManager\n\"type tauri::Runtime::ClipboardManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Dispatcher](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Dispatcher\n\"type tauri::Runtime::Dispatcher\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[GlobalShortcutManager](/docs/api/rust/tauri/../trait.Runtime#associatedtype.GlobalShortcutManager\n\"type tauri::Runtime::GlobalShortcutManager\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), <R as [Runtime](/docs/api/rust/tauri/../trait.Runtime\n\"trait\ntauri::Runtime\")>::[Handle](/docs/api/rust/tauri/../trait.Runtime#associatedtype.Handle\n\"type tauri::Runtime::Handle\"):\n[Unpin](https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html \"trait\ncore::marker::Unpin\"), ### impl<R = [Wry](/docs/api/rust/tauri/../struct.Wry\n\"struct tauri::Wry\")>\n\\![UnwindSafe](https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html\n\"trait std::panic::UnwindSafe\") for [Window](/docs/api/rust/tauri/struct.Window\n\"struct tauri::window::Window\")<R> ## Blanket Implementations ### impl<T>\n[Any](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html \"trait\ncore::any::Any\") for T where T: 'static +\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135\n\"goto source code\") #### pub fn\n[type_id](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)(&self)\n-> [TypeId](https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html \"struct\ncore::any::TypeId\")[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132\n\"goto source code\") Gets the `TypeId` of `self`. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id)\n### impl<T>\n[Borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html \"trait\ncore::borrow::Borrow\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213\n\"goto source code\") #### pub fn\n[borrow](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)(&self)\n->\n[&](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210\n\"goto source code\") Immutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow)\n### impl<T>\n[BorrowMut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html\n\"trait core::borrow::BorrowMut\")<T> for T where T:\n?[Sized](https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html \"trait\ncore::marker::Sized\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220\n\"goto source code\") #### pub fn\n[borrow_mut](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)(&mut\nself) ->\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217\n\"goto source code\") Mutably borrows from an owned value. [Read\nmore](https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut)\n### impl<T> [From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html\n\"trait core::convert::From\")<T> for\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548\n\"goto source code\") #### pub fn\n[from](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from)(t:\nT) ->\nT[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<U> for T where U:\n[From](https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html \"trait\ncore::convert::From\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540\n\"goto source code\") #### pub fn\n[into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into)(self)\n-> U[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537\n\"goto source code\") Performs the conversion. ### impl<T>\n[ToOwned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html\n\"trait alloc::borrow::ToOwned\") for T where T:\n[Clone](https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html \"trait\ncore::clone::Clone\"),[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96\n\"goto source code\") #### type\n[Owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned)\n= T The resulting type after obtaining ownership. #### pub fn\n[to_owned](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)(&self)\n-> T[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89 \"goto\nsource code\") Creates owned data from borrowed data, usually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned)\n#### pub fn\n[clone_into](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)(&self,\ntarget:\n[&mut](https://doc.rust-lang.org/1.54.0/std/primitive.reference.html)T)[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93\n\"goto source code\") 🔬 This is a nightly-only experimental API.\n(`toowned_clone_into`) recently added Uses borrowed data to replace owned data,\nusually by cloning. [Read\nmore](https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into)\n### impl<T, U>\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait core::convert::TryFrom\")<U> for T where U:\n[Into](https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html \"trait\ncore::convert::Into\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error)\n=\n[Infallible](https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html\n\"enum core::convert::Infallible\") The type returned in the event of a conversion\nerror. #### pub fn\n[try_from](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from)(value:\nU) -> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html\n\"enum core::result::Result\")<T, <T as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<U>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587\n\"goto source code\") Performs the conversion. ### impl<T, U>\n[TryInto](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html\n\"trait core::convert::TryInto\")<U> for T where U:\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>,[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576\n\"goto source code\") #### type\n[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error)\n= <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type core::convert::TryFrom::Error\") The type returned in the event of a\nconversion error. #### pub fn\n[try_into](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into)(self)\n-> [Result](https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html \"enum\ncore::result::Result\")<U, <U as\n[TryFrom](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html\n\"trait\ncore::convert::TryFrom\")<T>>::[Error](https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error\n\"type\ncore::convert::TryFrom::Error\")>[\\[src\\]](https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573\n\"goto source code\") Performs the conversion. ### impl<V, T> VZip<V> for T where\nV: MultiLane<T>, #### pub fn\n[vzip](/docs/api/rust/tauri/about:blank#tymethod.vzip)(self) -> V","url":"https://tauri.studio/docs/api/rust/tauri/window/struct.Window"},{"id":"prose_docs_development_ci_cd_md","title":"CI/CD","sections":["Continuous Integration","Continuous Deployment"],"subSections":["Introduction to immutable checksum","Next Steps"],"code":["yml"],"text":"## Continuous Integration Github Actions has two triggers of which we make heavy\nuse: `push` and `pull_request`. Every commit that made to the repo is a `push`.\nWhen you open a pull request from a branch (call it `great_feature`) to another\nbranch (our working branch, `dev`), each commit to `great_feature` would\npossibly trigger both of these events. We can use a filter to focus on the\nevents we care about though. In our workflows, we only PR (pull request) the\n`dev` and `master` branches. This means that if we filter to only the `dev` and\n`master` branches on commit, we will only run that workflow when we _merge_ a\nPR. A merged PR typically only occurs once a day or less so this will be a good\nfit for the longer running tests, e.g. the smoke tests in our case. Below is how\nthat might look. Unit tests: ```yml # these run fast so we can have them run on\nany commit name: unit tests on: pull_request: push: branches: - dev - master ```\nSmoke tests: ```yml # these run slower so we run only on merges to dev or master\nbranch name: smoke tests on: push: branches: - dev - master ``` Tauri operates\noff the `dev` branch as default, and merges to `master` for release. With these\nGithub Actions set up, we will run the unit tests on every commit to an open PR\n(see `pull_request`). When that PR is merged into `dev`, we will run both the\nunit tests and the smoke tests. ## Continuous Deployment ### Introduction to\nimmutable checksum It is not only possible, but trivial to modify release notes\nand artifacts after it has been published on Github. While there are very valid\nreasons for doing this, it is not exactly a totally trustworthy method - i.e.\nyou have no guarantee that what you are reading is really reflective of the\nunderlying truth or the tarballs. It is technically possible to change downloads\nover the wire or in the box or change checksums in targeted attacks. What we are\nseeking to accomplish is a best case scenario where: 1. Human error is reduced\nto a minimum, but humans are still integral in the actual release 2. Machine\nbuilt assets, changelogs and attached security audits are verifiable with\nchecksums that are published in an immutable, globally available store. To this\nend we fashioned a workflow shown below. As it stands now, we have #3 through #6\nimplemented. We manually do #2 which then feeds into #3 and kicks off the rest\nof the automatic workflow. 1. a human pushes to dev through a pull request (can\nhappen any number of times) - pull request includes a changeset file describing\nthe change and required version bump 2. a pull request is created (or updated)\nto include the change and version bump - this pull request stays open and will\nbe force pushed until it gets merged (and published) - increase the version\nnumber based on changesets - delete all changeset files 3. a codeowner merges\nthe publish PR to dev (no direct push permissible for anyone) - all tests (unit,\ne2e, smoke tests) are run on the PR - failures prevent the publish so they must\npass before merge 4. merge to dev triggers release sequence - changes are\nsquashed and a PR is opened against master 5. when PR to master is merged... -\nvulnerability audit (crates and yarn) and output saved - checksums and metadata\nand output saved - packages are published on npm/cargo, tarball/zip created -\nrelease is created for each package that had updates (if version isn't changed,\nbuild skips the publish steps) - output from audit/checksums is piped into the\nrelease body - tarball / zip attached to release - async process to publish to\nIOTA tangle (feeless) via release tag [note: still have things to resolve here]\n6. release is complete - master has updated code and tagged - GitHub release has\ntarballs, checksums, and changelog (may have multiple releases if more than one\npackage published) [note: is part of step 2 and is not yet implemented] ### Next\nSteps Next steps may include transferring and publishing the built assets to\nadditional places: 1. Tauri's private verdaccio 2. IPFS 3. PureOS Gitlab 4.\nGitHub Packages We can also do some interesting things like signing our\nreleases, including a hash in the release and/or even publishing this\ninformation on a blockchain that it can be easily verified. Publishing on the\nblockchain is another avenue to increase the confidence that what is seen on\nGitHub matches what you have downloaded. The IOTA foundation created a Github\nAction which will publish a release to their blockchain. This has shown promise,\nbut he gave a couple errors to tackle still.","url":"https://tauri.studio/docs/development/ci-cd"},{"id":"prose_docs_development_cross_platform_md","title":"Cross-Platform Compilation","sections":[],"subSections":[],"code":[],"text":"How to use GH Action for Building: a glance at Tauri Action.","url":"https://tauri.studio/docs/development/cross-platform"},{"id":"prose_docs_development_debugging_md","title":"Debugging","sections":["Rust Console","WebView JS Console","Create a Debug Build","Run Your App From the Terminal"],"subSections":[],"code":["rust","sh",null],"text":"import Alert from '@theme/Alert' import Command from '@theme/Command' With all\nthe moving pieces in Tauri, you may run into a problem that requires debugging.\nThere are a handful of locations where error details are printed, and Tauri\nincludes some tools to make the debugging process easier. ## Rust Console When\nyou run a Tauri app in development mode you will have a Rust console available.\nThis is in the terminal where you ran e.g. `tauri dev`. You can use the\nfollowing code to print something to that console from within a Rust file:\n```rust println!(\"Message from Rust: {}\", msg); ``` Sometimes you may have an\nerror in your Rust code, and the Rust compiler can give you lots of information.\nIf, for example, `tauri dev` crashes, you can rerun it like this on Linux and\nmacOS: ```sh RUST_DEBUG=1 tauri dev ``` or like this on MS Windows: ```sh set\nRUST_DEBUG=1 tauri dev ``` This will give you a granular stack trace. Generally\nspeaking, the Rust compiler will help you by giving you detailed information\nabout the issue, such as: ``` error[E0425]: cannot find value `sun` in this\nscope --> src/main.rs:11:5 | 11 | sun += i.to_string().parse::().unwrap(); | ^^^\nhelp: a local variable with a similar name exists: `sum` error: aborting due to\nprevious error For more information about this error, try `rustc --explain\nE0425`. ``` ## WebView JS Console Right click in the WebView, and choose\n`Inspect Element`. This will open up a web-inspector similar to the Chrome or\nFirefox dev tools you are used to. ## Create a Debug Build There are cases where\nyou might need to inspect the JS console in the final bundle, so Tauri provides\na simple command to create a debugging bundle: Like the normal build and dev\nprocesses, the first time you run this it will take more time than subsequent\nruns. The final bundled app will be placed in `src-tauri/target/debug/bundle`.\nThat app will ship with the development console enabled. ## Run Your App From\nthe Terminal You can also run a built app from the terminal, which will also\ngive you the Rust compiler notes (in case of errors) or your `println` messages.\nJust find the file `src-tauri/target/(release|debug)/[app name]` and either\ndouble click it (but be warned, the terminal will close on errors) or just run\nit in directly in your console.","url":"https://tauri.studio/docs/development/debugging"},{"id":"prose_docs_development_development_cycle_md","title":"Development Cycle","sections":[],"subSections":["1","2"],"code":[],"text":"import Alert from '@theme/Alert' import Command from '@theme/Command' ### 1.\nStart Your Devserver Now that you have everything setup, you should start your\napplication development server provided by your UI framework or bundler\n(assuming you're using one, of course). Every framework has its own development\ntooling. It is outside of the scope of this document to treat them all or keep\nthem up to date. ### 2. Start Tauri Development Window The first time you run\nthis command, it will take several minutes for the Rust package manager to\ndownload and build all the required packages. Since they are cached, subsequent\nbuilds will be much faster, as only your code will need rebuilding. Once Rust\nhas finished building, the webview will open and it should display your web app.\nYou can make changes to your web app, and if your tooling enables it, the\nwebview should update automatically just like a browser. When you make changes\nto your Rust files, they will be rebuilt automatically and your app will\nrestart. In your project repository, you SHOULD commit the\n\"src-tauri/Cargo.lock\" along with the \"src-tauri/Cargo.toml\" to git because\nCargo uses the lockfile to provide deterministic builds. As a result, it is\nrecommended that all applications check in their Cargo.lock. You SHOULD NOT\ncommit the \"src-tauri/target\" folder or any of its contents.","url":"https://tauri.studio/docs/development/development-cycle"},{"id":"prose_docs_development_integration_md","title":"Integrate with Tauri","sections":["Vue CLI Plugin Tauri"],"subSections":["1","1","2","3","Patterns"],"code":["bash","sh",null],"text":"import Alert from '@theme/Alert' import Command from '@theme/Command' import\nLink from '@docusaurus/Link' You must have completed all the steps required for\nsetting up the development environment on your machine. If you haven't done this\nyet, please see the setup page for your operating system\n[/docs/get-started/intro#setting-up-your-environment]. There are two ways to\nintegrate with Tauri depends on your need: - [Start a new Tauri\nproject](#1-start-a-new-tauri-project) - Or [add Tauri to existing\nproject](#1-add-tauri-to-existing-project) ### 1. Start a New Tauri Project\n```bash yarn create tauri-app #OR npx create-tauri-app ``` Just follow the\ninstructions and choose the web frontend framework you prefer.\n`create-tauri-app` will create a template project depends on your inputs. You\ncan go straight to [check `tauri\ninfo`](#3-check-tauri-info-to-make-sure-everything-is-set-up-properly) after\nthis. ### 1. Add Tauri to Existing Project: The Tauri CLI tool helps you build\nyour project, so install it at first. You can install Tauri CLI [using\n`Node.js`](#install-tauri-cli-package-as-a-dev-dependency) or [using\n`Rust`](#alternatively-install-tauri-cli-as-a-cargo-subcommand) #### Install\nTauri CLI package as a dev dependency: ```bash cd project-folder # Not required\nif you already have a package.json: # yarn init # OR # npm init yarn add -D\n@tauri-apps/cli # OR npm install -D @tauri-apps/cli ``` You can install Tauri as\nboth a local and a global dependency, but we recommend installing it locally. If\nyou decide to use Tauri as a local package with npm (not yarn), you will have to\ndefine a custom script to your package.json: ```js title=package.json { // This\ncontent is just a sample \"scripts\": { \"tauri\": \"tauri\" } } ``` ####\nAlternatively, install Tauri CLI as a cargo subcommand: This will install\n`tauri-cli` as a Cargo subcommand on the cargo binary folder (by default on\n`$HOME/.cargo/bin`): ```bash cargo install tauri-cli --locked --version\n^1.0.0-beta ``` For more installation options, see [`cargo\ninstall`](https://doc.rust-lang.org/cargo/commands/cargo-install.html#description)\n#### Install Tauri API Package as a Dependency (optional): The `@tauri-apps/api`\npackage is recommended for projects using ES modules or modern build tools such\nas Webpack or Vite. It is the most secure way to access the Tauri APIs. ```bash\nyarn add @tauri-apps/api # OR npm install @tauri-apps/api ``` ### 2. Initialize\nTauri in Your App This command will place a new folder in your current working\ndirectory, `src-tauri`. ```sh └── src-tauri ├── .gitignore ├── Cargo.toml ├──\nrustfmt.toml ├── tauri.conf.json ├── icons │ ├── 128x128.png │ ├──\n128x128@2x.png │ ├── 32x32.png │ ├── Square107x107Logo.png │ ├──\nSquare142x142Logo.png │ ├── Square150x150Logo.png │ ├── Square284x284Logo.png │\n├── Square30x30Logo.png │ ├── Square310x310Logo.png │ ├── Square44x44Logo.png │\n├── Square71x71Logo.png │ ├── Square89x89Logo.png │ ├── StoreLogo.png │ ├──\nicon.icns │ ├── icon.ico │ └── icon.png └── src ├── build.rs ├── cmd.rs └──\nmain.rs ``` ### 3. Check `tauri info` to Make Sure Everything Is Set up\nProperly: Which should return something like: ``` Operating System -\nDarwin(16.7.0) - darwin/x64 Node.js environment Node.js - 12.16.3\n@tauri-apps/cli - 1.0.0-beta.2 @tauri-apps/api - 1.0.0-beta.1 Global packages\nnpm - 6.14.4 yarn - 1.22.4 Rust environment rustc - 1.52.1 cargo - 1.52.0 App\ndirectory structure /node_modules /src-tauri /src /public App tauri.rs -\n1.0.0-beta.1 build-type - bundle CSP - default-src blob: data: filesystem: ws:\nwss: http: https: tauri: 'unsafe-eval' 'unsafe-inline' 'self' img-src: 'self'\ndistDir - ../public devPath - ../public framework - Svelte bundler - Rollup ```\nThis information can be very helpful when triaging problems. ### Patterns We've\nalso defined prebuilt configurations called \"Patterns\". They may help you to\ncustomize Tauri to fit your needs. [See more about\npatterns](/docs/guides/patterns/about-patterns). ## Vue CLI Plugin Tauri If you\nare using Vue CLI, it is recommended to use the official [CLI\nplugin](https://github.com/tauri-apps/vue-cli-plugin-tauri).","url":"https://tauri.studio/docs/development/integration"},{"id":"prose_docs_development_intro_md","title":"Introduction","sections":["Tauri Development Workflow"],"subSections":[],"code":[],"text":"This part of the documentation is dedicated to learning how to use Tauri. Tauri\nprovides a [CLI](/docs/api/cli), a Rust API, and a [JavaScript\nAPI](/docs/api/js/index) that you can use in your project. Because raw docs can\nbe quite scary to newcomers (especially people who have never played with Rust\nbefore), we've created this \"learn by example\" section. Here you will find\nguides and techniques to start a new project or add to your own project in order\nto fulfill your goals. ## Tauri Development Workflow - [Integrate With\nTauri](/docs/development/integration) - [Development\nCycle](/docs/development/development-cycle) -\n[Debugging](/docs/development/debugging) - [CI/CD](/docs/development/ci-cd) -\n[Cross-Platform Compilation](/docs/development/cross-platform) - [App\nPublishing](/docs/development/publishing) - [Updating\nPackages](/docs/development/updating)","url":"https://tauri.studio/docs/development/intro"},{"id":"prose_docs_development_publishing_md","title":"App Publishing","sections":[],"subSections":["1","2"],"code":[],"text":"import Alert from '@theme/Alert' import Command from '@theme/Command' ### 1.\nBuild Your Web App Now that you are ready to package your project, you will need\nto run your framework's or bundler's build command (assuming you're using one,\nof course). Every framework has its own publishing tooling. It is outside of the\nscope of this document to treat them all or keep them up to date. ### 2. Bundle\nyour application with Tauri This command will embed your web assets into a\nsingle binary with your Rust code. The binary itself will be located in\n`src-tauri/target/release/[app name]`, and installers will be located in\n`src-tauri/target/release/bundle/`. Like the `tauri dev` command, the first time\nyou run this, it will take some time to collect the Rust crates and build\neverything - but on subsequent runs it will only need to rebuild your code,\nwhich is much quicker.","url":"https://tauri.studio/docs/development/publishing"},{"id":"prose_docs_development_signing_macos_md","title":"Signing for macOS","sections":[],"subSections":[],"code":[],"text":"Signing for macOS","url":"https://tauri.studio/docs/development/signing-macos"},{"id":"prose_docs_development_updating_md","title":"Updating Packages","sections":["Automatic updates","Manual updates"],"subSections":["Update NPM Packages"],"code":[],"text":"import Alert from '@theme/Alert' Especially during the alpha and beta phases,\nyou are expected to keep all Tauri dependencies and toolchains up to date. There\nis no support for any versions other than latest. ## Automatic updates The Tauri\nJS CLI has a command to install and update all needed dependencies, just run\n`tauri deps install` or `tauri deps update`. ## Manual updates ### Update NPM\nPackages If you are using the `tauri` package: ```bash $ yarn upgrade\n@tauri-apps/cli @tauri-apps/api --latest $ npm install @tauri-apps/cli@latest\n@tauri-apps/api@latest ``` You can also detect what the latest version of Tauri\nis on the command line, using: - `npm outdated @tauri-apps/cli` - `yarn outdated\n@tauri-apps/cli` Alternatively, if you are using the `vue-cli-plugin-tauri`\napproach: ```bash $ yarn upgrade vue-cli-plugin-tauri --latest $ npm install\nvue-cli-plugin-tauri@latest ``` ### Update Cargo Packages Go to\n`src-tauri/Cargo.toml` and change `tauri` to `tauri = { version = \"%version%\" }`\nwhere `%version%` is the version number shown above. (You can just use the\n`MAJOR.MINOR`) version, like `0.9`. Then do the following: ```bash $ cd\nsrc-tauri $ cargo update -p tauri ``` You can also run `cargo outdated -r tauri`\nto get direct information about the core library's latest version.","url":"https://tauri.studio/docs/development/updating"},{"id":"prose_docs_get_started_intro_md","title":"Introduction","sections":["Steps"],"subSections":["Setting up Your Environment"],"code":[],"text":"import OSList from '@theme/OSList' Welcome to Tauri! Tauri is a polyglot and\ngeneric system that is very composable and allows engineers to make a wide\nvariety of applications. It is used for building applications for Desktop\nComputers using a combination of [Rust](https://www.rust-lang.org/) tools and\nHTML rendered in a Webview. Apps built with Tauri can ship with any number of\npieces of an optional JS API / Rust API so that webviews can control the system\nvia message passing. Anything that can be displayed on a website, can be\ndisplayed in a Tauri webview app! Developers are free to build the web front-end\ndisplayed in a Webview through Tauri with any web frameworks of their choice!\n**Developers can even extend the default API** with their own functionality and\nbridge the Webview and Rust-based backend easily! The Architecture is more fully\ndescribed in [Architecture](/docs/architecture). This guide will help you create\nyour first Tauri app. It should only take about 10 minutes, although it could\ntake longer if you have a slower internet connection. If you find an error or\nsomething unclear, or would like to propose an improvement, you have several\noptions: 1. Open an issue on our [Github\nRepo](https://github.com/tauri-apps/tauri-docs) 2. Visit our [Discord\nserver](https://discord.gg/tauri) and raise your concern 3. Request to join the\neducation working group on Discord to gain access to its discussion channel ##\nSteps 1. Install and configure system prerequisites 2. Create a web app with\nyour frontend framework of choice 3. Use the Tauri CLI to setup Tauri in your\napp 4. Write native Rust code to add functionality or improve performance\n(totally optional) 5. Use `tauri dev` to develop your app with features like hot\nmodule reloading and webview devtools 6. Use `tauri build` to package your app\ninto a tiny installer ### Setting up Your Environment Before creating an app,\nyou'll have to install and configure some developer tools. This guide assumes\nthat you know what the command line is, how to install packages on your\noperating system, and generally know your way around the development side of\ncomputing. Follow the platform-specific guides to get started: After that,\nyou'll be ready to [add Tauri to your project!](/docs/development/integration)","url":"https://tauri.studio/docs/get-started/intro"},{"id":"prose_docs_get_started_setup_linux_md","title":"Setup for Linux","sections":["1","2","3","4","Continue"],"subSections":["Optional dependencies","Node","Optional Node","WSL Version 1","WSL Version 2"],"code":["sh","bash"],"text":"import Alert from '@theme/Alert' import Icon from '@theme/Icon' import { Intro }\nfrom '@theme/SetupDocs' import Tabs from '@theme/Tabs'; import TabItem from\n'@theme/TabItem'; ## 1. System Dependencies  ```sh $ sudo apt update && sudo apt\ninstall libwebkit2gtk-4.0-dev \\ build-essential \\ curl \\ wget \\ libssl-dev \\\nlibgtk-3-dev \\ libappindicator3-dev \\ patchelf \\ librsvg2-dev ``` ```sh $ sudo\npacman -Syu && sudo pacman -S --needed \\ webkit2gtk \\ base-devel \\ curl \\ wget \\\nopenssl \\ appmenu-gtk-module \\ gtk3 \\ libappindicator-gtk3 \\ patchelf \\ librsvg\n\\ libvips ``` ```sh $ sudo dnf check-update && sudo dnf install\nwebkit2gtk3-devel.x86_64 \\ openssl-devel \\ curl \\ wget \\ libappindicator-gtk3 \\\npatchelf \\ librsvg2-devel \\ && sudo dnf group install \"C Development Tools and\nLibraries\" ``` ### Optional dependencies: - `libappindicator`: needed to use the\nsystem tray feature. - `patchelf` and `librsvg`: needed to bundle `AppImage`. ##\n2. Node.js Runtime and Package Manager  ### Node.js (npm included) We recommend\nusing nvm to manage your Node.js runtime. It allows you to easily switch\nversions and update Node.js. ```sh $ curl -o-\nhttps://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash ``` We\nhave audited this bash script, and it does what it says it is supposed to do.\nNevertheless, before blindly curl-bashing a script, it is always wise to look at\nit first. Here is the file as a mere download link\n[https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh]. Once nvm is\ninstalled, close and reopen your terminal, then install the latest version of\nNode.js and npm: ```sh $ nvm install node --latest-npm $ nvm use node ``` If you\nhave any problems with nvm, please consult their project readme\n[https://github.com/nvm-sh/nvm]. ### Optional Node.js Package Manager You may\nwant to use an alternative to npm: - Yarn [https://yarnpkg.com/getting-started],\nis preferred by Tauri's team - pnpm [https://pnpm.js.org/en/installation] ## 3.\nRustc and Cargo Package Manager  The following command will install rustup\n[https://rustup.rs/], the official installer for Rust\n[https://www.rust-lang.org/]. ```bash $ curl --proto '=https' --tlsv1.2 -sSf\nhttps://sh.rustup.rs | sh ``` We have audited this bash script, and it does what\nit says it is supposed to do. Nevertheless, before blindly curl-bashing a\nscript, it is always wise to look at it first. Here is the file as a mere\ndownload link [https://sh.rustup.rs]. To make sure that Rust has been installed\nsuccessfully, run the following command: ```sh $ rustc --version latest update\non 2019-12-19, rust version 1.40.0 ``` You may need to restart your terminal if\nthe command does not work. ## 4. For Windows Subsystem for Linux (WSL) Users  In\norder to run a graphical application with WSL, you need to download **one** of\nthese X servers: Xming, Cygwin X, and vcXsrv. Since vcXsrv has been used\ninternally, it's the one we recommend to install. ### WSL Version 1 Open the X\nserver and then run `export DISPLAY=:0` in the terminal. You should now be able\nto run any graphical application via the terminal. ### WSL Version 2 You'll need\nto run a command that is slightly more complex than WSL 1: `export DISPLAY=$(cat\n/etc/resolv.conf | grep nameserver | awk '{print $2}'):0` and you need to add\n`-ac` to the X server as an argument. Note: if for some reason this command\ndoesn't work you can use an alternative command such as: `export DISPLAY=$(cat\n/etc/resolv.conf | grep nameserver | sed 's/.* //g'):0` or you can manually find\nthe Address using `cat /etc/resolve.conf | grep nameserver`. Don't forget that\nyou'll have to use the \"export\" command anytime you want to use a graphical\napplication, for each newly opened terminal. You can download some examples to\ntry with `sudo apt-get install x11-apps`. xeyes is always a good one. It can be\nhandy when troubleshooting WSL issues. ## Continue Now that you have set up the\nLinux-specific dependencies for Tauri, learn how to [add Tauri to your\nproject](/docs/development/integration).","url":"https://tauri.studio/docs/get-started/setup-linux"},{"id":"prose_docs_get_started_setup_macos_md","title":"Setup for macOS","sections":["1","2","3","Continue"],"subSections":["Node","Optional Node"],"code":["sh",null],"text":"import Alert from '@theme/Alert' import { Intro } from '@theme/SetupDocs' import\nIcon from '@theme/Icon' ## 1. System Dependencies  You will need to have\nHomebrew [https://brew.sh/] installed to run the following command. ```sh $ brew\ninstall gcc ``` You will also need to make sure `xcode` is installed. ```sh $\nxcode-select --install ``` ## 2. Node.js Runtime and Package Manager  ###\nNode.js (npm included) We recommend using nvm to manage your Node.js runtime. It\nallows you to easily switch versions and update Node.js. ```sh $ curl -o-\nhttps://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash ``` We\nhave audited this bash script, and it does what it says it is supposed to do.\nNevertheless, before blindly curl-bashing a script, it is always wise to look at\nit first. Here is the file as a mere download link\n[https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh]. Once nvm is\ninstalled, close and reopen your terminal, then install the latest version of\nNode.js and npm: ```sh $ nvm install node --latest-npm $ nvm use node ``` If you\nhave any problems with nvm, please consult their project readme\n[https://github.com/nvm-sh/nvm]. ### Optional Node.js Package Manager You may\nwant to use an alternative to npm: - Yarn [https://yarnpkg.com/getting-started],\nis preferred by Tauri's team - pnpm [https://pnpm.js.org/en/installation] ## 3.\nRustc and Cargo Package Manager  The following command will install rustup\n[https://rustup.rs/], the official installer for Rust\n[https://www.rust-lang.org/]. ``` $ curl --proto '=https' --tlsv1.2 -sSf\nhttps://sh.rustup.rs | sh ``` We have audited this bash script, and it does what\nit says it is supposed to do. Nevertheless, before blindly curl-bashing a\nscript, it is always wise to look at it first. Here is the file as a mere\ndownload link [https://sh.rustup.rs]. To make sure that Rust has been installed\nsuccessfully, run the following command: ```sh $ rustc --version latest update\non 2019-12-19, rust version 1.40.0 ``` You may need to restart your terminal if\nthe command does not work. ## Continue Now that you have set up the\nmacOS-specific dependencies for Tauri, learn how to [add Tauri to your\nproject](/docs/development/integration).","url":"https://tauri.studio/docs/get-started/setup-macos"},{"id":"prose_docs_get_started_setup_windows_md","title":"Setup for Windows","sections":["1","2","3","4","Continue"],"subSections":["Node","Optional Node"],"code":["powershell"],"text":"import Alert from '@theme/Alert' import Icon from '@theme/Icon' import { Intro }\nfrom '@theme/SetupDocs' For those using the Windows Subsystem for Linux (WSL)\nplease refer to our [Linux specific instructions](/docs/get-started/setup-linux)\ninstead. ## 1. System Dependencies  You'll need to install Microsoft Visual\nStudio C++ build tools. Download the installer here\n[https://visualstudio.microsoft.com/visual-cpp-build-tools/], and then run it.\nWhen it asks you what packages you would like to install, select C++ Build Tools\nand make sure the Windows SDK is selected. This is a big download (over 1GB) and\ntakes the most time, so go grab a coffee. You may need to uninstall the 2017\nversion of the build tools if you have them. There are reports of Tauri not\nworking with both the 2017 and 2019 versions installed. ## 2. Node.js Runtime\nand Package Manager  ### Node.js (npm included) We recommend using nvm-windows\n[https://github.com/coreybutler/nvm-windows#installation--upgrades] to manage\nyour Node.js runtime. It allows you to easily switch versions and update\nNode.js. Then run the following from an Administrative PowerShell and press Y\nwhen prompted: ```powershell # BE SURE YOU ARE IN AN ADMINISTRATIVE PowerShell!\nnvm install latest nvm use {{latest}} # Replace with your latest downloaded\nversion ``` This will install the most recent version of Node.js with npm. ###\nOptional Node.js Package Manager You may want to use an alternative to npm: -\nYarn [https://yarnpkg.com/getting-started], is preferred by Tauri's team - pnpm\n[https://pnpm.js.org/en/installation] ## 3. Rustc and Cargo Package Manager  Now\nyou will need to install Rust [https://www.rust-lang.org/]. The easiest way to\ndo this is to use rustup [https://rustup.rs/], the official installer. - 64-bit\ndownload link [https://win.rustup.rs/x86_64] - 32-bit download link\n[https://win.rustup.rs/i686] Download and install the proper variant for your\ncomputer's architecture. ## 4. Install WebView2 WebView2 is pre-installed in\nWindows 11. Finally, you will need to install WebView2. The best way to do this\nis to download and run the Evergreen Bootstrapper from [this\npage](https://developer.microsoft.com/en-us/microsoft-edge/webview2/#download-section).\nIf you have problems of any kind after following these instructions, we\nrecommend that you reboot your computer before developing a Tauri project to\nensure that everything works as expected. ## Continue Now that you have set up\nthe Windows-specific dependencies for Tauri, learn how to [add Tauri to your\nproject](/docs/development/integration).","url":"https://tauri.studio/docs/get-started/setup-windows"},{"id":"prose_docs_guides_cli_md","title":"Make your own CLI","sections":["Base Configuration","Adding Arguments","Subcommands","Reading the matches","Complete documentation"],"subSections":["Positional Arguments","Named Arguments","Flag Arguments","Rust","JavaScript"],"code":["rust","js"],"text":"import Alert from '@theme/Alert' Tauri enables your app to have a CLI through\nclap [https://github.com/clap-rs/clap], a robust command line argument parser.\nWith a simple CLI definition in your `tauri.conf.json` file, you can define your\ninterface and read its argument matches map on JavaScript and/or Rust. ## Base\nConfiguration Under `tauri.conf.json`, you have the following structure to\nconfigure the interface: ```js title=src-tauri/tauri.conf.json { \"tauri\": {\n\"cli\": { \"description\": \"\", // command description that's shown on help\n\"longDescription\": \"\", // command long description that's shown on help\n\"beforeHelp\": \"\", // content to show before the help text \"afterHelp\": \"\", //\ncontent to show after the help text \"args\": [], // list of arguments of the\ncommand, we'll explain it later \"subcommands\": { \"subcommand-name\": { //\nconfigures a subcommand that is accessible // with `$ ./app subcommand-name\n--arg1 --arg2 --etc` // configuration as above, with \"description\", \"args\", etc.\n} } } } } ``` All JSON configurations here are just samples, many other fields\nhave been omitted for the sake of clarity. ## Adding Arguments The `args` array\nrepresents the list of arguments accepted by its command or subcommand. You can\nfind more details about the way to configure them here [/docs/api/config#tauri].\n### Positional Arguments A positional argument is identified by its position in\nthe list of arguments. With the following configuration: ```json\ntitle=src-tauri/tauri.conf.json:tauri.cli { \"args\": [ { \"name\": \"source\",\n\"index\": 1, \"takesValue\": true }, { \"name\": \"destination\", \"index\": 2,\n\"takesValue\": true } ] } ``` Users can run your app as `$ ./app tauri.txt\ndest.txt` and the arg matches map will define `source` as `\"tauri.txt\"` and\n`destination` as `\"dest.txt\"`. ### Named Arguments A named argument is a (key,\nvalue) pair where the key identifies the value. With the following\nconfiguration: ```json title=src-tauri/tauri.conf.json:tauri.cli { \"args\": [ {\n\"name\": \"type\", \"short\": \"t\", \"takesValue\": true, \"multiple\": true,\n\"possibleValues\": [\"foo\", \"bar\"] } ] } ``` Users can run your app as `$ ./app\n--type foo bar`, `$ ./app -t foo -t bar` or `$ ./app --type=foo,bar` and the arg\nmatches map will define `type` as `[\"foo\", \"bar\"]`. ### Flag Arguments A flag\nargument is a standalone key whose presence or absence provides information to\nyour application. With the following configuration: ```js\ntitle=src-tauri/tauri.conf.json:tauri.cli { \"args\": [ \"name\": \"verbose\",\n\"short\": \"v\", \"multipleOccurrences\": true ] } ``` Users can run your app as `$\n./app -v -v -v`, `$ ./app --verbose --verbose --verbose` or `$ ./app -vvv` and\nthe arg matches map will define `verbose` as `true`, with `occurrences = 3`. ##\nSubcommands Some CLI applications has additional interfaces as subcommands. For\ninstance, the `git` CLI has `git branch`, `git commit` and `git push`. You can\ndefine additional nested interfaces with the `subcommands` array: ```js\ntitle=src-tauri/tauri.conf.json:tauri { \"cli\": { ... \"subcommands\": { \"branch\":\n{ \"args\": [] }, \"push\": { \"args\": [] } } } } ``` Its configuration is the same\nas the root application configuration, with the `description`,\n`longDescription`, `args`, etc. ## Reading the matches ### Rust ```rust use\ntauri::api::cli::get_matches; fn main() { let context =\ntauri::generate_context!(); let cli_config =\ncontext.config().tauri.cli.clone().unwrap(); match get_matches(&cli_config) { //\n`matches` here is a Struct with { args, subcommand }. // `args` is `HashMap`\nwhere `ArgData` is a struct with { value, occurances }. // `subcommand` is\n`Option>` where `SubcommandMatches` is a struct with { name, matches }.\nOk(matches) => { println!(\"{:?}\", matches) } Err(_) => {} };\ntauri::Builder::default() .run(context) .expect(\"error while running tauri\napplication\"); } ``` ### JavaScript ```js import { getMatches } from\n'@tauri-apps/api/cli' getMatches().then((matches) => { // do something with the\n{ args, subcommand } matches }) ``` ## Complete documentation You can find more\nabout the CLI configuration here [/docs/api/config#tauri].","url":"https://tauri.studio/docs/guides/cli"},{"id":"prose_docs_guides_command_md","title":"Create Rust Commands","sections":["Basic Example","Passing Arguments","Returning Data","Error Handling","Async Commands","Accessing the Window in Commands","Accessing an AppHandle in Commands","Accessing managed state","Creating Multiple Commands","Complete Example"],"subSections":[],"code":["rust","js"],"text":"import Alert from '@theme/Alert' Tauri provides a simple yet powerful \"command\"\nsystem for calling Rust functions from your web app. Commands can accept\narguments and return values. They can also return errors and be `async`. ##\nBasic Example Commands are defined in your `src-tauri/src/main.rs` file. To\ncreate a command, just add a function and annotate it with `#[tauri::command]`:\n```rust #[tauri::command] fn my_custom_command() { println!(\"I was invoked from\nJS!\"); } ``` You will have to provide a list of your commands to the builder\nfunction like so: ```rust // Also in main.rs fn main() {\ntauri::Builder::default() // This is where you pass in your commands\n.invoke_handler(tauri::generate_handler![my_custom_command])\n.run(tauri::generate_context!()) .expect(\"failed to run app\"); } ``` Now, you\ncan invoke the command from your JS code: ```js // With the Tauri API npm\npackage: import { invoke } from '@tauri-apps/api/tauri' // With the Tauri global\nscript, enabled when `tauri.conf.json > build > withGlobalTauri` is set to true:\nconst invoke = window.__TAURI__.invoke // Invoke the command\ninvoke('my_custom_command') ``` ## Passing Arguments Your command handlers can\ntake arguments: ```rust #[tauri::command] fn my_custom_command(invoke_message:\nString) { println!(\"I was invoked from JS, with this message: {}\",\ninvoke_message); } ``` Arguments should be passed as a JSON object with\ncamelCase keys: ```js invoke('my_custom_command', { invokeMessage: 'Hello!' })\n``` Arguments can be of any type, as long as they implement\n[serde::Deserialize](https://serde.rs/derive.html). ## Returning Data Command\nhandlers can return data as well: ```rust #[tauri::command] fn\nmy_custom_command() -> String { \"Hello from Rust!\".into() } ``` The `invoke`\nfunction returns a promise that resolves with the returned value: ```js\ninvoke('my_custom_command').then((message) => console.log(message)) ``` Returned\ndata can be of any type, as long as it implements\n[Serde::Serialize](https://serde.rs/derive.html). ## Error Handling If your\nhandler could fail and needs to be able to return an error, have the function\nreturn a `Result`: ```rust #[tauri::command] fn my_custom_command() -> Result {\n// If something fails Err(\"This failed!\".into()) // If it worked Ok(\"This\nworked!\".into()) } ``` If the command returns an error, the promise will reject,\notherwise it resolves: ```js invoke('my_custom_command') .then((message) =>\nconsole.log(message)) .catch((error) => console.error(error)) ``` ## Async\nCommands Async commands are executed on a separate thread using the async\nruntime [https://docs.rs/tauri/1.0.0-beta.8/tauri/async_runtime/fn.spawn.html].\nCommands without the async keyword are executed on the main thread, unless\ndefined with #[tauri::command(async)]. If your command needs to run\nasynchronously, simply declare it as `async`: ```rust #[tauri::command] async fn\nmy_custom_command() { // Call another async function and wait for it to finish\nlet result = some_async_function().await; println!(\"Result: {}\", result); } ```\nSince invoking the command from JS already returns a promise, it works just like\nany other command: ```js invoke('my_custom_command').then(() =>\nconsole.log('Completed!')) ``` ## Accessing the Window in Commands Commands can\naccess the `Window` instance that invoked the message: ```rust #[tauri::command]\nasync fn my_custom_command(window: tauri::Window) { println!(\"Window: {}\",\nwindow.label()); } ``` ## Accessing an AppHandle in Commands Commands can access\nan `AppHandle` instance: ```rust #[tauri::command] async fn\nmy_custom_command(app_handle: tauri::AppHandle) { let app_dir =\napp_handle.path_resolver().app_dir(); use tauri::GlobalShortcutManager;\napp_handle.global_shortcut_manager().register(\"CTRL + U\", move || {}); } ``` ##\nAccessing managed state Tauri can manage state using the `manage` function on\n`tauri::Builder`. The state can be accessed on a command using `tauri::State`:\n```rust struct MyState(String); #[tauri::command] fn my_custom_command(state:\ntauri::State) { assert_eq!(state.0 == \"some state value\", true); } fn main() {\ntauri::Builder::default() .manage(MyState(\"some state value\".into()))\n.invoke_handler(tauri::generate_handler![my_custom_command])\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ## Creating Multiple Commands The\n`tauri::generate_handler!` macro takes an array of commands. To register\nmultiple commands, you cannot call invoke_handler multiple times. Only the last\ncall will be used. You must pass each command to a single call of\n`tauri::generate_handler!`. ```rust #[tauri::command] fn cmd_a() -> String {\n\"Command a\" } #[tauri::command] fn cmd_b() -> String { \"Command b\" } fn main() {\ntauri::Builder::default() .invoke_handler(tauri::generate_handler![cmd_a,\ncmd_b]) .run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ## Complete Example Any or all of the above features can be\ncombined: ```rust title=main.rs // Definition in main.rs struct Database;\n#[derive(serde::Serialize)] struct CustomResponse { message: String, other_val:\nusize, } async fn some_other_function() -> Option { Some(\"response\".into()) }\n#[tauri::command] async fn my_custom_command( window: tauri::Window, number:\nusize, database: tauri::State<'_, Database>, ) -> Result { println!(\"Called from\n{}\", window.label()); let result: Option = some_other_function().await; if let\nSome(message) = result { Ok(CustomResponse { message, other_val: 42 + number, })\n} else { Err(\"No result\".into()) } } fn main() { tauri::Builder::default()\n.manage(Database {})\n.invoke_handler(tauri::generate_handler![my_custom_command])\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ```js // Invocation from JS invoke('my_custom_command', {\nnumber: 42, }) .then((res) => console.log(`Message: ${res.message}, Other Val:\n${res.other_val}`) ) .catch((e) => console.error(e)) ```","url":"https://tauri.studio/docs/guides/command"},{"id":"prose_docs_guides_contributor_guide_md","title":"Contributor Guide","sections":["Contribution Flow","Hands On Example"],"subSections":["A Note About Contributions to the Rust Libraries"],"code":["sh","json","ini"],"text":"todo: make this friendlier and more complete Tauri is a polyglot system that\nuses: - git - Node.js - Rust - GitHub actions It can be developed on macOS,\nLinux and Windows. ## Contribution Flow 1. File an Issue 2. Fork the Repository\n3. Make Your Changes 4. Make a PR ### A Note About Contributions to the Rust\nLibraries When contributing to the Rust libraries `tauri`, `tauri-api`, and\n`tauri-updater`; you will want to setup an environment for RLS (the Rust\nLanguage Server). In the Tauri root directory, there is a `.scripts` folder that\ncontains a set of scripts to automate adding a couple temporary environment\nvariables to your shell/terminal. These environment variables point to\ndirectories in the test fixture which will prevent RLS from crashing on\ncompile-time. This is a necessary step for setting up a development environment\nfor Tauri's Rust libraries. ##### _Example Instructions_ 1. Navigate to the\nTauri Root directory. 2. Execute a script based on your Operating System from\nthis folder: `.scripts/init_env.bat` for Windows Cmd, `.scripts/init_env.ps1`\nfor Windows Powershell, `. .scripts/init_env.sh` for Linux/macOS bash (note the\nfirst `.` in this command). 3. Open your text editor/IDE from this\nshell/terminal. ## Hands On Example Let's make a new example. That's a great way\nto learn. We are going to assume you are on a nixy type of environment like\nLinux or macOS and have all of your development dependencies like rust and node\nalready sorted out. ```sh git clone git@github.com:tauri-apps/tauri.git cd\ntauri/cli/tauri.js yarn mkdir ../../examples/vanillajs && cd \"$_\" ``` ```json\n\"tauri:source\": \"node ../../../cli/tauri.js/bin/tauri\", ``` ```ini\n[dependencies.tauri] path = \"../../../../core/tauri\" features = [ \"all-api\" ]\n```","url":"https://tauri.studio/docs/guides/contributor-guide"},{"id":"prose_docs_guides_events_md","title":"Events","sections":["Frontend","Backend"],"subSections":["Global events","Window","Global events","Window"],"code":["ts","rust"],"text":"The Tauri event system is a multi-producer multi-consumer communication\nprimitive that allows message passing between the frontend and the backend. It\nis analogous to the command system, but payload type check must be written on\nthe event handler and it simplifies communication from the backend to the\nfrontend, working like a channel. A Tauri application can listen and emit to\nglobal and window-specific events. Usage from the frontend and the backend are\ndescribed below. ## Frontend The event system is accessible on the frontend on\nthe `event` and `window` modules of the `@tauri-apps/api` package. ### Global\nevents To use the global event channel, import the `event` module and use the\n`emit` and `listen` functions: ```ts import { emit, listen } from\n'@tauri-apps/api/event' // listen to the `click` event and get a function to\nremove the event listener // there's also a `once` function that subscribes to\nan event and automatically unsubscribes the listener on the first event const\nunlisten = await listen('click', event => { // event.event is the event name\n(useful if you want to use a single callback fn for multiple event types) //\nevent.payload is the payload object }) // emits the `click` event with the\nobject payload emit('click', { theMessage: 'Tauri is awesome!' }) ``` ###\nWindow-specific events Window-specific events are exposed on the `window`\nmodule. ```ts import { appWindow, WebviewWindow } from '@tauri-apps/api/window'\n// emit an event that are only visible to the current window\nappWindow.emit('event', { message: 'Tauri is awesome!' }) // create a new\nwebview window and emit an event only to that window const webview = new\nWebviewWindow('window') webview.emit('event') ``` ## Backend On the backend, the\nglobal event channel is exposed on the `App` struct, and window-specific events\ncan be emitted using the `Window` trait. ### Global events ```rust use\ntauri::Manager; // the payload type must implement `Serialize`. // for global\nevents, it also must implement `Clone`. #[derive(Clone, serde::Serialize)]\nstruct Payload { message: String, } fn main() { tauri::Builder::default()\n.setup(|app| { // listen to the `event-name` (emitted on any window) let id =\napp.listen_global(\"event-name\", |event| { println!(\"got event-name with payload\n{:?}\", event.payload()); }); // unlisten to the event using the `id` returned on\nthe `listen_global` function // an `once_global` API is also exposed on the\n`App` struct app.unlisten(id); // emit the `event-name` event to all webview\nwindows on the frontend app.emit_all(\"event-name\", Payload { message: \"Tauri is\nawesome!\".into() }).unwrap(); Ok(()) }) .run(tauri::generate_context!())\n.expect(\"failed to run app\"); } ``` ### Window-specific events To use the\nwindow-specific event channel, a `Window` object can be obtained on a command\nhandler or with the `get_window` function: ```rust use tauri::{Manager, Window};\n// the payload type must implement `Serialize`. #[derive(serde::Serialize)]\nstruct Payload { message: String, } // init a background process on the command,\nand emit periodic events only to the window that used the command\n#[tauri::command] fn init_process(window: Window) { std::thread::spawn(move || {\nloop { window.emit(\"event-name\", Payload { message: \"Tauri is awesome!\".into()\n}).unwrap(); } }); } fn main() { tauri::Builder::default() .setup(|app| { //\n`main` here is the window label; it is defined on the window creation or under\n`tauri.conf.json` // the default value is `main`. note that it must be unique\nlet main_window = app.get_window(\"main\").unwrap(); // listen to the `event-name`\n(emitted on the `main` window) let id = main_window.listen(\"event-name\", |event|\n{ println!(\"got window event-name with payload {:?}\", event.payload()); }); //\nunlisten to the event using the `id` returned on the `listen` function // an\n`once` API is also exposed on the `Window` struct main_window.unlisten(id); //\nemit the `event-name` event to the `main` window main_window.emit(\"event-name\",\nPayload { message: \"Tauri is awesome!\".into() }).unwrap(); Ok(()) })\n.invoke_handler(tauri::generate_handler![init_process])\n.run(tauri::generate_context!()) .expect(\"failed to run app\"); } ```","url":"https://tauri.studio/docs/guides/events"},{"id":"prose_docs_guides_icons_md","title":"Icons","sections":[],"subSections":[],"code":["sh","json"],"text":"import Command from '@theme/Command' import Alert from '@theme/Alert' Tauri\nships with a default iconset based on its logo. This is probably NOT what you\nwant when you ship your application. To remedy this common situation, Tauri\nprovides the `icon` command that will take an input file (\"./app-icon.png\" by\ndefault) and create all the icons needed for the various platforms: ```sh\nOptions --help, -h Displays this message --log, l Logging [boolean] --icon, i\nSource icon (png, 1240x1240 with transparency) --target, t Target folder\n(default: 'src-tauri/icons') --compression, c Compression type\n[pngquant|optipng|zopfli] ``` These will be placed in your `src-tauri/icons`\nfolder where they will automatically be included in your built app. If you need\nto source your icons from some other location, you can edit this part of the\n`src-tauri/tauri.conf.json` file: ```json { \"tauri\": { \"bundle\": { \"icon\": [\n\"icons/32x32.png\", \"icons/128x128.png\", \"icons/128x128@2x.png\",\n\"icons/icon.icns\", \"icons/icon.ico\" ] } } } ``` - icon.icns = macOS - icon.ico =\nMS Windows - \\*.png = Linux","url":"https://tauri.studio/docs/guides/icons"},{"id":"prose_docs_guides_menu_md","title":"Window Menu","sections":[],"subSections":["Creating a menu","Adding the menu to all windows","Adding the menu to a specific window","Listening to events on custom menu items","Updating menu items"],"code":["rust"],"text":"Native application menus can be attached to a window. ### Creating a menu To\ncreate a native window menu, import the `Menu`, `Submenu`, `MenuItem` and\n`CustomMenuItem` types. The `MenuItem` enum contains a collection of\nplatform-specific items (currently not implemented on Windows). The\n`CustomMenuItem` allows you to create your own menu items and add special\nfunctionality to them. ```rust use tauri::{CustomMenuItem, Menu, MenuItem,\nSubmenu}; ``` Create a `Menu` instance: ```rust // here `\"quit\".to_string()`\ndefines the menu item id, and the second parameter is the menu item label. let\nquit = CustomMenuItem::new(\"quit\".to_string(), \"Quit\"); let close =\nCustomMenuItem::new(\"close\".to_string(), \"Close\"); let submenu =\nSubmenu::new(\"File\", Menu::new().add_item(quit).add_item(close)); let menu =\nMenu::new() .add_native_item(MenuItem::Copy)\n.add_item(CustomMenuItem::new(\"hide\", \"Hide\")) .add_submenu(submenu); ``` ###\nAdding the menu to all windows The defined menu can be set to all windows using\nthe `menu` API on the `tauri::Builder` struct: ```rust use\ntauri::{CustomMenuItem, Menu, MenuItem, Submenu}; fn main() { let menu =\nMenu::new(); // configure the menu tauri::Builder::default() .menu(menu)\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ### Adding the menu to a specific window You can create a\nwindow and set the menu to be used. This allows defining a specific menu set for\neach application window. ```rust use tauri::{CustomMenuItem, Menu, MenuItem,\nSubmenu}; use tauri::WindowBuilder; fn main() { let menu = Menu::new(); //\nconfigure the menu tauri::Builder::default() .create_window(\n\"main-window\".to_string(), tauri::WindowUrl::App(\"index.html\".into()), move\n|window_builder, webview_attributes| { (window_builder.menu(menu),\nwebview_attributes) }, ) .run(tauri::generate_context!()) .expect(\"error while\nrunning tauri application\"); } ``` ### Listening to events on custom menu items\nEach `CustomMenuItem` triggers an event when clicked. Use the `on_menu_event`\nAPI to handle them, either on the global `tauri::Builder` or on an specific\nwindow. #### Listening to events on global menus ```rust use\ntauri::{CustomMenuItem, Menu, MenuItem}; fn main() { let menu = vec![]; //\ninsert the menu array here tauri::Builder::default() .menu(menu)\n.on_menu_event(|event| { match event.menu_item_id() { \"quit\" => {\nstd::process::exit(0); } \"close\" => { event.window().close().unwrap(); } _ => {}\n} }) .run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` #### Listening to events on window menus ```rust use\ntauri::{CustomMenuItem, Menu, MenuItem}; use tauri::{Manager, WindowBuilder}; fn\nmain() { let menu = vec![]; // insert the menu array here\ntauri::Builder::default() .create_window( \"main-window\".to_string(),\ntauri::WindowUrl::App(\"index.html\".into()), move |window_builder,\nwebview_attributes| { (window_builder.menu(menu), webview_attributes) }, )\n.setup(|app| { let window = app.get_window(\"main-window\").unwrap(); let window_\n= window.clone(); window.on_menu_event(move |event| { match\nevent.menu_item_id().as_str() { \"quit\" => { std::process::exit(0); } \"close\" =>\n{ window_.close().unwrap(); } _ => {} } }); Ok(()) })\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ### Updating menu items The `Window` struct has a\n`menu_handle` method, which allows updating menu items: ```rust fn main() {\ntauri::Builder::default() .setup(|app| { let main_window =\napp.get_window(\"main\").unwrap(); let menu_handle = main_window.menu_handle();\nstd::thread::spawn(move || { // you can also `set_selected`, `set_enabled` and\n`set_native_image` (macOS only). menu_handle.get_item(\"item_id\").set_title(\"New\ntitle\"); }) Ok(()) }) } ```","url":"https://tauri.studio/docs/guides/menu"},{"id":"prose_docs_guides_migration_md","title":"Migrating from 0.x","sections":["Commands"],"subSections":["Rust","JavaScript"],"code":["diff","rust","js"],"text":"First of all if you still have `tauri` as dependency in your `package.json`\nreplace it with a recent version of `@tauri-apps/cli` (make sure to also change\nthe import path in your JavaScript/TypeScript files, see\n[JavaScript](#javascript)). For example: ```diff - \"tauri\": \"^0.14.1\" +\n\"@tauri-apps/cli\": \"^1.0.0-beta-rc.4\" ``` Next update your `Cargo.toml`: - add\n`tauri-build` as a new build-dependency and remove `winres`, e.g.: ```diff +\n[build-dependencies] + tauri-build = { version = \"1.0.0-beta-rc.0\" } -\n[target.\"cfg(windows)\".build-dependencies] - winres = \"0.1\" ``` - update the\nversion of `tauri` to e.g. `1.0.0-beta-rc.4` - remove all old features of the\n`tauri` dependency - remove all features, that tauri added and add\n`custom-protocol` as a new one: ```diff [features] - embedded-server = [\n\"tauri/embedded-server\" ] - no-server = [ \"tauri/no-server\" ] + custom-protocol\n= [ \"tauri/custom-protocol\" ] + default = [ \"custom-protocol\" ] ``` Update your\n`tauri.conf.json` like this: - remove `ctx` - remove the `embeddedServer` -\nrename `osx` to `macOS` and add some fields: - `\"exceptionDomain\": \"\"` -\n`\"signingIdentity\": null` - `\"entitlements\": null` - remove the\n`exceptionDomain` - add a configuration for `windows`: -\n`\"certificateThumbprint\": null` - `\"digestAlgorithm\": \"sha256\"` -\n`\"timestampUrl\": \"\"` - make the `window` definition into an array and call it\n`windows` - remove `inliner` > for more information about the config see\n[here](../api/config.md) ```diff { - \"ctx\": {}, \"tauri\": { - \"embeddedServer\": {\n- \"active\": true - }, \"bundle\": { - \"osx\": { + \"macOS\": { \"frameworks\": [],\n\"minimumSystemVersion\": \"\", - \"useBootstrapper\": false + \"useBootstrapper\":\nfalse, + \"exceptionDomain\": \"\", + \"signingIdentity\": null, + \"entitlements\":\nnull }, - \"exceptionDomain\": \"\" + \"windows\": { + \"certificateThumbprint\": null,\n+ \"digestAlgorithm\": \"sha256\", + \"timestampUrl\": \"\" + } }, + \"updater\": { +\n\"active\": false + }, - \"window\": { + \"windows\": [ { \"title\": \"Calciumdibromid\",\n\"width\": 800, \"height\": 600, \"resizable\": true, \"fullscreen\": false } + ], -\n\"inliner\": { - \"active\": true - } } } ``` ## Commands The following example is\ntaken from the previous documentation. In the new version of Tauri there is no\ndistinction between synchronous and asynchronous commands, the only difference\nin your code is a call of `tauri::execute_promise()`, that isn't there in a\nsynchronous command. ### Rust Here is the complete example code of the \"old\"\nversion: ```rust use serde::{Deserialize, Serialize}; #[derive(Deserialize)]\nstruct DoSomethingPayload { state: String, data: u64, } #[derive(Deserialize)]\n#[serde(tag = \"cmd\", rename_all = \"camelCase\")] enum Cmd { DoSomething { count:\nu64, payload: DoSomethingPayload, callback: String, error: String, }, }\n#[derive(Serialize)] struct Response<'a> { value: u64, message: &'a str, }\n#[derive(Debug, Clone)] struct CommandError<'a> { message: &'a str, } impl<'a>\nCommandError<'a> { fn new(message: &'a str) -> Self { Self { message } } }\nimpl<'a> std::fmt::Display for CommandError<'a> { fn fmt(&self, f: &mut\nstd::fmt::Formatter<'_>) -> std::fmt::Result { write!(f, \"{}\", self.message) } }\nimpl<'a> std::error::Error for CommandError<'a> {} fn main() {\ntauri::AppBuilder::new() .invoke_handler(|_webview, arg| { use Cmd::*; match\nserde_json::from_str(arg) { Err(e) => Err(e.to_string()), Ok(command) => { match\ncommand { DoSomething { count, payload, callback, error } =>\ntauri::execute_promise( _webview, move || { if count > 5 { let response =\nResponse { value: 5, message: \"async response!\", }; Ok(response) } else {\nErr(CommandError::new(\"count should be > 5\").into()) } }, callback, error, ), }\nOk(()) } } }) .build() .run(); } ``` Complete the following steps to migrate\nyour code: - create a new function for every `Cmd` enum variant - wrap the new\nfunction with the `#[tauri::command]` macro - use the fields of the enum as\narguments (`callback` and `error` can be deleted) - as function body use the\ncode inside the `match` block of the enum variant - add a return type - rename\n`AppBuilder` to `Builder` in `main()` - replace the big `invoke_handler` with\nthe new syntax The old example code should look like this now: ```rust use\nserde::{Deserialize, Serialize}; #[derive(Deserialize)] struct\nDoSomethingPayload { state: String, data: u64, } #[derive(Serialize)] struct\nResponse<'a> { value: u64, message: &'a str, } #[derive(Debug, Clone,\nSerialize)] struct CommandError<'a> { message: &'a str, } impl<'a>\nCommandError<'a> { fn new(message: &'a str) -> Self { Self { message } } }\nimpl<'a> std::fmt::Display for CommandError<'a> { fn fmt(&self, f: &mut\nstd::fmt::Formatter<'_>) -> std::fmt::Result { write!(f, \"{}\", self.message) } }\nimpl<'a> std::error::Error for CommandError<'a> {} #[tauri::command] fn\ndo_something(count: u64, payload: DoSomethingPayload) -> Result { if count > 5 {\nlet response = Response { value: 5, message: \"async response!\", }; Ok(response)\n} else { Err(CommandError::new(\"count should be > 5\").into()) } } fn main() {\ntauri::Builder::new() .invoke_handler(tauri::generate_handler![do_something])\n.run(tauri::generate_context!()); } ``` ### JavaScript Like mentioned above\nthere is also no distinction between synchronous and asynchronous commands in\nJavaScript. You only have to use `invoke` and optionally use the results. Here\nis an example of the \"old\" code: ```js invoke({ cmd: 'doSomething', count: 5,\npayload: { state: 'some string data', data: 17 } }); promisified({ cmd:\n'doSomething', count: 5, payload: { state: 'some string data', data: 17 }\n}).then(response => { console.log(response); }).catch(error => {\nconsole.error(error); }); ``` Complete the following steps to migrate your code:\n- replace all `promisified`-calls with `invoke`-calls - extract the `cmd`\nattribute of the argument object as first parameter (you may have to rename it\nto `snake_case` as the `cmd` parameter is now the name of the function in Rust)\n- if you import parts of the tauri-api with `tauri/api/*` replace it with\n`@tauri-apps/api/*`, e.g.: ```diff - import { invoke } from 'tauri/api/tauri'; +\nimport { invoke } from '@tauri-apps/api/tauri'; ``` The old example code should\nlook like this now: ```js invoke( 'do_something', { count: 5, payload: { state:\n'some string data', data: 17 } } ); invoke( 'do_something', { count: 5, payload:\n{ state: 'some string data', data: 17 } } ).then(response => {\nconsole.log(response); }).catch(error => { console.error(error); }); ``` For\nmore information on commands read [Create Rust Commands](command.md).","url":"https://tauri.studio/docs/guides/migration"},{"id":"prose_docs_guides_multiwindow_md","title":"Multiwindow","sections":[],"subSections":[],"code":[],"text":"Manage multiple windows on a single application.","url":"https://tauri.studio/docs/guides/multiwindow"},{"id":"prose_docs_guides_plugin_md","title":"Write Tauri Plugins","sections":["Writing a Plugin","Using a plugin","Conventions","Official Tauri Plugins"],"subSections":[],"code":["rust"],"text":"import Alert from '@theme/Alert' Plugins allow you to hook into the Tauri\napplication lifecycle and introduce new commands. ## Writing a Plugin To write a\nplugin you just need to implement the `tauri::plugin::Plugin` trait: ```rust use\ntauri::{plugin::{Plugin, Result as PluginResult}, Runtime, PageLoadPayload,\nWindow, Invoke, AppHandle}; struct MyAwesomePlugin { invoke_handler: Box) + Send\n+ Sync>, // plugin state, configuration fields } // the plugin custom command\nhandlers if you choose to extend the API. #[tauri::command] // this will be\naccessible with `invoke('plugin:awesome|initialize')`. // where `awesome` is the\nplugin name. fn initialize() {} #[tauri::command] // this will be accessible\nwith `invoke('plugin:awesome|do_something')`. fn do_something() {} impl\nMyAwesomePlugin { // you can add configuration fields here, // see\nhttps://doc.rust-lang.org/1.0.0/style/ownership/builders.html pub fn new() ->\nSelf { Self { invoke_handler: Box::new(tauri::generate_handler![initialize,\ndo_something]), } } } impl Plugin for MyAwesomePlugin { /// The plugin name.\nMust be defined and used on the `invoke` calls. fn name(&self) -> &'static str {\n\"awesome\" } /// The JS script to evaluate on initialization. /// Useful when\nyour plugin is accessible through `window` /// or needs to perform a JS task on\napp initialization /// e.g. \"window.awesomePlugin = { ... the plugin interface\n}\" fn initialization_script(&self) -> Option { None } /// initialize plugin with\nthe config provided on `tauri.conf.json > plugins > $yourPluginName` or the\ndefault value. fn initialize(&mut self, app: &AppHandle, config:\nserde_json::Value) -> PluginResult<()> { Ok(()) } /// Callback invoked when the\nWindow is created. fn created(&mut self, window: Window) {} /// Callback invoked\nwhen the webview performs a navigation. fn on_page_load(&mut self, window:\nWindow, payload: PageLoadPayload) {} /// Extend the invoke handler. fn\nextend_api(&mut self, message: Invoke) { (self.invoke_handler)(message) } } ```\nNote that each function on the `Plugin` trait is optional, except the `name`\nfunction. ## Using a plugin To use a plugin, just pass an instance of the\n`MyAwesomePlugin` struct to the App's `plugin` method: ```rust fn main() { let\nawesome_plugin = MyAwesomePlugin::new(); tauri::Builder::default()\n.plugin(awesome_plugin) .run(tauri::generate_context!()) .expect(\"failed to run\napp\"); } ``` ## Conventions - Plugins should have a clear name with\n`tauri-plugin-` prefix. - Include `tauri-plugin` keyword in\n`Cargo.toml`/`package.json`. - Document your plugin in English. - Add an example\napp showcasing your plugin. ## Official Tauri Plugins -\n[Stronghold](https://github.com/tauri-apps/tauri-plugin-stronghold) -\n[Authenticator](https://github.com/tauri-apps/tauri-plugin-authenticator) -\n[Logging](https://github.com/tauri-apps/tauri-plugin-log) -\n[SQL](https://github.com/tauri-apps/tauri-plugin-sql) -\n[WebSocket](https://github.com/tauri-apps/tauri-plugin-websocket) - [Restoring\nwindow state](https://github.com/tauri-apps/tauri-plugin-window-state) -\n[Store](https://github.com/tauri-apps/tauri-plugin-store)","url":"https://tauri.studio/docs/guides/plugin"},{"id":"prose_docs_guides_splashscreen_md","title":"Splashscreen","sections":[],"subSections":["Setup","Waiting for Webpage","Waiting for Rust"],"code":["diff",null],"text":"import Link from '@docusaurus/Link' If your webpage could take some time to\nload, or if you need to run an initialization procedure in Rust before\ndisplaying your main window, a splashscreen could improve the loading experience\nfor the user. ### Setup First, create a `splashscreen.html` in your `distDir`\nthat contains the HTML code for a splashscreen. Then, update your\n`tauri.conf.json` like so: ```diff \"windows\": [ { \"title\": \"Tauri App\", \"width\":\n800, \"height\": 600, \"resizable\": true, \"fullscreen\": false, + \"visible\": false\n// Hide the main window by default }, // Add the splashscreen window + { +\n\"width\": 400, + \"height\": 200, + \"decorations\": false, + \"url\":\n\"splashscreen.html\", + \"label\": \"splashscreen\" + } ] ``` Now, your main window\nwill be hidden and the splashscreen window will show when your app is launched.\nNext, you'll need a way to close the splashscreen and show the main window when\nyour app is ready. How you do this depends on what you are waiting for before\nclosing the splashscreen. ### Waiting for Webpage If you are waiting for your\nweb code, you'll want to create a `close_splashscreen` [command](command.md).\n```rust title=src-tauri/main.rs use tauri::Manager; // Create the command:\n#[tauri::command] fn close_splashscreen(window: tauri::Window) { // Close\nsplashscreen if let Some(splashscreen) = window.get_window(\"splashscreen\") {\nsplashscreen.close().unwrap(); } // Show main window\nwindow.get_window(\"main\").unwrap().show().unwrap(); } // Register the command:\nfn main() { tauri::Builder::default() // Add this line\n.invoke_handler(tauri::generate_handler![close_splashscreen])\n.run(tauri::generate_context!()) .expect(\"failed to run app\"); } ``` Then, you\ncan call it from your JS: ```js // With the Tauri API npm package: import {\ninvoke } from '@tauri-apps/api/tauri' // With the Tauri global script: const\ninvoke = window.__TAURI__.invoke document.addEventListener('DOMContentLoaded',\n() => { // This will wait for the window to load, but you could // run this\nfunction on whatever trigger you want invoke('close_splashscreen') }) ``` ###\nWaiting for Rust If you are waiting for Rust code to run, put it in the `setup`\nfunction handler so you have access to the `App` instance: ```rust\ntitle=src-tauri/main.rs use tauri::Manager; fn main() {\ntauri::Builder::default() .setup(|app| { let splashscreen_window =\napp.get_window(\"splashscreen\").unwrap(); let main_window =\napp.get_window(\"main\").unwrap(); // we perform the initialization code on a new\ntask so the app doesn't freeze tauri::async_runtime::spawn(async move { //\ninitialize your app here instead of sleeping :) println!(\"Initializing...\");\nstd::thread::sleep(std::time::Duration::from_secs(2)); println!(\"Done\ninitializing.\"); // After it's done, close the splashscreen and display the main\nwindow splashscreen_window.close().unwrap(); main_window.show().unwrap(); });\nOk(()) }) .run(tauri::generate_context!()) .expect(\"failed to run app\"); } ```","url":"https://tauri.studio/docs/guides/splashscreen"},{"id":"prose_docs_guides_system_tray_md","title":"System Tray","sections":[],"subSections":["Setup","Creating a system tray","Configuring a system tray context menu","Configure the app system tray","Listening to system tray events","Updating system tray"],"code":["json","rust"],"text":"Native application system tray. ### Setup Configure the `systemTray` object on\n`tauri.conf.json`: ```json { \"tauri\": { \"systemTray\": { \"iconPath\":\n\"icons/icon.png\", \"iconAsTemplate\": true } } } ``` The `iconPath` is pointed to\na PNG file on macOS and Linux, and a `.ico` file must exist for Windows support.\nThe `iconAsTemplate` is a boolean value that determines whether the image\nrepresents a\n[template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc)\nimage on macOS. ### Creating a system tray To create a native system tray,\nimport the `SystemTray` type: ```rust use tauri::SystemTray; ``` Initialize a\nnew tray instance: ```rust let tray = SystemTray::new(); ``` ### Configuring a\nsystem tray context menu Optionally you can add a context menu that is visible\nwhen the tray icon is right clicked. Import the `SystemTrayMenu`,\n`SystemTrayMenuItem` and `CustomMenuItem` types: ```rust use\ntauri::{CustomMenuItem, SystemTrayMenu, SystemTrayMenuItem}; ``` Create the\n`SystemTrayMenu`: ```rust // here `\"quit\".to_string()` defines the menu item id,\nand the second parameter is the menu item label. let quit =\nCustomMenuItem::new(\"quit\".to_string(), \"Quit\"); let hide =\nCustomMenuItem::new(\"hide\".to_string(), \"Hide\"); let tray_menu =\nSystemTrayMenu::new() .add_item(quit)\n.add_native_item(SystemTrayMenuItem::Separator) .add_item(hide); ``` Add the\ntray menu to the `SystemTray` instance: ```rust let tray =\nSystemTray::new().with_menu(tray_menu); ``` ### Configure the app system tray\nThe created `SystemTray` instance can be set using the `system_tray` API on the\n`tauri::Builder` struct: ```rust use tauri::{CustomMenuItem, SystemTray,\nSystemTrayMenu}; fn main() { let tray_menu = SystemTrayMenu::new(); // insert\nthe menu items here let system_tray = SystemTray::new() .with_menu(tray_menu);\ntauri::Builder::default() .system_tray(system_tray)\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ### Listening to system tray events Each `CustomMenuItem`\ntriggers an event when clicked. Also, Tauri emits tray icon click events. Use\nthe `on_system_tray_event` API to handle them: ```rust use\ntauri::{CustomMenuItem, SystemTray, SystemTrayMenu}; use tauri::Manager; fn\nmain() { let tray_menu = SystemTrayMenu::new(); // insert the menu items here\ntauri::Builder::default() .system_tray(SystemTray::new().with_menu(tray_menu))\n.on_system_tray_event(|app, event| match event { SystemTrayEvent::LeftClick {\nposition: _, size: _, .. } => { println!(\"system tray received a left click\"); }\nSystemTrayEvent::RightClick { position: _, size: _, .. } => { println!(\"system\ntray received a right click\"); } SystemTrayEvent::DoubleClick { position: _,\nsize: _, .. } => { println!(\"system tray received a double click\"); }\nSystemTrayEvent::MenuItemClick { id, .. } => { match id.as_str() { \"quit\" => {\nstd::process::exit(0); } \"hide\" => { let window =\napp.get_window(\"main\").unwrap(); window.hide().unwrap(); } _ => {} } } _ => {}\n}) .run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` ### Updating system tray The `AppHandle` struct has a\n`tray_handle` method, which returns a handle to the system tray allowing\nupdating tray icon and context menu items: #### Updating context menu items\n```rust use tauri::{CustomMenuItem, SystemTray, SystemTrayMenu}; use\ntauri::Manager; fn main() { let tray_menu = SystemTrayMenu::new(); // insert the\nmenu items here tauri::Builder::default()\n.system_tray(SystemTray::new().with_menu(tray_menu)) .on_system_tray_event(|app,\nevent| match event { SystemTrayEvent::MenuItemClick { id, .. } => { // get a\nhandle to the clicked menu item // note that `tray_handle` can be called\nanywhere, // just get a `AppHandle` instance with `app.handle()` on the setup\nhook // and move it to another function or thread let item_handle =\napp.tray_handle().get_item(&id); match id.as_str() { \"hide\" => { let window =\napp.get_window(\"main\").unwrap(); window.hide().unwrap(); // you can also\n`set_selected`, `set_enabled` and `set_native_image` (macOS only).\nitem_handle.set_title(\"Show\").unwrap(); } _ => {} } } _ => {} })\n.run(tauri::generate_context!()) .expect(\"error while running tauri\napplication\"); } ``` #### Updating tray icon Note that `tauri::Icon` must be a\n`Path` variant on Linux, and `Raw` variant on Windows and macOS. ```rust\napp.tray_handle().set_icon(tauri::Icon::Raw(include_bytes!(\"../path/to/myicon.ico\"))).unwrap();\n```","url":"https://tauri.studio/docs/guides/system-tray"},{"id":"prose_docs_guides_updater_md","title":"Updater","sections":["Update Requests","Built","Javascript API","Events","Update Server JSON Format","Update File JSON Format","macOS","Windows","Linux"],"subSections":["Initialize updater and check if a new version is available","Listen New Update Available","Emit Install and Download","Listen Install Progress"],"code":["js","json","none","bash"],"text":"# Configuration Once you have your Tauri project ready, you need to configure\nthe updater. Add this in tauri.conf.json ```json \"updater\": { \"active\": true,\n\"endpoints\": [ \"https://releases.myapp.com/{{target}}/{{current_version}}\" ],\n\"dialog\": true, \"pubkey\": \"\" } ``` The required keys are \"active\" and\n\"endpoints\", others are optional. \"active\" must be a boolean. By default, it's\nset to false. \"endpoints\" must be an array. The string `{{target}}` and\n`{{current_version}}` are automatically replaced in the URL allowing you\ndetermine [server-side](#update-server-json-format) if an update is available.\nIf multiple endpoints are specified, the updater will fallback if a server is\nnot responding within the pre-defined timeout. \"dialog\" if present must be a\nboolean. By default, it's set to true. If enabled, [events](#events) are\nturned-off as the updater will handle everything. If you need the custom events,\nyou MUST turn off the built-in dialog. \"pubkey\" if present must be a valid\npublic-key generated with Tauri cli. See [Signing updates](#signing-updates). ##\nUpdate Requests Tauri is indifferent to the request the client application\nprovides for update checking. `Accept: application/json` is added to the request\nheaders because Tauri is responsible for parsing the response. For the\nrequirements imposed on the responses and the body format of an update, response\nsee [Server Support](#server-support). Your update request must *at least*\ninclude a version identifier so that the server can determine whether an update\nfor this specific version is required. It may also include other identifying\ncriteria such as operating system version, to allow the server to deliver as\nfine-grained an update as you would like. How you include the version identifier\nor other criteria is specific to the server that you are requesting updates\nfrom. A common approach is to use query parameters,\n[Configuration](#configuration) shows an example of this. ## Built-in dialog By\ndefault, updater uses a built-in dialog API from Tauri. ![New\nUpdate](https://i.imgur.com/UMilB5A.png) The dialog release notes is represented\nby the update `note` provided by the [server](#server-support). If the user\naccepts, the download and install are initialized. The user will be then\nprompted to restart the application. ## Javascript API **Attention, you need to\n_disable built-in dialog_ in your [tauri configuration](#configuration),\notherwise, events aren't emitted and the javascript API will NOT work.** ```js\nimport { checkUpdate, installUpdate } from \"@tauri-apps/api/updater\"; import {\nrelaunch } from \"@tauri-apps/api/process\"; try { const {shouldUpdate, manifest}\n= await checkUpdate(); if (shouldUpdate) { // display dialog await\ninstallUpdate(); // install complete, restart app await relaunch(); } }\ncatch(error) { console.log(error); } ``` ## Events **Attention, you need to\n_disable built-in dialog_ in your [tauri configuration](#configuration),\notherwise, events aren't emitted.** To know when an update is ready to be\ninstalled, you can subscribe to these events: ### Initialize updater and check\nif a new version is available #### If a new version is available, the event\n`tauri://update-available` is emitted. Event: `tauri://update` ### Rust ```rust\nwindow.emit(\"tauri://update\".to_string(), None); ``` ### Javascript ```js import\n{ emit } from \"@tauri-apps/api/event\"; emit(\"tauri://update\"); ``` ### Listen\nNew Update Available Event: `tauri://update-available` Emitted data: ```none\nversion Version announced by the server date Date announced by the server body\nNote announced by the server ``` ### Rust ```rust\nwindow.listen(\"tauri://update-available\".to_string(), move |msg| { println!(\"New\nversion available: {:?}\", msg); }) ``` ### Javascript ```js import { listen }\nfrom \"@tauri-apps/api/event\"; listen(\"tauri://update-available\", function (res)\n{ console.log(\"New version available: \", res); }); ``` ### Emit Install and\nDownload You need to emit this event to initialize the download and listen to\nthe [install progress](#listen-install-progress). Event:\n`tauri://update-install` ### Rust ```rust\nwindow.emit(\"tauri://update-install\".to_string(), None); ``` ### Javascript\n```js import { emit } from \"@tauri-apps/api/event\";\nemit(\"tauri://update-install\"); ``` ### Listen Install Progress Event:\n`tauri://update-status` Emitted data: ```none status [ERROR/PENDING/DONE] error\nString/null ``` PENDING is emitted when the download is started and DONE when\nthe install is complete. You can then ask to restart the application. ERROR is\nemitted when there is an error with the updater. We suggest to listen to this\nevent even if the dialog is enabled. ### Rust ```rust\nwindow.listen(\"tauri://update-status\".to_string(), move |msg| { println!(\"New\nstatus: {:?}\", msg); }) ``` ### Javascript ```js import { listen } from\n\"@tauri-apps/api/event\"; listen(\"tauri://update-status\", function (res) {\nconsole.log(\"New status: \", res); }); ``` # Server Support Your server should\ndetermine whether an update is required based on the [Update\nRequest](#update-requests) your client issues. If an update is required your\nserver should respond with a status code of [200\nOK](http://tools.ietf.org/html/rfc2616#section-10.2.1) and include the [update\nJSON](#update-server-json-format) in the body. To save redundantly downloading\nthe same version multiple times your server must not inform the client to\nupdate. If no update is required your server must respond with a status code of\n[204 No Content](http://tools.ietf.org/html/rfc2616#section-10.2.5). ## Update\nServer JSON Format When an update is available, Tauri expects the following\nschema in response to the update request provided: ```json { \"url\":\n\"https://mycompany.example.com/myapp/releases/myrelease.tar.gz\", \"version\":\n\"0.0.1\", \"notes\": \"Theses are some release notes\", \"pub_date\":\n\"2020-09-18T12:29:53+01:00\", \"signature\": \"\" } ``` The only required keys are\n\"url\" and \"version\", the others are optional. \"pub_date\" if present must be\nformatted according to ISO 8601. \"signature\" if present must be a valid\nsignature generated with Tauri cli. See [Signing updates](#signing-updates). ##\nUpdate File JSON Format The alternate update technique uses a plain JSON file\nmeaning you can store your update metadata on S3, gist, or another static file\nstore. Tauri will check against the name/version field and if the version is\nsmaller than the current one and the platform is available, the update will be\ntriggered. The format of this file is detailed below: ```json { \"name\":\"v1.0.0\",\n\"notes\":\"Test version\", \"pub_date\":\"2020-06-22T19:25:57Z\", \"platforms\": {\n\"darwin\": { \"signature\":\"\",\n\"url\":\"https://github.com/lemarier/tauri-test/releases/download/v1.0.0/app.app.tar.gz\"\n}, \"linux\": { \"signature\":\"\",\n\"url\":\"https://github.com/lemarier/tauri-test/releases/download/v1.0.0/app.AppImage.tar.gz\"\n}, \"win64\": { \"signature\":\"\",\n\"url\":\"https://github.com/lemarier/tauri-test/releases/download/v1.0.0/app.x64.msi.zip\"\n} } } ``` # Bundler (Artifacts) The Tauri bundler will automatically generate\nupdate artifacts if the updater is enabled in `tauri.conf.json` If the bundler\ncan locate your private and pubkey, your update artifacts will be automatically\nsigned. The signature can be found in the `sig` file. The signature can be\nuploaded to GitHub safely or made public as long as your private key is secure.\nYou can see how it's [bundled with the\nCI](https://github.com/tauri-apps/tauri/blob/5b6c7bb6ee3661f5a42917ce04a89d94f905c949/.github/workflows/artifacts-updater.yml#L44)\nand a [sample\ntauri.conf.json](https://github.com/tauri-apps/tauri/blob/5b6c7bb6ee3661f5a42917ce04a89d94f905c949/examples/updater/src-tauri/tauri.conf.json#L52)\n## macOS On MACOS we create a .tar.gz from the whole application. (.app) ```none\ntarget/release/bundle └── osx └── app.app └── app.app.tar.gz (update bundle) └──\napp.app.tar.gz.sig (if signature enabled) ``` ## Windows On Windows we create a\n.zip from the MSI, when downloaded and validated, we run the MSI install.\n```none target/release └── app.x64.msi └── app.x64.msi.zip (update bundle) └──\napp.x64.msi.zip.sig (if signature enabled) ``` ## Linux On Linux, we create a\n.tar.gz from the AppImage. ```none target/release/bundle └── appimage └──\napp.AppImage └── app.AppImage.tar.gz (update bundle) └── app.AppImage.tar.gz.sig\n(if signature enabled) ``` # Signing updates We offer a built-in signature to\nensure your update is safe to be installed. To sign your updates, you need two\nthings. The *Public-key* (pubkey) should be added inside your `tauri.conf.json`\nto validate the update archive before installing. The *Private key* (privkey) is\nused to sign your update and should NEVER be shared with anyone. Also, if you\nlost this key, you'll NOT be able to publish a new update to the current user\nbase (if pubkey is set in tauri.conf.json). It's important to save it at a safe\nplace and you can always access it. To generate your keys you need to use the\nTauri cli. ```bash tauri sign -g -w ~/.tauri/myapp.key ``` You have multiple\noptions available ```bash Tauri updates signer. USAGE: tauri sign [FLAGS]\n[OPTIONS] FLAGS: --force Overwrite private key even if it exists on the\nspecified path -g, --generate Generate keypair to sign files -h, --help Prints\nhelp information --no-password Set empty password for your private key -V,\n--version Prints version information OPTIONS: -p, --password Set private key\npassword when signing -k, --private-key Load the private key from a string -f,\n--private-key-path Load the private key from a file --sign-file Sign the\nspecified file -w, --write-keys Write private key to a file ``` *** Environment\nvariables used to sign with the Tauri `bundler`: If they are set, and\n`tauri.conf.json` expose the public key, the bundler will automatically generate\nand sign the updater artifacts. `TAURI_PRIVATE_KEY` Path or String of your\nprivate key `TAURI_KEY_PASSWORD` Your private key password (optional)","url":"https://tauri.studio/docs/guides/updater"},{"id":"prose_docs_guides_window_customization_md","title":"Window Customization","sections":["Configuration","Creating a Custom Titlebar"],"subSections":["CSS","HTML","JS"],"code":["css","html","js"],"text":"` tag: ```html\nminimize [https://api.iconify.design/mdi:window-minimize.svg]\nmaximize [https://api.iconify.design/mdi:window-maximize.svg]\nclose [https://api.iconify.design/mdi:close.svg]\n``` Note that you may need to move the rest of your content down so that the\ntitlebar doesn't cover it. ### JS Finally, you'll need to make the buttons work:\n```js import { appWindow } from '@tauri-apps/api/window' document\n.getElementById('titlebar-minimize') .addEventListener('click', () =>\nappWindow.minimize()) document .getElementById('titlebar-maximize')\n.addEventListener('click', () => appWindow.toggleMaximize()) document\n.getElementById('titlebar-close') .addEventListener('click', () =>\nappWindow.close()) ```","url":"https://tauri.studio/docs/guides/window-customization"},{"id":"prose_docs_guides_bundler_anti_bloat_md","title":"Anti Bloat","sections":[],"subSections":["Rust Compression Features","Stripping","Allowlist config","UPX"],"code":[null,"json"],"text":"import Alert from '@theme/Alert' The following links have tutorials on reducing\nthe size of your installers: - https://github.com/RazrFalcon/cargo-bloat -\nhttps://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html -\nhttps://doc.rust-lang.org/cargo/reference/manifest.html#the-profile-sections ###\nRust Compression Features Add this to your `src-tauri/Cargo.toml`\n[profile.release] panic = \"abort\" codegen-units = 1 lto = true incremental =\nfalse opt-level = \"s\" There is also `opt-level = \"z\"` available to try to reduce\nthe resulting binary size. `\"s\"` and `\"z\"` can sometimes be smaller than the\nother, so test it with your own application! We've seen smaller binary sizes\nfrom `\"s\"` for Tauri example applications, but real world applications can\nalways differ. #### Unstable Rust Compression Features The following suggestions\nare all unstable features and require a nightly toolchain. See the Unstable\nFeatures\n[https://doc.rust-lang.org/cargo/reference/unstable.html#unstable-features]\ndocumentation for more information of what this involves. The following methods\ninvolve using unstable compiler features and require having a rust nightly\ntoolchain installed. If you don't have the nightly toolchain + `rust-src`\nnightly component added, try the following: $ rustup toolchain install nightly $\nrustup component add rust-src --toolchain nightly The Rust Standard Library\ncomes precompiled. You can instead apply the optimization options used for the\nrest of your binary + dependencies to the std with an unstable flag. This flag\nrequires specifying your target, so know the target triple that you are\ntargeting. $ cargo +nightly build --release -Z build-std --target\nx86_64-unknown-linux-gnu If you are using `panic = \"abort\"` in your release\nprofile optimizations, then you need to make sure the `panic_abort` crate is\ncompiled with std. Additionally, an extra std feature can be used to further\nreduce the binary size. The following applies both: $ cargo +nightly build\n--release -Z build-std=std,panic_abort -Z\nbuild-std-features=panic_immediate_abort --target x86_64-unknown-linux-gnu See\nthe unstable documentation for more details about [`-Z\nbuild-std`](https://doc.rust-lang.org/cargo/reference/unstable.html#build-std)\nand [`-Z\nbuild-std-features`](https://doc.rust-lang.org/cargo/reference/unstable.html#build-std-features).\n### Stripping Binary size can easily be reduced by stripping out debugging\ninformation from binaries that ship to end users. This is not good for\ndebuggable builds, but means good binary size savings for end user binaries. The\neasiest way is to use the famous `strip` utility to remove this debugging\ninformation. $ strip target/release/my_application See your local `strip`\nmanpage for more information and flags that can be used to specify what\ninformation gets stripped out from the binary. ### Allowlist config You can also\nreduce the application size with the `allowlist` config, and only enabling what\nyou need. Sometimes this is useful with Tauri's\n[Bridge-Pattern](/docs/guides/patterns/bridge) or others, depending on needs.\nFor example in `tauri.conf.json` file: ```json { \"tauri\": { \"allowlist\": {\n\"all\": false, \"fs\": { \"writeFile\": true, \"writeBinaryFile\": true }, \"shell\": {\n\"execute\": true }, \"dialog\": { \"save\": true } } } } ``` ### UPX UPX, **Ultimate\nPacker for eXecutables**, is a dinosaur amongst the binary packers. This 23-year\nold, well-maintained piece of kit is GPL-v2 licensed with a pretty liberal usage\ndeclaration. Our understanding of the licensing is that you can use it for any\npurposes (commercial or otherwise) without needing to change your license unless\nyou modify the source code of UPX. Basically it compresses the binary and\ndecompresses it at runtime. It should work for pretty much any binary type out\nthere. Read more: https://github.com/upx/upx You should know that this technique\nmight flag your binary as a virus on Windows and macOS - so use at your own\ndiscretion, and as always validate with [Frida](https://frida.re/docs/home/) and\ndo real distribution testing! #### Usage on macOS $ brew install upx $ yarn\ntauri build $ upx --ultra-brute\nsrc-tauri/target/release/bundle/macos/app.app/Contents/macOS/app Ultimate Packer\nfor eXecutables Copyright (C) 1996 - 2018 UPX 3.95 Markus Oberhumer, Laszlo\nMolnar & John Reiser Aug 26th 2018 File size Ratio Format Name\n-------------------- ------ ----------- ----------- 963140 -> 274448 28.50%\nmacho/amd64 app","url":"https://tauri.studio/docs/guides/bundler/anti-bloat"},{"id":"prose_docs_guides_bundler_debian_md","title":"Debian packages","sections":[],"subSections":[],"code":["json"],"text":"import Alert from '@theme/Alert' Tauri allows your app to be packaged as a\n`.deb` (Debian package) file. # Bootstrapper Instead of launching the app\ndirectly, you can configure the bundled app to run a script that tries to expose\nthe environment variables to the app; without that you'll have trouble using\nsystem programs because the `PATH` environment variable isn't correct. Enable it\nwith the `useBootstrapper` [/docs/api/config#tauri.bundle.deb.useBootstrapper]\nconfig. # Custom files To include custom files to the debian package, you can\nconfigure a mapping on `tauri.conf.json > tauri > bundle > deb > files` as\nfollows: ```json { \"tauri\": { \"bundle\": { \"deb\": { \"files\": {\n\"/usr/lib/README.md\": \"../README.md\", // copies the README.md file to\n/usr/lib/README.md \"usr/lib/assets\": \"../public/\" // copies the entire public\ndirectory to /usr/lib/assets } } } } } ``` Each `files` object key is the path\non the debian package, and the value is a path to a file or directory relative\nto the `tauri.conf.json` file.","url":"https://tauri.studio/docs/guides/bundler/debian"},{"id":"prose_docs_guides_bundler_introduction_md","title":"Introduction","sections":[],"subSections":[],"code":[],"text":"The Tauri Bundler is a Rust harness for compiling your binary, packaging assets,\nand preparing a final bundle. It will detect your operating system and build a\nbundle accordingly. It currently supports: - Linux: .deb, .appimage - macOS:\n.app, .dmg - Windows: .exe, .msi","url":"https://tauri.studio/docs/guides/bundler/introduction"},{"id":"prose_docs_guides_bundler_sidecar_md","title":"Sidecar (Embedding External Binaries)","sections":["Running the sidecar binary on JavaScript","Running the sidecar binary on Rust","Using Node"],"subSections":[],"code":["json","bash","javascript","rust"],"text":"import Alert from '@theme/Alert' You may need to embed depending binaries in\norder to make your application work or to prevent users having to install\nadditional dependencies (e.g. Node.js, Python, etc). To bundle the binaries of\nyour choice, you can add the `externalBin` property to the `tauri > bundle`\nobject in your `tauri.conf.json`. See more about tauri.conf.json configuration\nhere [/docs/api/config#tauri.bundle]. `externalBin` expects a list of strings\ntargeting binaries either with absolute or relative paths. Here is a sample to\nillustrate the configuration, this is not a complete `tauri.conf.json` file:\n```json { \"tauri\": { \"bundle\": { \"externalBin\": [\"/absolute/path/to/app\",\n\"relative/path/to/binary\", \"bin/python\"] } } } ``` A binary with the same name\nand a `-$TARGET_TRIPLE` suffix must exist on the specified path. For instance,\n`\"externalBin\": [\"bin/python\"]` requires a\n`src-tauri/bin/python-x86_64-unknown-linux-gnu` executable on Linux. You can\nfind the current platform's target triple running the following command: ```bash\nrustc -Vv | grep host | cut -f2 -d' ' ``` Here's a Node.js script to append the\ntarget triple to a binary: ```javascript const execa = require('execa') const fs\n= require('fs') let extension = '' if (process.platform === 'win32') { extension\n= '.exe' } async function main() { const rustInfo = (await execa('rustc',\n['-vV'])).stdout const targetTriple = /host: (\\S+)/g.exec(rustInfo)[1] if\n(!targetTriple) { console.error('Failed to determine platform target triple') }\nfs.renameSync( `src-tauri/binaries/app${extension}`,\n`src-tauri/binaries/app-${targetTriple}${extension}` ) } main().catch((e) => {\nthrow e }) ``` ## Running the sidecar binary on JavaScript On the JavaScript\ncode, import the `Command` class on the `shell` module and use the `sidecar`\nstatic method: ```javascript import { Command } from '@tauri-apps/api/shell' //\nalternatively, use `window.__TAURI__.shell.Command` // `my-sidecar` is the value\nspecified on `tauri.conf.json > tauri > bundle > externalBin` const command =\nCommand.sidecar('my-sidecar') const output = await command.execute() ``` ##\nRunning the sidecar binary on Rust On the Rust code, import the `Command` struct\nfrom the `tauri::api::process` module: ```rust let (mut rx, mut child) =\nCommand::new_sidecar(\"my-sidecar\") .expect(\"failed to create `my-sidecar` binary\ncommand\") .spawn() .expect(\"Failed to spawn sidecar\");\ntauri::async_runtime::spawn(async move { // read events such as stdout while let\nSome(event) = rx.recv().await { if let CommandEvent::Stdout(line) = event {\nwindow .emit(\"message\", Some(format!(\"'{}'\", line))) .expect(\"failed to emit\nevent\"); // write to stdin child.write(\"message from\nRust\\n\".as_bytes()).unwrap(); } } }); ``` ## Using Node.js on a sidecar The\nTauri [sidecar\nexample](https://github.com/tauri-apps/tauri/tree/dev/examples/sidecar)\ndemonstrates how to use the sidecar API to run a Node.js application on Tauri.\nIt compiles the Node.js code using [pkg](https://github.com/vercel/pkg) and uses\nthe scripts above to run it.","url":"https://tauri.studio/docs/guides/bundler/sidecar"},{"id":"prose_docs_guides_bundler_sign_macos_md","title":"macOS - Code signing guide","sections":["Requirements","tl","Signing Tauri apps"],"subSections":["Creating a signing certificate","Downloading a certificate","Signing the Tauri application","Building the application","Example"],"code":["yml"],"text":"import Alert from '@theme/Alert' This guide provides information on code signing\nand notarization for macOS applications. If you are not utilizing GitHub Actions\nto perform builds of OSX DMGs, you will need to ensure the environment variable\nCI=true exists. For more information refer to Issue #592\n[https://github.com/tauri-apps/tauri/issues/592]. ## Requirements - Xcode 11 or\nabove. - An Apple Developer account enrolled to the [Apple Developer\nProgram](https://developer.apple.com/programs/). ## tl;dr The Tauri code signing\nand notarization process is configured through the following environment\nvariables: - `APPLE_SIGNING_IDENTITY`: the name of the keychain entry that\ncontains the signing certificate. - `APPLE_CERTIFICATE`: base64 string of the\n`.p12` certificate, exported from the keychain. Useful if you don't have the\ncertificate on the keychain (e.g. CI machines). - `APPLE_CERTIFICATE_PASSWORD`:\nthe password for the `.p12` certificate. - `APPLE_ID` and `APPLE_PASSWORD`: your\nApple account email and an [app-specific\npassword](https://support.apple.com/en-ca/HT204397). Only required to notarize\nthe app. - `APPLE_API_ISSUER` and `APPLE_API_KEY`: authentication with an App\nStore Connect API key instead of the Apple ID. Only required to notarize the\napp. ## Signing Tauri apps The first step to sign a macOS application is getting\na signing certificate from the Apple Developer Program. ### Creating a signing\ncertificate To create a new signing certificate you must generate a Certificate\nSigning Request (CSR) file from your Mac computer. [This\nguide](https://help.apple.com/developer-account/#/devbfa00fef7) describes the\nprocess to create a CSR. On your Apple Developer account, navigate to the\n[Certificates, IDs & Profiles\npage](https://developer.apple.com/account/resources/certificates/list) and click\non the `Add` button to open the interface to create a new certificate. Choose\nthe appropriate certificate type (`Apple Distribution` to submit apps to the App\nStore, and `Developer ID Application` to ship apps outside of the App Store).\nUpload your CSR and the certificate will be created. Only the Apple Developer\n`Account Holder` can create Developer ID Application certificates, but it can be\nassociated to a different Apple ID by creating a CSR with a different user email\naddress. ### Downloading a certificate On [Certificates, IDs & Profiles\npage](https://developer.apple.com/account/resources/certificates/list), click on\nthe certificate you want to use and then click on the `Download` button. It will\nsave a `.cer` file that once opened, installs the certificate on the keychain.\nThe name of the keychain entry represents the `signing identity`, which can also\nbe found by executing `$ security find-identity -v -p codesigning`. A signing\ncertificate is only valid if associated with your Apple ID. An invalid\ncertificate won't be listed on the Keychain Access > My Certificates tab or the\n$ security find-identity -v -p codesigning output. ### Signing the Tauri\napplication The signing configuration is provided to the Tauri bundler via\nenvironment variables. You will need to configure the certificate to use and an\noptional authentication configuration to notarize the application. ####\nCertificate environment variables - `APPLE_SIGNING_IDENTITY`: this is the\n`signing identity` we highlighted above. It must be defined to sign apps both\nlocally and on CI machines. Additionally, to simplify the process of code\nsigning on CI, Tauri can install the certificate on the keychain for you if you\ndefine the `APPLE_CERTIFICATE` and `APPLE_CERTIFICATE_PASSWORD` environment\nvariables. 1. Open the `Keychain Access` app and find your certificate's\nkeychain entry. 2. Expand the entry, double click on the key item and select\n`Export \"$KEYNAME\"`. 3. Select the path to save the `.p12` file and define the\nexported certificate password. 4. Convert the `.p12` file to base64 running the\nfollowing script on the terminal: `openssl base64 -in /path/to/certificate.p12\n-out certificate-base64.txt`. 5. Set the contents of the\n`certificate-base64.txt` file to the `APPLE_CERTIFICATE` environment variable.\n6. Set the certificate password to the `APPLE_CERTIFICATE_PASSWORD` environment\nvariable. #### Authentication environment variables These variables are only\nrequired to notarize the application. Notarization is required when using a\nDeveloper ID Application certificate. - `APPLE_ID` and `APPLE_PASSWORD`: to\nauthenticate with your Apple ID, set the `APPLE_ID` to your Apple account email\n(example: `export APPLE_ID=tauri@icloud.com`) and the `APPLE_PASSWORD` to an\n[app-specific password](https://support.apple.com/en-ca/HT204397) for the Apple\naccount. - `APPLE_API_ISSUER` and `APPLE_API_KEY`: alternatively, you can\nauthenticate using an App Store Connect API key. Open the App Store Connect's\n[Users and Access page](https://appstoreconnect.apple.com/access/users), select\nthe `Keys` tab and click on the `Add` button; select a name and the `Developer`\naccess. The `APPLE_API_ISSUER` (`Issuer ID`) is presented above the keys table,\nand the `APPLE_API_KEY` is the value on the `Key ID` column on that table. You\nalso need to download the private key, which can only be done once and is only\nvisible after a page reload (the button is shown on the table row for the newly\ncreated key). The private key file must be saved on `./private_keys`,\n`~/private_keys`, `~/.private_keys` or `~/.appstoreconnect/private_keys`, as\nstated on the `$ xcrun altool --help` command. ### Building the application With\nall these environment variables set, the Tauri bundler will automatically sign\nand notarize your application when you run the `tauri build` command. ###\nExample The following example uses GitHub Actions to sign an application using\nthe [Tauri action](https://github.com/tauri-apps/tauri-action). On GitHub, we\nfirst define the environment variables we listed above as GitHub Secrets. You\ncan view this guide\n[https://docs.github.com/en/actions/reference/encrypted-secrets] to learn about\nGitHub secrets. Once we have established the GitHub Secrets we will create a\nGitHub publish workflow in `.github/workflows/main.yml`: ```yml name: \"publish\"\non: push: branches: - release jobs: publish-tauri: strategy: fail-fast: false\nmatrix: platform: [macos-latest] runs-on: ${{ matrix.platform }} steps: - uses:\nactions/checkout@v2 - name: setup node uses: actions/setup-node@v2 with:\nnode-version: 12 - name: install Rust stable uses: actions-rs/toolchain@v1 with:\ntoolchain: stable - name: install app dependencies and build it run: yarn &&\nyarn build - uses: tauri-apps/tauri-action@v0 env: GITHUB_TOKEN: ${{\nsecrets.GITHUB_TOKEN }} ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}\nAPPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }} APPLE_CERTIFICATE_PASSWORD:\n${{ secrets.APPLE_CERTIFICATE_PASSWORD }} APPLE_SIGNING_IDENTITY: ${{\nsecrets.APPLE_IDENTITY_ID }} APPLE_ID: ${{ secrets.APPLE_ID }} APPLE_PASSWORD:\n${{ secrets.APPLE_PASSWORD }} with: tagName: app-v__VERSION__ # the action\nautomatically replaces \\_\\_VERSION\\_\\_ with the app version releaseName: \"App\nv__VERSION__\" releaseBody: \"See the assets to download this version and\ninstall.\" releaseDraft: true prerelease: false ``` The workflow pulls the\nsecrets from GitHub and define them as environment variables before building the\napplication using the Tauri action. The output is a GitHub release with the\nsigned and notarized macOS application.","url":"https://tauri.studio/docs/guides/bundler/sign-macos"},{"id":"prose_docs_guides_bundler_sign_windows_md","title":"Windows - Code signing guide locally & with Github Actions","sections":["A","B","C","GitHub Secrets","Workflow Modifications"],"subSections":[],"code":[null],"text":"import Alert from '@theme/Alert' # Intro Code-signing will add a level of\nauthenticity to your application, while it is not required it can often improve\nthe user experience for your users. # Prerequisites - Windows - you can likely\nuse other platforms, but this tutorial is using Powershell native features. -\nCode signing certificate - you can aqquire one of these on services such as\nDigicert.com, Comodo.com, & Godaddy.com. In this guide we are using Comodo.com -\nA working tauri application # Getting Started There are a few things we will\nhave to do to get our windows installation prepared for code signing. This\nincludes converting our certificate to a speific format, installing this\ncertificate, & then decoding required information from certificate that is\nrequired by tauri. ## A. Convert your `.cer` to `.pfx` 1. You will need the\nfollowing: - certificate file (mine is `cert.cer`) - private key file (mine is\n`private-key.key`) 2. Open up a command prompt and change to your current\ndirectory using `cd Documents/Certs` 3. Convert your `.cer` to a `.pfx` using\n`openssl pkcs12 -export -in cert.cer -inkey private-key.key -out\ncertificate.pfx` 4. You will be prompted to enter an export password **DON'T\nFORGET IT!** ## B. Import your `.pfx` file into the keystore. We will now need\nto import our `.pfx` file. 1. Assign your export password to a variable using\n`$WINDOWS_PFX_PASSWORD = 'MYPASSWORD'` 2. Now Import the certificate using\n`Import-PfxCertificate -FilePath Certs/certificate.pfx -CertStoreLocation\nCert:\\CurrentUser\\My -Password (ConvertTo-SecureString -String\n$env:WINDOWS_PFX_PASSWORD -Force -AsPlainText)` ## C. Prepare Variables 1. We\nwill need the SHA-1 thumbprint of the certificate, you can get this using\n`openssl pkcs12 -info -in certificate.pfx` and look under for following ``` Bag\nAttributes localKeyID: A1 B1 A2 B2 A3 B3 A4 B4 A5 B5 A6 B6 A7 B7 A8 B8 A9 B9 A0\nB0 ``` 2. You will capture the `localKeyID` but with no spaces, in this example\nit would be `A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0`. This is our\n`certificateThumbprint`. 3. We will need the SHA digest algorythm used for your\ncertificate (Hint: this is likely `sha256` 4. We will also need a timestamp url,\nthis is a time server used to verify the time of the certificate signing. Im\nusing `http://timestamp.comodoca.com` but whoever you got your certificate from\nlikely has one aswell. # Prepare `tauri.conf.json` file 1. Now that we have our\n`certificateThumbprint`, `digestAlgorithm`, & `timestampUrl` we will open up the\n`tauri.conf.json`. 2. In the `tauri.conf.json` you will look for the `tauri` ->\n`bundle` -> `windows` section. You will see there are three variable for the\ninformation we have captured. Fill it out like below. ``` \"windows\": {\n\"certificateThumbprint\": \"A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0\",\n\"digestAlgorithm\": \"sha256\", \"timestampUrl\": \"http://timestamp.comodoca.com\" }\n``` 3. Save, and run `yarn | yarn build` 4. In the console output you will see\nthe following output. ``` info: signing app info: running signtool \"C:\\\\Program\nFiles (x86)\\\\Windows Kits\\\\10\\\\bin\\\\10.0.19041.0\\\\x64\\\\signtool.exe\" info: \"Done\nAdding Additional Store\\r\\nSuccessfully signed: APPLICATION FILE PATH HERE ```\nwhich shows you have successfully signed the `.exe`. And thats it! You have\nsuccessfully signed your .exe file. # BONUS: Sign your application with GitHub\nActions. We can also create a workflow to sign the application with GitHub\nactions, this will help automate your Publish time. ## GitHub Secrets We will\nneed to add a few GitHub secrets for the proper configuration of the GitHub\nAction. These can be named however you would like. - You can view\n[this](https://docs.github.com/en/actions/reference/encrypted-secrets) guide for\nhow to add GitHub secrets. The secrets we used are as follows | GitHub Secrets |\nValue for Variable | | :---: | :---: | |WINDOWS_CERTIFICATE| Base64 encoded\nversion of your .pfx certificate, can be done using this command `certutil\n-encode certificate.pfx base64cert.txt` |\n|WINDOWS_CERTIFICATE_PASSWORD|Certificate export password used on creation of\ncertificate .pfx| ## Workflow Modifications 1. We will need to add a step in the\nworkflow to properly import the certificate into the windows environment. This\nwork flow accomplishes the following 1. Assign GitHub secrets to environment\nvariables 2. Create a new `certificate` directory 3. Import\n`WINDOWS_CERTIFICATE` into tempCert.txt 4. Use `certutil` to decode the\ntempCert.txt from base64 into a `.pfx` file. 5. Remove tempCert.txt 6. Import\nthe `.pfx` file into the Cert store of Windows & convert the\n`WINDOWS_CERTIFICATE_PASSWORD` to a secure string to be used in the import\ncommand. 2. We will be using the tauri-action publish template available\n[here](https://github.com/tauri-apps/tauri-action) ``` name: \"publish\" on: push:\nbranches: - release jobs: publish-tauri: strategy: fail-fast: false matrix:\nplatform: [macos-latest, ubuntu-latest, windows-latest] runs-on: ${{\nmatrix.platform }} steps: - uses: actions/checkout@v2 - name: setup node uses:\nactions/setup-node@v1 with: node-version: 12 - name: install Rust stable uses:\nactions-rs/toolchain@v1 with: toolchain: stable - name: install webkit2gtk\n(ubuntu only) if: matrix.platform == 'ubuntu-latest' run: | sudo apt-get update\nsudo apt-get install -y webkit2gtk-4.0 - name: install app dependencies and\nbuild it run: yarn && yarn build - uses: tauri-apps/tauri-action@v0 env:\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tagName: app-v__VERSION__ # the\naction automatically replaces \\_\\_VERSION\\_\\_ with the app version releaseName:\n\"App v__VERSION__\" releaseBody: \"See the assets to download this version and\ninstall.\" releaseDraft: true prerelease: false ``` 3. Right above `-name:\ninstall app dependencies and build it` you will want to add the following step\n``` - name: import windows certificate if: matrix.platform == 'windows-latest'\nenv: WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}\nWINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }} run: |\nNew-Item -ItemType directory -Path certificate Set-Content -Path\ncertificate/tempCert.txt -Value $env:WINDOWS_PFX certutil -decode\ncertificate/tempCert.txt certificate/certificate.pfx Remove-Item -path\ncertificate -include tempCert.txt Import-PfxCertificate -FilePath\ncertificate/certificate.pfx -CertStoreLocation Cert:\\CurrentUser\\My -Password\n(ConvertTo-SecureString -String $env:WINDOWS_PFX_PASSWORD -Force -AsPlainText)\n``` 4. Save, and push to your repo. 5. You workflow will now be able to import\nyour windows certificate and import it into the github runner, allowing for\nautomated code-signing!","url":"https://tauri.studio/docs/guides/bundler/sign-windows"},{"id":"prose_docs_guides_patterns_about_patterns_md","title":"A word on patterns","sections":[],"subSections":[],"code":[],"text":"Tauri patterns are descriptions of use-cases that are entirely configurable\nwithin the `src-tauri/tauri.conf.json` file. These are not the limits of what\nTauri can do, and there are probably more out there. If you discover one, why\nnot get in touch and help us update this collection! If you haven't read about\nthe general design of Tauri, then it would make the most sense for you to visit\nthe [\"Get started\"](/docs/get-started/intro) and become familiar with the basic\narchitecture and terminology used in these patterns.","url":"https://tauri.studio/docs/guides/patterns/about-patterns"},{"id":"prose_docs_guides_patterns_bridge_md","title":"Bridge","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Rater from '@theme/Rater' import useBaseUrl from '@docusaurus/useBaseUrl'\n\nEase of Use Extensibility Performance Security\n\nBridge [{useBaseUrl('img/patterns/Bridge.png')}]\nPros:\n * Highly configurable\n * No Rust skills required\n\nCons:\n * Some WebAPIs unavailable\n * Challenge to implement\n\n## Description The Bridge recipe is a secure pattern where messages are passed\nbetween brokers via an implicit bridge using the API. It isolates functionality\nto scope and passes messages instead of functionality. ## Diagram import\nMermaid, { colors } from '@theme/Mermaid' F subgraph WEBVIEW F-.-E end D-->E\nE-->D B-->D D-->B subgraph RUST A==>H A-->B B-.-C B-.-G end A[Binary] B{Rust\nBroker} C[Subprocess 2] G[Subprocess 1] D(( API BRIDGE )) E{JS Broker} F[Window]\nH{Bootstrap} style D fill:#ccc,stroke:#333,stroke-width:4px,color:white style\nRUST fill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px\nstyle WEBVIEW\nfill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px`} /> ##\nConfiguration Here's what you need to add to your tauri.conf.json file: ```json\n\"tauri\": { \"allowlist\": { // all API values are default false \"all\": false, //\nuse this flag to enable all API features \"shell\": { \"execute\": false, // enable\napplication execution \"open\": false, // open link/path in the default app },\n\"fs\": { \"listFiles\": false, // list files in a directory \"readBinaryFile\":\nfalse, // read binary file from local filesystem \"readTextFile\": false, // read\ntext file from local filesystem \"setTitle\": false, // set the window title\n\"writeFile\": false // write file to local filesystem } } } ```","url":"https://tauri.studio/docs/guides/patterns/bridge"},{"id":"prose_docs_guides_patterns_cloudbridge_md","title":"Cloudbridge","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Rater from '@theme/Rater' import useBaseUrl from '@docusaurus/useBaseUrl'\n\nEase of Use Extensibility Performance Security\n\nCloudbridge [{useBaseUrl('img/patterns/Cloudbridge.png')}]\nPros:\n * All available features\n * No Rust skills required\n\nCons:\n * Largest bundle size\n * Hard to separate concerns\n\n## Description The Cloudbridge recipe combines the flexibility of a localhost\nand the security of the bridge. With so many features, it can be easy to get\nlost. ## Diagram import Mermaid, { colors } from '@theme/Mermaid' F2 H==>D2\nD2-->F2 F2-->D2 B-->D D-->B E2-->D D-->E2 subgraph WEBVIEW F2 E2 end subgraph\nSERVER D2 E-->D2 end subgraph RUST A==>H A-->B B-.-C end A[Binary] B{Rust\nBroker} C[Subprocess] D(( API BRIDGE )) E{JS Broker} D2(( localhost )) E[bundled\nresources] E2{JS Broker} F2[Window] H{Bootstrap} style D\nfill:#ccc,stroke:#333,stroke-width:4px,color:white style RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px style\nWEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px\nstyle SERVER fill:#49A24A,stroke:#2B6063,stroke-width:4px `} /> ## Configuration\nHere's what you need to add to your tauri.conf.json file: ```json \"tauri\": {\n\"allowlist\": { \"all\": true // enable entire API } } ```","url":"https://tauri.studio/docs/guides/patterns/cloudbridge"},{"id":"prose_docs_guides_patterns_cloudish_md","title":"Cloudish","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Rater from '@theme/Rater' import useBaseUrl from '@docusaurus/useBaseUrl'\n\nEase of Use Extensibility Performance Security\n\nCloudish [{useBaseUrl('img/patterns/Cloudish.png')}]\nPros:\n * Similar to a SPA web-app\n * No Rust skills required\n\nCons:\n * No access to Rust API\n * Uses a localhost server\n\n## Description The Cloudish recipe is a pattern for maximum flexibility and app\nperformance. It uses a localhost server, which means that your app will\ntechnically be available to other processes, like browsers and potentially other\ndevices on the network. All of your assets are baked into the binary, but served\nas if they were distinct files. ## Diagram import Mermaid, { colors } from\n'@theme/Mermaid' F H==>D D-->F F-->D subgraph RUST A==>H end subgraph WEBVIEW F\nend subgraph SERVER D E-->D end A[Binary] D(( localhost )) E[bundled resources]\nF[Window] H{Bootstrap} style RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px style\nWEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px\nstyle SERVER fill:#49A24A,stroke:#2B6063,stroke-width:4px`} /> ## Configuration\nHere's what you need to add to your tauri.conf.json file: ```json \"tauri\": {\n\"allowlist\": { \"all\": false // disable entire API } } ```","url":"https://tauri.studio/docs/guides/patterns/cloudish"},{"id":"prose_docs_guides_patterns_glui_md","title":"GLUI","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Alert from '@theme/Alert' import useBaseUrl from '@docusaurus/useBaseUrl'\nThis pattern is not available for now. import Rater from '@theme/Rater'\n\nEase of Use Extensibility Performance Security\n\nGLUI [{useBaseUrl('img/patterns/GLUI.png')}]\nPros:\n * Framebuffer FTW\n * Window events rigged\n\nCons:\n * Broken on your machine\n\n## Description The GLUI is a research pattern that we will use internally to\ntest approaches using a GLUTIN window. We’re not sure yet if it will make the\nfinal cut as a bona fide alternative to WebView, although early tests with\ntransparent and multiwindow are exciting. ## Diagram import Mermaid, { colors }\nfrom '@theme/Mermaid' H H==>G A-->D D-->G subgraph GLUTIN G end subgraph RUST A\nend A[Binary] D(Framebuffer) G[GL Window] H{Bootstrap} style GLUTIN\nstroke:${colors.blue.dark},stroke-width:4px style RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px`} />\n## Configuration Here's what you need to add to your tauri.conf.json file:\n```json \"tauri\": { \"allowlist\": { // all API endpoints are default false \"all\":\nfalse, // disable the api }, \"window\": { // not yet normative \"glutin\": true,\n\"webview\": false } } ```","url":"https://tauri.studio/docs/guides/patterns/glui"},{"id":"prose_docs_guides_patterns_hermit_md","title":"Hermit","sections":["Description","Diagram","Configuration"],"subSections":[],"code":["json"],"text":"import Rater from '@theme/Rater' import useBaseUrl from '@docusaurus/useBaseUrl'\n\nEase of Use Extensibility Performance Security\n\nHermit [{useBaseUrl('img/patterns/Hermit.png')}]\nPros:\n * Quick to make\n * Smallest size\n\nCons:\n * No remote resources\n * No access to API\n\n## Description The Hermit recipe is a pattern for ultimate application isolation\nwhere all logic is self-contained in the Window and the binary exists merely to\nbootstrap the Window. There is no communication back to Rust from the Window,\nthere is no localhost server, and the Window has no access to any remote\nresources. The Hermit is great for interactive Kiosk Mode and standalone HTML\nbased games. ## Diagram import Mermaid, { colors } from '@theme/Mermaid' H H==>F\nsubgraph WEBVIEW F end subgraph RUST A end A[fa:fa-cog Binary ]\nF[fa:fa-window-maximize Window] H{Bootstrap} style RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px style\nWEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px`}\n/> ## Configuration Here's what you need to add to your tauri.conf.json file:\n```json \"tauri\": { \"allowlist\": { \"all\": false, // disable and tree-shake all\napi functions } } ```","url":"https://tauri.studio/docs/guides/patterns/hermit"},{"id":"prose_docs_guides_patterns_lockdown_md","title":"Lockdown","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Rater from '@theme/Rater' import useBaseUrl from '@docusaurus/useBaseUrl'\n\nEase of Use Extensibility Performance Security\n\nLockdown [{useBaseUrl('img/patterns/Lockdown.png')}]\nPros:\n * Highest security rating\n * Elegant and powerful\n\nCons:\n * Rust skills required\n * No remote resources\n\n## Description The Lockdown recipe is a minimal usage of the [Bridge\npattern](/docs/guides/patterns/bridge), which only allows interaction between\nRust and the Window via expiring JS Promise Closures that are injected into the\nWindow by Rust and nulled as part of the callback. ## Diagram import Mermaid, {\ncolors } from '@theme/Mermaid' F G-.->B B-->G subgraph WEBVIEW G-->F end\nsubgraph RUST A-->B A==>H end A[Binary] B[API:Event] F[Window] G((Promise\nClosure)) H{Bootstrap} style RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px style\nWEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px`}\n/> ## Configuration Here's what you need to add to your tauri.conf.json file:\n```json \"tauri\": { \"allowlist\": {} // all API endpoints are default false } ```","url":"https://tauri.studio/docs/guides/patterns/lockdown"},{"id":"prose_docs_guides_patterns_multiwin_md","title":"Multiwin","sections":["Description","Diagram","Configuration"],"subSections":[],"code":[],"text":"import Alert from '@theme/Alert' import useBaseUrl from '@docusaurus/useBaseUrl'\nimport Rater from '@theme/Rater'\n\nEase of Use Extensibility Performance Security\n\nMultiwin [{useBaseUrl('img/patterns/Multiwin.png')}]\nPros:\n * Windows can be spawned or destroyed at runtime\n * Separation of concerns\n\nCons:\n * Somewhat complex\n\n## Description The Multiwin recipe will allow you to have multiple windows. ##\nDiagram import Mermaid, { colors } from '@theme/Mermaid' H H==>F H==>G subgraph\nWEBVIEW F end subgraph WINIT G end subgraph RUST A end A[Binary] F[Window]\nG[Window] H{Bootstrap} style WINIT stroke:${colors.blue.dark},stroke-width:4px\nstyle RUST\nfill:${colors.orange.light},stroke:${colors.orange.dark},stroke-width:4px style\nWEBVIEW fill:${colors.blue.light},stroke:${colors.blue.dark},stroke-width:4px`}\n/> ## Configuration Here's what you need to add to your tauri.conf.json file:\n```json \"tauri\": { \"allowlist\": {}, // all API endpoints are default false\n\"windows\": [{ \"title\": \"Window1\", \"label\": \"main\", }, { \"title\": \"Splash\",\n\"label\": \"splashscreen\" }] } ```","url":"https://tauri.studio/docs/guides/patterns/multiwin"},{"id":"prose_docs_guides_webdriver_ci_md","title":"Continuous Integration","sections":[],"subSections":[],"code":["yaml"],"text":"Utilizing Linux and some programs to create a fake display, it is possible to\nrun [WebDriver] tests with [`tauri-driver`] on your CI. The following example\nwill use the [WebdriverIO] example we [previously built together] and GitHub\nActions. This means the following assumptions: 1. The Tauri application is in\nthe repository root and the binary builds when running `cargo build --release`.\n2. The [WebDriverIO] test runner is in the `webdriver/webdriverio` directory and\nruns when `yarn test` is used in that directory. The following is a commented\nGitHub Actions workflow file at `.github/workflows/webdriver.yml` ```yaml # run\nthis action when the repository is pushed to on: [ push ] # the name of our\nworkflow name: WebDriver jobs: # a single job named test test: # the display\nname the test job name: WebDriverIO Test Runner # we want to run on the latest\nlinux environment runs-on: ubuntu-latest # the steps our job runs **in order**\nsteps: # checkout the code on the workflow runner - uses: actions/checkout@v2 #\ninstall system dependencies that Tauri needs to compile on Linux. # note the\nextra dependencies for `tauri-driver` to run which are `webkit2gtk-driver` and\n`xvfb` - name: Tauri dependencies run: >- sudo apt-get update && sudo apt-get\ninstall -y libgtk-3-dev libgtksourceview-3.0-dev webkit2gtk-4.0\nlibappindicator3-dev webkit2gtk-driver xvfb # install the latest Rust stable -\nname: Rust stable uses: actions-rs/toolchain@v1 with: toolchain: stable # we run\nour rust tests before the webdriver tests to avoid testing a broken application\n- name: Cargo test uses: actions-rs/cargo@v1 with: command: test # build a\nrelease build of our application to be used during our WebdriverIO tests - name:\nCargo build uses: actions-rs/cargo@v1 with: command: build args: --release #\ninstall the latest stable node version at the time of writing - name: Node v16\nuses: actions/setup-node@v2 with: node-version: 16.x # install our Node.js\ndependencies with Yarn - name: Yarn install run: yarn install working-directory:\nwebdriver/webdriverio # install the latest version of `tauri-driver`. # note:\nthe tauri-driver version is independent of any other Tauri versions - name:\nInstall tauri-driver uses: actions-rs/cargo@v1 with: command: install args:\ntauri-driver # run the WebdriverIO test suite. # we run it through `xvfb-run`\n(the dependency we installed earlier) to have a fake # display server which\nallows our application to run headless without any changes to the code - name:\nWebdriverIO run: xvfb-run yarn test working-directory: webdriver/webdriverio ```\n[WebDriver]: https://www.w3.org/TR/webdriver/ [`tauri-driver`]:\nhttps://crates.io/crates/tauri-driver [WebdriverIO]: https://webdriver.io/\n[previously built together]: example/webdriverio","url":"https://tauri.studio/docs/guides/webdriver/ci"},{"id":"prose_docs_guides_webdriver_introduction_md","title":"Introduction","sections":["System Dependencies","Example Application"],"subSections":["Linux","Windows"],"code":["sh"],"text":"import Alert from '@theme/Alert' Webdriver support for Tauri is still in\npre-alpha. Tooling that is dedicated to it such as [tauri-driver] is still in\nactive development and may change as necessary over time. Additionally, only\nWindows and Linux are currently supported. [WebDriver] is a standardized\ninterface to interact with web documents that is primarily intended for\nautomated testing. Tauri supports the [WebDriver] interface by leveraging the\nnative platform's [WebDriver] server underneath a cross-platform wrapper\n[`tauri-driver`]. ## System Dependencies Install the latest [`tauri-driver`] or\nupdate an existing installation by running: ```sh cargo install tauri-driver ```\nBecause we currently utilize the platform's native [WebDriver] server, there are\nsome requirements for running [`tauri-driver`] on supported platforms. Platform\nsupport is currently limited to Linux and Windows. ### Linux We use\n`WebKitWebDriver` on linux platforms. Check if this binary exists already\n(command `which WebKitWebDriver`) as some distributions bundle it with the\nregular webkit package. Other platforms may have a separate package for them\nsuch as `webkit2gtk-driver` on Debian based distributions. ### Windows Make sure\nto grab the version of [Microsoft Edge Driver] that matches your Windows' Edge\nversion that the application is being built and tested on. On up-to-date Window\ninstalls, this should almost always be the latest stable version. If the two\nversions do not match, you may experience your WebDriver testing suite hanging\nwhile trying to connect. The download contains a binary called\n`msedgedriver.exe`. [`tauri-driver`] looks for that binary in the `$PATH` so\nmake sure it's either available on the path or use the `--native-driver` option\non [`tauri-driver`]. On Windows CI machines, you may want to download this\nautomatically as part of the CI setup process to ensure the Edge and Edge Driver\nversions stay in sync. A guide on how to do this may be added at a later date.\n## Example Application The [next section](example/setup) of the guide will show\nstep-by-step how to create a minimal example application that is tested with\nWebDriver. If you prefer to just see the result of the guide and look over a\nfinished minimal codebase that utilizes it then you can look at\nhttps://github.com/chippers/hello_tauri. That example also comes with a CI\nscript to test with GitHub actions, but you may still be interested in the\n[WebDriver CI](ci) guide as it explains the concept a bit more. [WebDriver]:\nhttps://www.w3.org/TR/webdriver/ [`tauri-driver`]:\nhttps://crates.io/crates/tauri-driver [tauri-driver]:\nhttps://crates.io/crates/tauri-driver [Microsoft Edge Driver]:\nhttps://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/","url":"https://tauri.studio/docs/guides/webdriver/introduction"},{"id":"prose_docs_guides_webdriver_example_selenium_md","title":"Selenium","sections":["Create a Directory for the Tests","Initializing a Selenium Project","Testing","Running the Test Suite"],"subSections":[],"code":["sh",null,"text"],"text":"import Alert from '@theme/Alert' import Tabs from '@theme/Tabs' import TabItem\nfrom '@theme/TabItem' This [Selenium] guide expects you to have already gone\nthrough the [example Application setup] in order to follow step-by-step. The\ngeneral information may still be useful otherwise. This WebDriver testing\nexample will use [Selenium] and a popular Node.js testing suite. It is expected\nto already have Node.js installed, along with `npm` or `yarn` although the\n[finished example project] uses `yarn`. ## Create a Directory for the Tests\nLet's start off by creating a space in our project to write these tests. We are\ngoing to be using a nested directory for this example project as we will later\nalso go over other frameworks, but typically you will only need to use one.\nCreate the directory we will use with `mkdir -p webdriver/selenium`. The rest of\nthis guide will assume you are inside the `webdriver/selenium` directory. ##\nInitializing a Selenium Project We will be using a pre-existing `package.json`\nto bootstrap this test suite because we have already chosen specific\ndependencies to use and want to showcase a simple working solution. The bottom\nof this section has a collapsed guide on how to set it up from scratch.\n`package.json`: ```json { \"name\": \"selenium\", \"version\": \"1.0.0\", \"private\":\ntrue, \"scripts\": { \"test\": \"mocha\" }, \"dependencies\": { \"chai\": \"^4.3.4\",\n\"mocha\": \"^9.0.3\", \"selenium-webdriver\": \"^4.0.0-beta.4\" } } ``` We have a\nscript which runs [Mocha] as a test framework exposed as the `test` command. We\nalso have various dependencies that we will be using to run the tests. [Mocha]\nas the testing framework, [Chai] as the assertion library, and\n[`selenium-webdriver`] which is the Node.js [Selenium] package. Click me if you\nwant to see how to set a project up from scratch If you wanted to install the\ndependencies from scratch, just run the following command. ```sh npm install\nmocha chai selenium-webdriver ``` ```sh yarn add mocha chai selenium-webdriver\n``` I suggest also adding a `\"test\": \"mocha\"` item in the `package.json`\n`\"scripts\"` key so that running mocha can be called simply with ```sh npm test\n``` ```sh yarn test ``` ## Testing Unlike the [WebdriverIO Test\nSuite](webdriverio#config), Selenium does not come out of the box with a Test\nSuite and leaves it up to the developer to build those out. We chose [Mocha]\nwhich is pretty neutral, and not related to WebDrivers at all, so our script\nwill need to do a bit of work to set up everything for us in the right order.\n[Mocha] expects a testing file at `test/test.js` by default, so let's create\nthat file now. `test/test.js`: ```js const os = require(\"os\"); const path =\nrequire(\"path\"); const { expect } = require(\"chai\"); const { spawn, spawnSync }\n= require(\"child_process\"); const { Builder, By, Capabilities } =\nrequire(\"selenium-webdriver\"); // create the path to the expected application\nbinary const application = path.resolve( __dirname, \"..\", \"..\", \"..\", \"target\",\n\"release\", \"hello-tauri-webdriver\" ); // keep track of the webdriver instance we\ncreate let driver; // keep track of the tauri-driver process we start let\ntauriDriver; before(async function() { // set timeout to 2 minutes to allow the\nprogram to build if it needs to this.timeout(120000) // ensure the program has\nbeen built spawnSync(\"cargo\", [\"build\", \"--release\"]); // start tauri-driver\ntauriDriver = spawn( path.resolve(os.homedir(), \".cargo\", \"bin\",\n\"tauri-driver\"), [], { stdio: [null, process.stdout, process.stderr] } ); const\ncapabilities = new Capabilities(); capabilities.set(\"tauri:options\", {\napplication }); capabilities.setBrowserName(\"wry\"); // start the webdriver\nclient driver = await new Builder() .withCapabilities(capabilities)\n.usingServer(\"http://localhost:4444/\") .build(); }); after(async function() { //\nstop the webdriver session await driver.quit(); // kill the tauri-driver process\ntauriDriver.kill(); }); describe(\"Hello Tauri\", () => { it(\"should be cordial\",\nasync () => { const text = await driver.findElement(By.css(\"body >\nh1\")).getText(); expect(text).to.match(/^[hH]ello/); }); it(\"should be excited\",\nasync () => { const text = await driver.findElement(By.css(\"body >\nh1\")).getText(); expect(text).to.match(/!$/); }); it(\"should be easy on the\neyes\", async () => { // selenium returns color css values as rgb(r, g, b) const\ntext = await driver.findElement(By.css(\"body\")).getCssValue(\"background-color\");\nconst rgb = text.match(/^rgb\\((?\\d+), (?\\d+), (?\\d+)\\)$/).groups;\nexpect(rgb).to.have.all.keys('r','g','b'); const luma = 0.2126 * rgb.r + 0.7152\n* rgb.g + 0.0722 * rgb.b ; expect(luma).to.be.lessThan(100) }); }); ``` If you\nare familiar with JS testing frameworks, `describe`, `it`, and `expect` should\nlook familiar. We also have semi-complex `before()` and `after()` callbacks to\nsetup and teardown mocha. Lines that are not the tests themselves have comments\nexplaining what the setup and teardown code is doing. If you were familiar with\nthe Spec file from the [WebdriverIO example](webdriverio#spec), you will notice\na lot more code that isn't tests, as we have to set up a few more WebDriver\nrelated items. ## Running the Test Suite Now that we are all set up with our\ndependencies and our test script, lets run it! ```sh npm test ``` ```sh yarn\ntest ``` We should see output the following output: ```text ➜ selenium\ngit:(main) ✗ yarn test yarn run v1.22.11 $ mocha Hello Tauri ✔ should be cordial\n(120ms) ✔ should be excited ✔ should be easy on the eyes 3 passing (588ms) Done\nin 0.93s. ``` We can see that our `Hello Tauri` sweet we created with `decribe`\nhad all 3 items we created with `it` pass their tests! With [Selenium] and some\nhooking up to a test suite, we just enabled e2e testing without modifying our\nTauri application at all! [Selenium]: https://selenium.dev/ [finished example\nproject]: https://github.com/chippers/hello_tauri [example Application setup]:\nsetup [Mocha]: https://mochajs.org/ [Chai]: https://www.chaijs.com/\n[`selenium-webdriver`]: https://www.npmjs.com/package/selenium-webdriver","url":"https://tauri.studio/docs/guides/webdriver/example/selenium"},{"id":"prose_docs_guides_webdriver_example_setup_md","title":"Setup Example","sections":["Initializing a Cargo Project","Creating a Minimal Frontend","Adding Tauri to the Cargo Project","Tauri Configuration","Running the Example Application"],"subSections":[],"code":["html","toml","rust","json"],"text":"HELLO, TAURI!","url":"https://tauri.studio/docs/guides/webdriver/example/setup"},{"id":"prose_docs_guides_webdriver_example_webdriverio_md","title":"WebdriverIO","sections":["Create a Directory for the Tests","Initializing a WebdriverIO Project","Config","Spec","Running the Test Suite"],"subSections":[],"code":["sh","text"],"text":"import Alert from '@theme/Alert' import Tabs from '@theme/Tabs' import TabItem\nfrom '@theme/TabItem' This [WebdriverIO] guide expects you to have already gone\nthrough the [example Application setup] in order to follow step-by-step. The\ngeneral information may still be useful otherwise. This WebDriver testing\nexample will use [WebdriverIO] and its testing suite. It is expected to already\nhave Node.js installed, along with `npm` or `yarn` although the [finished\nexample project] uses `yarn`. ## Create a Directory for the Tests Let's start\noff by creating a space in our project to write these tests. We are going to be\nusing a nested directory for this example project as we will later also go over\nother frameworks, but typically you will only need to use one. Create the\ndirectory we will use with `mkdir -p webdriver/webdriverio`. The rest of this\nguide will assume you are inside the `webdriver/webdriverio` directory. ##\nInitializing a WebdriverIO Project We will be using a pre-existing\n`package.json` to bootstrap this test suite because we have already chosen\nspecific [WebdriverIO] config options and want to showcase a simple working\nsolution. The bottom of this section has a collapsed guide on how to set it up\nfrom scratch. `package.json`: ```json { \"name\": \"webdriverio\", \"version\":\n\"1.0.0\", \"private\": true, \"scripts\": { \"test\": \"wdio run wdio.conf.js\" },\n\"dependencies\": { \"@wdio/cli\": \"^7.9.1\" }, \"devDependencies\": {\n\"@wdio/local-runner\": \"^7.9.1\", \"@wdio/mocha-framework\": \"^7.9.1\",\n\"@wdio/spec-reporter\": \"^7.9.0\" } } ``` We have a script which runs a\n[WebdriverIO] config as a test suite exposed as the `test` command. We also have\nvarious dependencies that were added by the `@wdio/cli` command when we first\nset it up. In short, these dependencies are for the most simple setup using a\nlocal WebDriver runner, [Mocha] as the test framework, and a simple Spec\nReporter. Click me if you want to see how to set a project up from scratch The\nCLI is interactive, and you may choose the tools to work with yourself. Note\nthat you will likely diverge from the rest of the guide, and need to set up the\ndifferences yourself. Let's add the [WebdriverIO] CLI to this npm project. ```sh\nnpm install @wdio/cli ``` ```sh yarn add @wdio/cli ``` To then run the\ninteractive config command to set up a [WebdriverIO] test suite, you can then\nrun: ```sh npx wdio config ``` ```sh yarn wdio config ``` ## Config You may have\nnoticed that the `test` script in our `package.json` mentions a file\n`wdio.conf.js`. That's the [WebdriverIO] config file which controls most aspects\nof our testing suite. `wdio.conf.js`: ```js const os = require(\"os\"); const path\n= require(\"path\"); const { spawn, spawnSync } = require(\"child_process\"); //\nkeep track of the `tauri-driver` child process let tauriDriver; exports.config =\n{ specs: [\"./test/specs/**/*.js\"], maxInstances: 1, capabilities: [ {\nmaxInstances: 1, \"tauri:options\": { application:\n\"../../target/release/hello-tauri-webdriver\", }, }, ], reporters: [\"spec\"],\nframework: \"mocha\", mochaOpts: { ui: \"bdd\", timeout: 60000, }, // ensure the\nrust project is built since we expect this binary to exist for the webdriver\nsessions onPrepare: () => spawnSync(\"cargo\", [\"build\", \"--release\"]), // ensure\nwe are running `tauri-driver` before the session starts so that we can proxy the\nwebdriver requests beforeSession: () => (tauriDriver = spawn(\npath.resolve(os.homedir(), \".cargo\", \"bin\", \"tauri-driver\"), [], { stdio: [null,\nprocess.stdout, process.stderr] } )), // clean up the `tauri-driver` process we\nspawned at the start of the session afterSession: () => tauriDriver.kill(), };\n``` If you are interested in the properties on `exports.config` object, then I\n[suggest reading the documentation] for it. For non-WDIO specific items, there\nare comments explaining why we are running commands in `onPrepare`,\n`beforeSession`, and `afterSession`. We also have our specs set to\n`\"./test/specs/**/*.js\"`, so let's create a spec now. ## Spec A spec contains\nthe code that is testing your actual application. The test runner will load\nthese specs and automatically run them as it sees fit. Let's create our spec now\nin the directory we specified. `test/specs/example.e2e.js`: ```js // calculates\nthe luma from a hex color `#abcdef` function luma(hex) { if\n(hex.startsWith(\"#\")) { hex = hex.substring(1); } const rgb = parseInt(hex, 16);\nconst r = (rgb >> 16) & 0xff; const g = (rgb >> 8) & 0xff; const b = (rgb >> 0)\n& 0xff; return 0.2126 * r + 0.7152 * g + 0.0722 * b; } describe(\"Hello Tauri\",\n() => { it(\"should be cordial\", async () => { const header = await $(\"body >\nh1\"); const text = await header.getText(); expect(text).toMatch(/^[hH]ello/);\n}); it(\"should be excited\", async () => { const header = await $(\"body > h1\");\nconst text = await header.getText(); expect(text).toMatch(/!$/); }); it(\"should\nbe easy on the eyes\", async () => { const body = await $(\"body\"); const\nbackgroundColor = await body.getCSSProperty(\"background-color\");\nexpect(luma(backgroundColor.parsed.hex)).toBeLessThan(100); }); }); ``` The\n`luma` function on top is just a helper function for one of our tests and is not\nrelated to the actual testing of the application. If you are familiar with other\ntesting frameworks, you may notice similar functions being exposed that are used\nsuch as `describe`, `it`, and `expect`. The other APIs, such as items like `$`\nand the methods it exposes is covered by the [WebdriverIO API\ndocs](https://webdriver.io/docs/api). ## Running the Test Suite Now that we are\nall set up with a config and a spec, let's run it! ```sh npm test ``` ```sh yarn\ntest ``` We should see output the following output: ```text ➜ webdriverio\ngit:(main) ✗ yarn test yarn run v1.22.11 $ wdio run wdio.conf.js Execution of 1\nworkers started at 2021-08-17T08:06:10.279Z [0-0] RUNNING in undefined -\n/test/specs/example.e2e.js [0-0] PASSED in undefined -\n/test/specs/example.e2e.js \"spec\" Reporter:\n------------------------------------------------------------------ [wry 0.12.1\nlinux #0-0] Running: wry (v0.12.1) on linux [wry 0.12.1 linux #0-0] Session ID:\n81e0107b-4d38-4eed-9b10-ee80ca47bb83 [wry 0.12.1 linux #0-0] [wry 0.12.1 linux\n#0-0] » /test/specs/example.e2e.js [wry 0.12.1 linux #0-0] Hello Tauri [wry\n0.12.1 linux #0-0] ✓ should be cordial [wry 0.12.1 linux #0-0] ✓ should be\nexcited [wry 0.12.1 linux #0-0] ✓ should be easy on the eyes [wry 0.12.1 linux\n#0-0] [wry 0.12.1 linux #0-0] 3 passing (244ms) Spec Files: 1 passed, 1 total\n(100% completed) in 00:00:01 Done in 1.98s. ``` We see the Spec Reporter tell us\nthat all 3 tests from the `test/specs/example.e2e.js` file, along with the final\nreport `Spec Files: 1 passed, 1 total (100% completed) in 00:00:01`. Using the\n[WebdriverIO] test suite, we just easily enabled e2e testing for our Tauri\napplication from just a few lines of configuration and a single command to run\nit! Even better, we didn't have to modify the application at all. [WebdriverIO]:\nhttps://webdriver.io/ [finished example project]:\nhttps://github.com/chippers/hello_tauri [example Application setup]: setup\n[Mocha]: https://mochajs.org/ [suggest reading the documentation]:\nhttps://webdriver.io/docs/configurationfile","url":"https://tauri.studio/docs/guides/webdriver/example/webdriverio"}]