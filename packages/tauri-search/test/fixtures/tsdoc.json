{
	"id": 0,
	"name": "@tauri-apps/api",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"comment": {
		"shortText": "The Tauri API allows you to interface with the backend layer.",
		"text": "This module exposes all other modules as an object where the key is the module name, and the value is the module exports.",
		"tags": [
			{
				"tag": "example",
				"text": "\n```typescript\nimport { app, dialog, event, fs, globalShortcut } from '@tauri-apps/api'\n```"
			}
		]
	},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "app",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Get application metadata.",
				"text": "This package is also accessible with `window.__TAURI__.app` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 2,
					"name": "getName",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "app.ts",
							"line": 33,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "getName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the application name.",
								"returns": "A promise resolving to application name.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "getTauriVersion",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "app.ts",
							"line": 47,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "getTauriVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the tauri version.",
								"returns": "A promise resolving to tauri version.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 4,
					"name": "getVersion",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "app.ts",
							"line": 19,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 5,
							"name": "getVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the application version.",
								"returns": "A promise resolving to the application version.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2,
						6,
						4
					]
				}
			],
			"sources": [
				{
					"fileName": "app.ts",
					"line": 12,
					"character": 0
				}
			]
		},
		{
			"id": 8,
			"name": "cli",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Parse arguments from your Command Line Interface.",
				"text": "This package is also accessible with `window.__TAURI__.cli` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 9,
					"name": "ArgMatch",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 11,
							"name": "occurrences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Number of occurrences"
							},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 24,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 10,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "string if takes value\nboolean if flag\nstring[] or null if takes multiple values"
							},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 20,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								11,
								10
							]
						}
					],
					"sources": [
						{
							"fileName": "cli.ts",
							"line": 14,
							"character": 10
						}
					]
				},
				{
					"id": 15,
					"name": "CliMatches",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 16,
							"name": "args",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 33,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 17,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 18,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 19,
												"name": "name",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 9,
											"name": "ArgMatch"
										}
									}
								}
							}
						},
						{
							"id": 20,
							"name": "subcommand",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 34,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 12,
										"name": "SubcommandMatch"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								16,
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "cli.ts",
							"line": 32,
							"character": 10
						}
					]
				},
				{
					"id": 12,
					"name": "SubcommandMatch",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 14,
							"name": "matches",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 29,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 15,
								"name": "CliMatches"
							}
						},
						{
							"id": 13,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "cli.ts",
									"line": 28,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								14,
								13
							]
						}
					],
					"sources": [
						{
							"fileName": "cli.ts",
							"line": 27,
							"character": 10
						}
					]
				},
				{
					"id": 21,
					"name": "getMatches",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "cli.ts",
							"line": 42,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 22,
							"name": "getMatches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse the arguments provided to the current process and get the matches using the configuration defined `tauri.conf.json > tauri > cli`.",
								"returns": "A promise resolving to the parsed arguments.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 15,
										"name": "CliMatches"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						9,
						15,
						12
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						21
					]
				}
			],
			"sources": [
				{
					"fileName": "cli.ts",
					"line": 12,
					"character": 0
				}
			]
		},
		{
			"id": 23,
			"name": "clipboard",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Read and write to the system clipboard.",
				"text": "This package is also accessible with `window.__TAURI__.clipboard` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 27,
					"name": "readText",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "clipboard.ts",
							"line": 34,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 28,
							"name": "readText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the clipboard content as plain text.",
								"returns": "A promise resolving to the clipboard content as plain text.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "writeText",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "clipboard.ts",
							"line": 19,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "writeText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Writes a plain text to the clipboard.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 26,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						27,
						24
					]
				}
			],
			"sources": [
				{
					"fileName": "clipboard.ts",
					"line": 12,
					"character": 0
				}
			]
		},
		{
			"id": 29,
			"name": "dialog",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Native system dialogs for opening and saving files.",
				"text": "This package is also accessible with `window.__TAURI__.dialog` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"dialog\": {\n        \"all\": true, // enable all dialog APIs\n        \"open\": true, // enable file open API\n        \"save\": true // enable file save API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 30,
					"name": "DialogFilter",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extension filters for the file dialog."
					},
					"children": [
						{
							"id": 32,
							"name": "extensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Extensions to filter, without a `.` prefix.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\nextensions: ['svg', 'png']\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 41,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 31,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Filter name."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 33,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								32,
								31
							]
						}
					],
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 31,
							"character": 10
						}
					]
				},
				{
					"id": 33,
					"name": "OpenDialogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options for the open dialog."
					},
					"children": [
						{
							"id": 35,
							"name": "defaultPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial directory or file path. It must exist."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 49,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 37,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the dialog is a directory selection or not."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 53,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 34,
							"name": "filters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The filters of the dialog."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 47,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 30,
									"name": "DialogFilter"
								}
							}
						},
						{
							"id": 36,
							"name": "multiple",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the dialog allows multiple selection or not."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 51,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								35,
								37,
								34,
								36
							]
						}
					],
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 45,
							"character": 10
						}
					]
				},
				{
					"id": 38,
					"name": "SaveDialogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options for the save dialog."
					},
					"children": [
						{
							"id": 40,
							"name": "defaultPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Initial directory or file path.\nIf it's a directory path, the dialog interface will change to that folder.\nIf it's not an existing directory, the file name will be set to the dialog's file name input and the dialog will be set to the parent folder."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 65,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 39,
							"name": "filters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The filters of the dialog."
							},
							"sources": [
								{
									"fileName": "dialog.ts",
									"line": 59,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 30,
									"name": "DialogFilter"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								40,
								39
							]
						}
					],
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 57,
							"character": 10
						}
					]
				},
				{
					"id": 50,
					"name": "ask",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 133,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 51,
							"name": "ask",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows a question dialog with `Yes` and `No` buttons.",
								"returns": "A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n"
							},
							"parameters": [
								{
									"id": 52,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The message to show."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 53,
									"name": "title",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The dialog's title. Defaults to the application name.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "confirm",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 152,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "confirm",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows a question dialog with `Ok` and `Cancel` buttons.",
								"returns": "A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n"
							},
							"parameters": [
								{
									"id": 56,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The message to show."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 57,
									"name": "title",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The dialog's title. Defaults to the application name.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 47,
					"name": "message",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 115,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 48,
							"name": "message",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shows a message dialog with an `Ok` button.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 49,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The message to show.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 41,
					"name": "open",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 73,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 42,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Open a file/directory selection dialog",
								"returns": "A promise resolving to the selected path(s)\n"
							},
							"parameters": [
								{
									"id": 43,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 33,
										"name": "OpenDialogOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 44,
					"name": "save",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "dialog.ts",
							"line": 94,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 45,
							"name": "save",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Open a file/directory save dialog.",
								"returns": "A promise resolving to the selected path.\n"
							},
							"parameters": [
								{
									"id": 46,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 38,
										"name": "SaveDialogOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						30,
						33,
						38
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						50,
						54,
						47,
						41,
						44
					]
				}
			],
			"sources": [
				{
					"fileName": "dialog.ts",
					"line": 28,
					"character": 0
				}
			]
		},
		{
			"id": 58,
			"name": "event",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The event system allows you to emit events to the backend and listen to events from it.",
				"text": "This package is also accessible with `window.__TAURI__.event` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 59,
					"name": "Event",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 60,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Event name"
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 19,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 61,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Event identifier used to unlisten"
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 21,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 62,
							"name": "payload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Event payload"
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 23,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 63,
								"name": "T"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								60,
								61,
								62
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 17,
							"character": 10
						}
					],
					"typeParameter": [
						{
							"id": 63,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 65,
					"name": "EventCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 44,
							"character": 5
						}
					],
					"typeParameter": [
						{
							"id": 69,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 66,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 44,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 67,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 68,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 59,
												"typeArguments": [
													{
														"type": "reference",
														"id": 69,
														"name": "T"
													}
												],
												"name": "Event"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 64,
					"name": "EventName",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 26,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "tauri://update"
									},
									{
										"type": "literal",
										"value": "tauri://update-available"
									},
									{
										"type": "literal",
										"value": "tauri://update-install"
									},
									{
										"type": "literal",
										"value": "tauri://update-status"
									},
									{
										"type": "literal",
										"value": "tauri://resize"
									},
									{
										"type": "literal",
										"value": "tauri://move"
									},
									{
										"type": "literal",
										"value": "tauri://close-requested"
									},
									{
										"type": "literal",
										"value": "tauri://focus"
									},
									{
										"type": "literal",
										"value": "tauri://blur"
									},
									{
										"type": "literal",
										"value": "tauri://scale-change"
									},
									{
										"type": "literal",
										"value": "tauri://menu"
									},
									{
										"type": "literal",
										"value": "tauri://file-drop"
									},
									{
										"type": "literal",
										"value": "tauri://file-drop-hover"
									},
									{
										"type": "literal",
										"value": "tauri://file-drop-cancelled"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "LiteralUnion"
					}
				},
				{
					"id": 70,
					"name": "UnlistenFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 46,
							"character": 5
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 71,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 46,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 72,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 83,
					"name": "emit",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 112,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 84,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Emits an event to the backend.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 85,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Event name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 86,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 73,
					"name": "listen",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 72,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "listen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Listen to an event from the backend.",
								"returns": "A promise resolving to a function to unlisten to the event.\n"
							},
							"typeParameter": [
								{
									"id": 75,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 76,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Event name"
									},
									"type": {
										"type": "reference",
										"id": 64,
										"name": "EventName"
									}
								},
								{
									"id": 77,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Event handler callback"
									},
									"type": {
										"type": "reference",
										"id": 65,
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"name": "T"
											}
										],
										"name": "EventCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 70,
										"name": "UnlistenFn"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "once",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "event.ts",
							"line": 95,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 79,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Listen to an one-off event from the backend.",
								"returns": "A promise resolving to a function to unlisten to the event.\n"
							},
							"typeParameter": [
								{
									"id": 80,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 81,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Event name"
									},
									"type": {
										"type": "reference",
										"id": 64,
										"name": "EventName"
									}
								},
								{
									"id": 82,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Event handler callback"
									},
									"type": {
										"type": "reference",
										"id": 65,
										"typeArguments": [
											{
												"type": "reference",
												"id": 80,
												"name": "T"
											}
										],
										"name": "EventCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 70,
										"name": "UnlistenFn"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						59
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						65,
						64,
						70
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						83,
						73,
						78
					]
				}
			],
			"sources": [
				{
					"fileName": "event.ts",
					"line": 12,
					"character": 0
				}
			]
		},
		{
			"id": 87,
			"name": "fs",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Access the file system.",
				"text": "This package is also accessible with `window.__TAURI__.fs` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"fs\": {\n        \"all\": true, // enable all FS APIs\n        \"readTextFile\": true,\n        \"readBinaryFile\": true,\n        \"writeFile\": true,\n        \"writeBinaryFile\": true,\n        \"readDir\": true,\n        \"copyFile\": true,\n        \"createDir\": true,\n        \"removeDir\": true,\n        \"removeFile\": true,\n        \"renameFile\": true\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 124,
					"name": "Dir",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 371,
							"character": 19
						}
					],
					"target": 88
				},
				{
					"id": 88,
					"name": "BaseDirectory",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 106,
							"name": "App",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 56,
									"character": 2
								}
							],
							"defaultValue": "18"
						},
						{
							"id": 89,
							"name": "Audio",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 39,
									"character": 2
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 90,
							"name": "Cache",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 40,
									"character": 2
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 91,
							"name": "Config",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 41,
									"character": 2
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 107,
							"name": "Current",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 57,
									"character": 2
								}
							],
							"defaultValue": "19"
						},
						{
							"id": 92,
							"name": "Data",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 42,
									"character": 2
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 94,
							"name": "Desktop",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 44,
									"character": 2
								}
							],
							"defaultValue": "6"
						},
						{
							"id": 95,
							"name": "Document",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 45,
									"character": 2
								}
							],
							"defaultValue": "7"
						},
						{
							"id": 96,
							"name": "Download",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 46,
									"character": 2
								}
							],
							"defaultValue": "8"
						},
						{
							"id": 97,
							"name": "Executable",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 47,
									"character": 2
								}
							],
							"defaultValue": "9"
						},
						{
							"id": 98,
							"name": "Font",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 48,
									"character": 2
								}
							],
							"defaultValue": "10"
						},
						{
							"id": 99,
							"name": "Home",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 49,
									"character": 2
								}
							],
							"defaultValue": "11"
						},
						{
							"id": 93,
							"name": "LocalData",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 43,
									"character": 2
								}
							],
							"defaultValue": "5"
						},
						{
							"id": 108,
							"name": "Log",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 58,
									"character": 2
								}
							],
							"defaultValue": "20"
						},
						{
							"id": 100,
							"name": "Picture",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 50,
									"character": 2
								}
							],
							"defaultValue": "12"
						},
						{
							"id": 101,
							"name": "Public",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 51,
									"character": 2
								}
							],
							"defaultValue": "13"
						},
						{
							"id": 105,
							"name": "Resource",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 55,
									"character": 2
								}
							],
							"defaultValue": "17"
						},
						{
							"id": 102,
							"name": "Runtime",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 52,
									"character": 2
								}
							],
							"defaultValue": "14"
						},
						{
							"id": 103,
							"name": "Template",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 53,
									"character": 2
								}
							],
							"defaultValue": "15"
						},
						{
							"id": 104,
							"name": "Video",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 54,
									"character": 2
								}
							],
							"defaultValue": "16"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								106,
								89,
								90,
								91,
								107,
								92,
								94,
								95,
								96,
								97,
								98,
								99,
								93,
								108,
								100,
								101,
								105,
								102,
								103,
								104
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 38,
							"character": 12
						}
					]
				},
				{
					"id": 120,
					"name": "FileEntry",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 123,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Children of this entry if it's a directory; null otherwise"
							},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 88,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 120,
									"name": "FileEntry"
								}
							}
						},
						{
							"id": 122,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Name of the directory/file\ncan be null if the path terminates with `..`"
							},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 86,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 121,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 81,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								123,
								122,
								121
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 80,
							"character": 10
						}
					]
				},
				{
					"id": 117,
					"name": "FsBinaryFileOption",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 119,
							"name": "contents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 77,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayBuffer"
							}
						},
						{
							"id": 118,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 76,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								119,
								118
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 75,
							"character": 10
						}
					]
				},
				{
					"id": 111,
					"name": "FsDirOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 112,
							"name": "dir",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 66,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 88,
								"name": "BaseDirectory"
							}
						},
						{
							"id": 113,
							"name": "recursive",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 67,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								112,
								113
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 65,
							"character": 10
						}
					]
				},
				{
					"id": 109,
					"name": "FsOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 110,
							"name": "dir",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 62,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 88,
								"name": "BaseDirectory"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								110
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 61,
							"character": 10
						}
					]
				},
				{
					"id": 114,
					"name": "FsTextFileOption",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 116,
							"name": "contents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 72,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 115,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "fs.ts",
									"line": 71,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								116,
								115
							]
						}
					],
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 70,
							"character": 10
						}
					]
				},
				{
					"id": 153,
					"name": "copyFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 301,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 154,
							"name": "copyFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copys a file to a destination.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 155,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A path of the file to copy."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 156,
									"name": "destination",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A path for the destination file."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 157,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 145,
					"name": "createDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 257,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 146,
							"name": "createDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a directory.\nIf one of the path's parent components doesn't exist\nand the `recursive` option isn't set to true, the promise will be rejected.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 147,
									"name": "dir",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the directory to create."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 148,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 111,
										"name": "FsDirOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 129,
					"name": "readBinaryFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 119,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 130,
							"name": "readBinaryFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reads a file as byte array.",
								"returns": "A promise resolving to the file bytes array.\n"
							},
							"parameters": [
								{
									"id": 131,
									"name": "filePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the file."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 132,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 141,
					"name": "readDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 234,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 142,
							"name": "readDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "List directory files.",
								"returns": "A promise resolving to the directory entries.\n"
							},
							"parameters": [
								{
									"id": 143,
									"name": "dir",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the directory to read."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 144,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 111,
										"name": "FsDirOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 120,
											"name": "FileEntry"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 125,
					"name": "readTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 98,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 126,
							"name": "readTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reads a file as UTF-8 encoded string.",
								"returns": "A promise resolving to the file content as a UTF-8 encoded string.\n"
							},
							"parameters": [
								{
									"id": 127,
									"name": "filePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the file."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 128,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 149,
					"name": "removeDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 279,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 150,
							"name": "removeDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a directory.\nIf the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 151,
									"name": "dir",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the directory to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 152,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 111,
										"name": "FsDirOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 158,
					"name": "removeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 324,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "removeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes a file.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 160,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path to the file to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 161,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 162,
					"name": "renameFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 346,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 163,
							"name": "renameFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Renames a file.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 164,
									"name": "oldPath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A path of the file to rename."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 165,
									"name": "newPath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A path of the new file name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 166,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 137,
					"name": "writeBinaryFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 205,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 138,
							"name": "writeBinaryFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Writes a binary file.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 139,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Write configuration object."
									},
									"type": {
										"type": "reference",
										"id": 117,
										"name": "FsBinaryFileOption"
									}
								},
								{
									"id": 140,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 133,
					"name": "writeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "fs.ts",
							"line": 140,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 134,
							"name": "writeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Writes a text file.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 135,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "File configuration object."
									},
									"type": {
										"type": "reference",
										"id": 114,
										"name": "FsTextFileOption"
									}
								},
								{
									"id": 136,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Configuration object."
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "FsOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						124
					]
				},
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						88
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						120,
						117,
						111,
						109,
						114
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						153,
						145,
						129,
						141,
						125,
						149,
						158,
						162,
						137,
						133
					]
				}
			],
			"sources": [
				{
					"fileName": "fs.ts",
					"line": 36,
					"character": 0
				}
			]
		},
		{
			"id": 167,
			"name": "globalShortcut",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Register global shortcuts.",
				"text": "This package is also accessible with `window.__TAURI__.globalShortcut` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"globalShortcut\": {\n        \"all\": true // enable all global shortcut APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 168,
					"name": "ShortcutHandler",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 29,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 169,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "globalShortcut.ts",
									"line": 29,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 170,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 171,
											"name": "shortcut",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 180,
					"name": "isRegistered",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 79,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 181,
							"name": "isRegistered",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Determines whether the given shortcut is registered by this application or not.",
								"returns": "A promise resolving to the state.\n"
							},
							"parameters": [
								{
									"id": 182,
									"name": "shortcut",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 172,
					"name": "register",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 38,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 173,
							"name": "register",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Register a global shortcut.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 174,
									"name": "shortcut",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 175,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Shortcut handler callback - takes the triggered shortcut as argument"
									},
									"type": {
										"type": "reference",
										"id": 168,
										"name": "ShortcutHandler"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 176,
					"name": "registerAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 59,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 177,
							"name": "registerAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Register a collection of global shortcuts.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 178,
									"name": "shortcuts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 179,
									"name": "handler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Shortcut handler callback - takes the triggered shortcut as argument"
									},
									"type": {
										"type": "reference",
										"id": 168,
										"name": "ShortcutHandler"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 183,
					"name": "unregister",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 95,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 184,
							"name": "unregister",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unregister a global shortcut.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 185,
									"name": "shortcut",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 186,
					"name": "unregisterAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "globalShortcut.ts",
							"line": 110,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "unregisterAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unregisters all shortcuts registered by the application.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						168
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						180,
						172,
						176,
						183,
						186
					]
				}
			],
			"sources": [
				{
					"fileName": "globalShortcut.ts",
					"line": 26,
					"character": 0
				}
			]
		},
		{
			"id": 188,
			"name": "http",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Access the HTTP client written in Rust.",
				"text": "This package is also accessible with `window.__TAURI__.http` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"http\": {\n        \"all\": true, // enable all http APIs\n        \"request\": true // enable HTTP request API\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 280,
					"name": "ResponseType",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 283,
							"name": "Binary",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 37,
									"character": 2
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 281,
							"name": "JSON",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 35,
									"character": 2
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 282,
							"name": "Text",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 36,
									"character": 2
								}
							],
							"defaultValue": "2"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								283,
								281,
								282
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 34,
							"character": 5
						}
					]
				},
				{
					"id": 212,
					"name": "Body",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The body object to be used on POST and PUT requests."
					},
					"children": [
						{
							"id": 230,
							"name": "payload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 45,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						},
						{
							"id": 229,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 44,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 222,
							"name": "bytes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 93,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 223,
									"name": "bytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new byte array body.",
										"returns": "The body object ready to be used on the POST and PUT requests.\n"
									},
									"parameters": [
										{
											"id": 224,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 212,
										"name": "Body"
									}
								}
							]
						},
						{
							"id": 213,
							"name": "form",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 60,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 214,
									"name": "form",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new form data body.",
										"returns": "The body object ready to be used on the POST and PUT requests.\n"
									},
									"parameters": [
										{
											"id": 215,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The body data.\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"id": 192,
														"name": "Part"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 212,
										"name": "Body"
									}
								}
							]
						},
						{
							"id": 216,
							"name": "json",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 71,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 217,
									"name": "json",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new JSON body.",
										"returns": "The body object ready to be used on the POST and PUT requests.\n"
									},
									"parameters": [
										{
											"id": 218,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The body JSON object.\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 212,
										"name": "Body"
									}
								}
							]
						},
						{
							"id": 219,
							"name": "text",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 82,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 220,
									"name": "text",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new UTF-8 string body.",
										"returns": "The body object ready to be used on the POST and PUT requests.\n"
									},
									"parameters": [
										{
											"id": 221,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 212,
										"name": "Body"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								230,
								229
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								222,
								213,
								216,
								219
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 43,
							"character": 6
						}
					]
				},
				{
					"id": 231,
					"name": "Client",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 235,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 158,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 264,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 302,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 265,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes a DELETE request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 266,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 267,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request URL."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 268,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The request options."
											},
											"type": {
												"type": "reference",
												"id": 202,
												"name": "RequestOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 266,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 236,
							"name": "drop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 169,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 237,
									"name": "drop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Drops the client instance.",
										"returns": "\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 242,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 230,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 243,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes a GET request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 244,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 245,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request URL."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 246,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The request options."
											},
											"type": {
												"type": "reference",
												"id": 202,
												"name": "RequestOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 244,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 259,
							"name": "patch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 287,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 260,
									"name": "patch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes a PATCH request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 261,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 262,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request URL."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 263,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The request options."
											},
											"type": {
												"type": "reference",
												"id": 202,
												"name": "RequestOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 261,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 247,
							"name": "post",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 246,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 248,
									"name": "post",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes a POST request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 249,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 250,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request URL."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 251,
											"name": "body",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The body of the request."
											},
											"type": {
												"type": "reference",
												"id": 212,
												"name": "Body"
											}
										},
										{
											"id": 252,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The request options."
											},
											"type": {
												"type": "reference",
												"id": 202,
												"name": "RequestOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 249,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 253,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 267,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 254,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes a PUT request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 255,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 256,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request URL."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 257,
											"name": "body",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The body of the request."
											},
											"type": {
												"type": "reference",
												"id": 212,
												"name": "Body"
											}
										},
										{
											"id": 258,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Request options."
											},
											"type": {
												"type": "reference",
												"id": 202,
												"name": "RequestOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 255,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 238,
							"name": "request",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 185,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 239,
									"name": "request",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Makes an HTTP request.",
										"returns": "A promise resolving to the response.\n"
									},
									"typeParameter": [
										{
											"id": 240,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 241,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The request options."
											},
											"type": {
												"type": "reference",
												"id": 194,
												"name": "HttpOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"typeArguments": [
													{
														"type": "reference",
														"id": 240,
														"name": "T"
													}
												],
												"name": "Response"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								235
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								264,
								236,
								242,
								259,
								247,
								253,
								238
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 157,
							"character": 6
						}
					]
				},
				{
					"id": 269,
					"name": "Response",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Response object."
					},
					"children": [
						{
							"id": 278,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The response data."
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 145,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "T"
							}
						},
						{
							"id": 277,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The response headers."
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 143,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 276,
							"name": "ok",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A boolean indicating whether the response was successful (status in the range 200–299) or not."
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 141,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 275,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The response status code."
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 139,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 274,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The request URL."
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 137,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								278,
								277,
								276,
								275,
								274
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 135,
							"character": 6
						}
					],
					"typeParameter": [
						{
							"id": 279,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 189,
					"name": "ClientOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 191,
							"name": "connectTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 31,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 190,
							"name": "maxRedirections",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 30,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								191,
								190
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 29,
							"character": 10
						}
					]
				},
				{
					"id": 194,
					"name": "HttpOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options object sent to the backend."
					},
					"children": [
						{
							"id": 199,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 116,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 212,
								"name": "Body"
							}
						},
						{
							"id": 197,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 114,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 195,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 112,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 193,
								"name": "HttpVerb"
							}
						},
						{
							"id": 198,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 115,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 201,
							"name": "responseType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 118,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 280,
								"name": "ResponseType"
							}
						},
						{
							"id": 200,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 117,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 196,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "http.ts",
									"line": 113,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								199,
								197,
								195,
								198,
								201,
								200,
								196
							]
						}
					],
					"sources": [
						{
							"fileName": "http.ts",
							"line": 111,
							"character": 10
						}
					]
				},
				{
					"id": 203,
					"name": "FetchOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Options for the `fetch` API."
					},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 124,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 194,
								"name": "HttpOptions"
							},
							{
								"type": "literal",
								"value": "url"
							}
						],
						"name": "Omit"
					}
				},
				{
					"id": 193,
					"name": "HttpVerb",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "The request HTTP verb."
					},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 99,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "GET"
							},
							{
								"type": "literal",
								"value": "POST"
							},
							{
								"type": "literal",
								"value": "PUT"
							},
							{
								"type": "literal",
								"value": "DELETE"
							},
							{
								"type": "literal",
								"value": "PATCH"
							},
							{
								"type": "literal",
								"value": "HEAD"
							},
							{
								"type": "literal",
								"value": "OPTIONS"
							},
							{
								"type": "literal",
								"value": "CONNECT"
							},
							{
								"type": "literal",
								"value": "TRACE"
							}
						]
					}
				},
				{
					"id": 192,
					"name": "Part",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 40,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				},
				{
					"id": 202,
					"name": "RequestOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Request options."
					},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 122,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 194,
								"name": "HttpOptions"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "method"
									},
									{
										"type": "literal",
										"value": "url"
									}
								]
							}
						],
						"name": "Omit"
					}
				},
				{
					"id": 207,
					"name": "fetch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 338,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 208,
							"name": "fetch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform an HTTP request using the default client.",
								"returns": "The response object.\n"
							},
							"typeParameter": [
								{
									"id": 209,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 210,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The request URL."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 211,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The fetch options."
									},
									"type": {
										"type": "reference",
										"id": 203,
										"name": "FetchOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 269,
										"typeArguments": [
											{
												"type": "reference",
												"id": 209,
												"name": "T"
											}
										],
										"name": "Response"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 204,
					"name": "getClient",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "http.ts",
							"line": 318,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 205,
							"name": "getClient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new client using the specified options.",
								"returns": "A promise resolving to the client instance.\n"
							},
							"parameters": [
								{
									"id": 206,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Client configuration.\n"
									},
									"type": {
										"type": "reference",
										"id": 189,
										"name": "ClientOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 231,
										"name": "Client"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						280
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						212,
						231,
						269
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						189,
						194
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						203,
						193,
						192,
						202
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						207,
						204
					]
				}
			],
			"sources": [
				{
					"fileName": "http.ts",
					"line": 27,
					"character": 0
				}
			]
		},
		{
			"id": 284,
			"name": "notification",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Send toast notifications (brief auto-expiring OS window element) to your user.\nCan also be used with the Notification Web API.",
				"text": "This package is also accessible with `window.__TAURI__.notification` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"notification\": {\n        \"all\": true // enable all notification APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 285,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options to send a notification."
					},
					"children": [
						{
							"id": 287,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional notification body."
							},
							"sources": [
								{
									"fileName": "notification.ts",
									"line": 36,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 288,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional notification icon."
							},
							"sources": [
								{
									"fileName": "notification.ts",
									"line": 38,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 286,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Notification title."
							},
							"sources": [
								{
									"fileName": "notification.ts",
									"line": 34,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								287,
								288,
								286
							]
						}
					],
					"sources": [
						{
							"fileName": "notification.ts",
							"line": 32,
							"character": 10
						}
					]
				},
				{
					"id": 289,
					"name": "Permission",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Possible permission values."
					},
					"sources": [
						{
							"fileName": "notification.ts",
							"line": 42,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "granted"
							},
							{
								"type": "literal",
								"value": "denied"
							},
							{
								"type": "literal",
								"value": "default"
							}
						]
					}
				},
				{
					"id": 295,
					"name": "isPermissionGranted",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "notification.ts",
							"line": 49,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 296,
							"name": "isPermissionGranted",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the permission to send notifications is granted.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 293,
					"name": "requestPermission",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "notification.ts",
							"line": 66,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 294,
							"name": "requestPermission",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Requests the permission to send notifications.",
								"returns": "A promise resolving to whether the user granted the permission or not.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 289,
										"name": "Permission"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 290,
					"name": "sendNotification",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "notification.ts",
							"line": 75,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 291,
							"name": "sendNotification",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sends a notification to the user."
							},
							"parameters": [
								{
									"id": 292,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Notification options.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 285,
												"name": "Options"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						285
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						289
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						295,
						293,
						290
					]
				}
			],
			"sources": [
				{
					"fileName": "notification.ts",
					"line": 27,
					"character": 0
				}
			]
		},
		{
			"id": 786,
			"name": "os",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Provides operating system-related utility methods and properties.",
				"text": "This package is also accessible with `window.__TAURI__.fs` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"os\": {\n        \"all\": true, // enable all Os APIs\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security."
			},
			"children": [
				{
					"id": 787,
					"name": "EOL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "The operating system-specific end-of-line marker.\n- `\\n` on POSIX\n- `\\r\\n` on Windows"
					},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 35,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "\r\n"
							},
							{
								"type": "literal",
								"value": "\n"
							}
						]
					},
					"defaultValue": "..."
				},
				{
					"id": 794,
					"name": "arch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 93,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 795,
							"name": "arch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the operating system CPU architecture for which the tauri app was compiled. Possible values are `'x86'`, `'x86_64'`, `'arm'`, `'aarch64'`, `'mips'`, `'mips64'`, `'powerpc'`, `'powerpc64'`, `'riscv64'`, `'s390x'`, `'sparc64'`"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "x86"
													},
													{
														"type": "literal",
														"value": "x86_64"
													},
													{
														"type": "literal",
														"value": "arm"
													},
													{
														"type": "literal",
														"value": "aarch64"
													},
													{
														"type": "literal",
														"value": "mips"
													},
													{
														"type": "literal",
														"value": "mips64"
													},
													{
														"type": "literal",
														"value": "powerpc"
													},
													{
														"type": "literal",
														"value": "powerpc64"
													},
													{
														"type": "literal",
														"value": "riscv64"
													},
													{
														"type": "literal",
														"value": "s390x"
													},
													{
														"type": "literal",
														"value": "sparc64"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "LiteralUnion"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 788,
					"name": "platform",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 41,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 789,
							"name": "platform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a string identifying the operating system platform.\nThe value is set at compile time. Possible values are `'linux'`, `'darwin'`, `'ios'`, `'freebsd'`, `'dragonfly'`, `'netbsd'`, `'openbsd'`, `'solaris'`, `'android'`, `'win32'`"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "linux"
													},
													{
														"type": "literal",
														"value": "darwin"
													},
													{
														"type": "literal",
														"value": "ios"
													},
													{
														"type": "literal",
														"value": "freebsd"
													},
													{
														"type": "literal",
														"value": "dragonfly"
													},
													{
														"type": "literal",
														"value": "netbsd"
													},
													{
														"type": "literal",
														"value": "openbsd"
													},
													{
														"type": "literal",
														"value": "solaris"
													},
													{
														"type": "literal",
														"value": "android"
													},
													{
														"type": "literal",
														"value": "win32"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "LiteralUnion"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 796,
					"name": "tempdir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 120,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 797,
							"name": "tempdir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the operating system's default directory for temporary files as a string."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 792,
					"name": "type",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 79,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 793,
							"name": "type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "Linux"
													},
													{
														"type": "literal",
														"value": "Darwin"
													},
													{
														"type": "literal",
														"value": "Windows_NT"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "LiteralUnion"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 790,
					"name": "version",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "os.ts",
							"line": 67,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 791,
							"name": "version",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a string identifying the kernel version."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						787
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						794,
						788,
						796,
						792,
						790
					]
				}
			],
			"sources": [
				{
					"fileName": "os.ts",
					"line": 26,
					"character": 0
				}
			]
		},
		{
			"id": 297,
			"name": "path",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 338,
					"name": "BaseDirectory",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 583,
							"character": 2
						}
					],
					"target": 88
				},
				{
					"id": 340,
					"name": "delimiter",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Provides the platform-specific path segment delimiter:\n- `;` on Windows\n- `:` on POSIX"
					},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 465,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ";"
							},
							{
								"type": "literal",
								"value": ":"
							}
						]
					},
					"defaultValue": "..."
				},
				{
					"id": 339,
					"name": "sep",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Provides the platform-specific path segment separator:\n- `\\` on Windows\n- `/` on POSIX"
					},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 458,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "\\"
							},
							{
								"type": "literal",
								"value": "/"
							}
						]
					},
					"defaultValue": "..."
				},
				{
					"id": 298,
					"name": "appDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 36,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 299,
							"name": "appDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the suggested directory for your app config files.\nResolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value configured on `tauri.conf.json > tauri > bundle > identifier`.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 300,
					"name": "audioDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 58,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 301,
							"name": "audioDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's audio directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_MUSIC_DIR`.\n- **macOS:** Resolves to `$HOME/Music`.\n- **Windows:** Resolves to `{FOLDERID_Music}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 356,
					"name": "basename",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 541,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 357,
							"name": "basename",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": " Returns the last portion of a `path`. Trailing directory separators are ignored."
							},
							"parameters": [
								{
									"id": 358,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 359,
									"name": "ext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An optional file extension to be removed from the returned path.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 302,
					"name": "cacheDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 80,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 303,
							"name": "cacheDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's cache directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n- **macOS:** Resolves to `$HOME/Library/Caches`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 304,
					"name": "configDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 102,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "configDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's config directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 334,
					"name": "currentDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 420,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 335,
							"name": "currentDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the current working directory.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 306,
					"name": "dataDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 124,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 307,
							"name": "dataDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's data directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 308,
					"name": "desktopDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 146,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "desktopDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's desktop directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DESKTOP_DIR`.\n- **macOS:** Resolves to `$HOME/Library/Desktop`.\n- **Windows:** Resolves to `{FOLDERID_Desktop}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 350,
					"name": "dirname",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 513,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 351,
							"name": "dirname",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the directory name of a `path`. Trailing directory separators are ignored."
							},
							"parameters": [
								{
									"id": 352,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 310,
					"name": "documentDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 168,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 311,
							"name": "documentDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's document directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DOCUMENTS_DIR`.\n- **macOS:** Resolves to `$HOME/Documents`.\n- **Windows:** Resolves to `{FOLDERID_Documents}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 312,
					"name": "downloadDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 313,
							"name": "downloadDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's download directory.",
								"text": "#### Platform-specific\n\n- **Linux**: Resolves to `$XDG_DOWNLOAD_DIR`.\n- **macOS**: Resolves to `$HOME/Downloads`.\n- **Windows**: Resolves to `{FOLDERID_Downloads}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 314,
					"name": "executableDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 212,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 315,
							"name": "executableDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's executable directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n- **macOS:** Not supported.\n- **Windows:** Not supported.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 353,
					"name": "extname",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 526,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 354,
							"name": "extname",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the extension of the `path`."
							},
							"parameters": [
								{
									"id": 355,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 316,
					"name": "fontDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 234,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 317,
							"name": "fontDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's font directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n- **macOS:** Resolves to `$HOME/Library/Fonts`.\n- **Windows:** Not supported.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 318,
					"name": "homeDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 256,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 319,
							"name": "homeDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's home directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$HOME`.\n- **macOS:** Resolves to `$HOME`.\n- **Windows:** Resolves to `{FOLDERID_Profile}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 360,
					"name": "isAbsolute",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 552,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 361,
							"name": "isAbsolute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 362,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 347,
					"name": "join",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 500,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 348,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": " Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path."
							},
							"parameters": [
								{
									"id": 349,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"comment": {
										"shortText": "A sequence of path segments.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 320,
					"name": "localDataDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 278,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 321,
							"name": "localDataDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's local data directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n- **macOS:** Resolves to `$HOME/Library/Application Support`.\n- **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 336,
					"name": "logDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 442,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 337,
							"name": "logDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the suggested log directory.",
								"text": "### Platform-specific\n\n- **Linux:** Resolves to `${configDir}/${bundleIdentifier}`.\n- **macOS:** Resolves to `${homeDir}//Library/Logs/{bundleIdentifier}`\n- **Windows:** Resolves to `${configDir}/${bundleIdentifier}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 344,
					"name": "normalize",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 485,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 345,
							"name": "normalize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symolic links."
							},
							"parameters": [
								{
									"id": 346,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 322,
					"name": "pictureDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 300,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 323,
							"name": "pictureDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's picture directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_PICTURES_DIR`.\n- **macOS:** Resolves to `$HOME/Pictures`.\n- **Windows:** Resolves to `{FOLDERID_Pictures}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 324,
					"name": "publicDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 322,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 325,
							"name": "publicDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's public directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_PUBLICSHARE_DIR`.\n- **macOS:** Resolves to `$HOME/Public`.\n- **Windows:** Resolves to `{FOLDERID_Public}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "resolve",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 472,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 342,
							"name": "resolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolves a sequence of `paths` or `path` segments into an absolute path."
							},
							"parameters": [
								{
									"id": 343,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"comment": {
										"shortText": "A sequence of paths or path segments.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 326,
					"name": "resourceDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 338,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 327,
							"name": "resourceDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's resource directory.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 328,
					"name": "runtimeDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 360,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 329,
							"name": "runtimeDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's runtime directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n- **macOS:** Not supported.\n- **Windows:** Not supported.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 330,
					"name": "templateDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 382,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 331,
							"name": "templateDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's template directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_TEMPLATES_DIR`.\n- **macOS:** Not supported.\n- **Windows:** Resolves to `{FOLDERID_Templates}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 332,
					"name": "videoDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "path.ts",
							"line": 404,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 333,
							"name": "videoDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the path to the user's video directory.",
								"text": "#### Platform-specific\n\n- **Linux:** Resolves to `$XDG_VIDEOS_DIR`.\n- **macOS:** Resolves to `$HOME/Movies`.\n- **Windows:** Resolves to `{FOLDERID_Videos}`.\n",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						338
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						340,
						339
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						298,
						300,
						356,
						302,
						304,
						334,
						306,
						308,
						350,
						310,
						312,
						314,
						353,
						316,
						318,
						360,
						347,
						320,
						336,
						344,
						322,
						324,
						341,
						326,
						328,
						330,
						332
					]
				}
			],
			"sources": [
				{
					"fileName": "path.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 363,
			"name": "process",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 364,
					"name": "exit",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "process.ts",
							"line": 20,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 365,
							"name": "exit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Exits immediately with the given `exitCode`.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"parameters": [
								{
									"id": 366,
									"name": "exitCode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The exit code to use."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 367,
					"name": "relaunch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "process.ts",
							"line": 35,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 368,
							"name": "relaunch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Exits the current instance of the app then relaunches it.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						364,
						367
					]
				}
			],
			"sources": [
				{
					"fileName": "process.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 369,
			"name": "shell",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 401,
					"name": "Child",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 402,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 135,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 403,
									"name": "new Child",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 404,
											"name": "pid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 401,
										"name": "Child"
									}
								}
							]
						},
						{
							"id": 405,
							"name": "pid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The child process `pid`."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 133,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 409,
							"name": "kill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 169,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 410,
									"name": "kill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Kills the child process.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 406,
							"name": "write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 153,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 407,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes `data` to the `stdin`.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nconst command = new Command('node')\nconst child = await command.spawn()\nawait child.write('message')\nawait child.write([0, 1, 2, 3, 4, 5])\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 408,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The message to write, either a string or a byte array."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								402
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								405
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								409,
								406
							]
						}
					],
					"sources": [
						{
							"fileName": "shell.ts",
							"line": 131,
							"character": 6
						}
					]
				},
				{
					"id": 370,
					"name": "Command",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The entry point for spawning child processes.\nIt emits the `close` and `error` events.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nconst command = new Command('node')\ncommand.on('close', data => {\n  console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n})\ncommand.on('error', error => console.error(`command error: \"${error}\"`))\ncommand.stdout.on('data', line => console.log(`command stdout: \"${line}\"`))\ncommand.stderr.on('data', line => console.log(`command stderr: \"${line}\"`))\n\nconst child = await command.spawn()\nconsole.log('pid:', child.pid)\n```\n"
							}
						]
					},
					"children": [
						{
							"id": 376,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 216,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 377,
									"name": "new Command",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new `Command` instance."
									},
									"parameters": [
										{
											"id": 378,
											"name": "program",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The program to execute."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 379,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Program arguments."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											},
											"defaultValue": "[]"
										},
										{
											"id": 380,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Spawn options.\n"
											},
											"type": {
												"type": "reference",
												"id": 420,
												"name": "SpawnOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 370,
										"name": "Command"
									},
									"overwrites": {
										"type": "reference",
										"name": "EventEmitter<'close' | 'error'>.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "EventEmitter<'close' | 'error'>.constructor"
							}
						},
						{
							"id": 385,
							"name": "stderr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isReadonly": true
							},
							"comment": {
								"shortText": "Event emitter for the `stderr`. Emits the `data` event."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 207,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "EventEmitter"
							},
							"defaultValue": "..."
						},
						{
							"id": 384,
							"name": "stdout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isReadonly": true
							},
							"comment": {
								"shortText": "Event emitter for the `stdout`. Emits the `data` event."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 205,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "data"
									}
								],
								"name": "EventEmitter"
							},
							"defaultValue": "..."
						},
						{
							"id": 388,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 292,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 389,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the command as a child process, waiting for it to finish and collecting all of its output.",
										"returns": "A promise resolving to the child process output.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nconst output = await new Command('echo', 'message').execute()\nassert(output.code === 0)\nassert(output.signal === null)\nassert(output.stdout === 'message')\nassert(output.stderr === '')\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 415,
												"name": "ChildProcess"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 394,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 125,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 395,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an event from the child process.",
										"returns": "The `this` instance for chained calls.\n"
									},
									"parameters": [
										{
											"id": 396,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The event name."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "close"
													},
													{
														"type": "literal",
														"value": "error"
													}
												]
											}
										},
										{
											"id": 397,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The event handler.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 398,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 399,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 400,
																	"name": "arg",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "close"
													},
													{
														"type": "literal",
														"value": "error"
													}
												]
											}
										],
										"name": "EventEmitter"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "EventEmitter.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						},
						{
							"id": 386,
							"name": "spawn",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 255,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 387,
									"name": "spawn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the command as a child process, returning a handle to it.",
										"returns": "A promise resolving to the child process handle.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 401,
												"name": "Child"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 371,
							"name": "sidecar",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 240,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 372,
									"name": "sidecar",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a command to execute the given sidecar program.",
										"returns": "\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nconst command = Command.sidecar('my-sidecar')\nconst output = await command.execute()\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 373,
											"name": "program",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The program to execute."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 374,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Program arguments."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											},
											"defaultValue": "[]"
										},
										{
											"id": 375,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Spawn options."
											},
											"type": {
												"type": "reference",
												"id": 420,
												"name": "SpawnOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 370,
										"name": "Command"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								376
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								385,
								384
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								388,
								394,
								386,
								371
							]
						}
					],
					"sources": [
						{
							"fileName": "shell.ts",
							"line": 197,
							"character": 6
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "close"
										},
										{
											"type": "literal",
											"value": "error"
										}
									]
								}
							],
							"name": "EventEmitter"
						}
					]
				},
				{
					"id": 415,
					"name": "ChildProcess",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 416,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Exit code of the process. `null` if the process was terminated by a signal on Unix."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 46,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 417,
							"name": "signal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the process was terminated by a signal, represents that signal."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 48,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 419,
							"name": "stderr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that the process wrote to `stderr`."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 52,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 418,
							"name": "stdout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that the process wrote to `stdout`."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 50,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								416,
								417,
								419,
								418
							]
						}
					],
					"sources": [
						{
							"fileName": "shell.ts",
							"line": 44,
							"character": 10
						}
					]
				},
				{
					"id": 420,
					"name": "SpawnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 421,
							"name": "cwd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Current working directory."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 34,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 422,
							"name": "env",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Environment variables. set to `null` to clear the process env."
							},
							"sources": [
								{
									"fileName": "shell.ts",
									"line": 36,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 423,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 424,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 425,
												"name": "name",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								421,
								422
							]
						}
					],
					"sources": [
						{
							"fileName": "shell.ts",
							"line": 32,
							"character": 10
						}
					]
				},
				{
					"id": 411,
					"name": "open",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "shell.ts",
							"line": 358,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 412,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Opens a path or URL with the system's default app,\nor the one specified with `openWith`.",
								"returns": "\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\n// opens the given URL on the default browser:\nawait open('https://github.com/tauri-apps/tauri')\n// opens the given URL using `firefox`:\nawait open('https://github.com/tauri-apps/tauri', 'firefox')\n// opens a file using the default program:\nawait open('/path/to/file')\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 413,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The path or URL to open."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 414,
									"name": "openWith",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The app to open the file or URL with. Defaults to the system default application for the specified path type."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						401,
						370
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						415,
						420
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						411
					]
				}
			],
			"sources": [
				{
					"fileName": "shell.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 426,
			"name": "tauri",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Invoke your custom commands.",
				"text": "This package is also accessible with `window.__TAURI__.tauri` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 427,
					"name": "InvokeArgs",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Command arguments."
					},
					"sources": [
						{
							"fileName": "tauri.ts",
							"line": 64,
							"character": 10
						}
					],
					"indexSignature": {
						"id": 428,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"parameters": [
							{
								"id": 429,
								"name": "key",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "unknown"
						}
					}
				},
				{
					"id": 442,
					"name": "convertFileSrc",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "tauri.ts",
							"line": 103,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 443,
							"name": "convertFileSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert a device file path to an URL that can be loaded by the webview.\nNote that `asset:` must be allowed on the `csp` value configured on `tauri.conf.json`.",
								"returns": "the URL that can be used as source on the webview\n"
							},
							"parameters": [
								{
									"id": 444,
									"name": "filePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the file path.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 437,
					"name": "invoke",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "tauri.ts",
							"line": 75,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 438,
							"name": "invoke",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sends a message to the backend.",
								"returns": "A promise resolving or rejecting to the backend response.\n"
							},
							"typeParameter": [
								{
									"id": 439,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 440,
									"name": "cmd",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The command name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 441,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The optional arguments to pass to the command."
									},
									"type": {
										"type": "reference",
										"id": 427,
										"name": "InvokeArgs"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 439,
										"name": "T"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 430,
					"name": "transformCallback",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "tauri.ts",
							"line": 42,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 431,
							"name": "transformCallback",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transforms a callback function to a string identifier that can be passed to the backend.\nThe backend uses the identifier to `eval()` the callback.",
								"returns": "A unique identifier associated with the callback function.\n"
							},
							"parameters": [
								{
									"id": 432,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 433,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 434,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 435,
															"name": "response",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 436,
									"name": "once",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						427
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						442,
						437,
						430
					]
				}
			],
			"sources": [
				{
					"fileName": "tauri.ts",
					"line": 13,
					"character": 0
				}
			]
		},
		{
			"id": 445,
			"name": "updater",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Customize the auto updater flow.",
				"text": "This package is also accessible with `window.__TAURI__.updater` when `tauri.conf.json > build > withGlobalTauri` is set to true."
			},
			"children": [
				{
					"id": 450,
					"name": "UpdateManifest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 453,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 24,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 452,
							"name": "date",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 23,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 451,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 22,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								453,
								452,
								451
							]
						}
					],
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 21,
							"character": 10
						}
					]
				},
				{
					"id": 454,
					"name": "UpdateResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 455,
							"name": "manifest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 28,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 450,
								"name": "UpdateManifest"
							}
						},
						{
							"id": 456,
							"name": "shouldUpdate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 29,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								455,
								456
							]
						}
					],
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 27,
							"character": 10
						}
					]
				},
				{
					"id": 447,
					"name": "UpdateStatusResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 448,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 17,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 449,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "updater.ts",
									"line": 18,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 446,
								"name": "UpdateStatus"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								448,
								449
							]
						}
					],
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 16,
							"character": 10
						}
					]
				},
				{
					"id": 446,
					"name": "UpdateStatus",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 14,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "PENDING"
							},
							{
								"type": "literal",
								"value": "ERROR"
							},
							{
								"type": "literal",
								"value": "DONE"
							},
							{
								"type": "literal",
								"value": "UPTODATE"
							}
						]
					}
				},
				{
					"id": 459,
					"name": "checkUpdate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 89,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 460,
							"name": "checkUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if an update is available.",
								"returns": "Promise resolving to the update status.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 454,
										"name": "UpdateResult"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 457,
					"name": "installUpdate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "updater.ts",
							"line": 37,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 458,
							"name": "installUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Install the update if there's one available.",
								"returns": "A promise indicating the success or failure of the operation.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						450,
						454,
						447
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						446
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						459,
						457
					]
				}
			],
			"sources": [
				{
					"fileName": "updater.ts",
					"line": 12,
					"character": 0
				}
			]
		},
		{
			"id": 461,
			"name": "window",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "Provides APIs to create windows, communicate with other windows and manipulate the current window.",
				"text": "This package is also accessible with `window.__TAURI__.window` when `tauri.conf.json > build > withGlobalTauri` is set to true.\n\nThe APIs must be allowlisted on `tauri.conf.json`:\n```json\n{\n  \"tauri\": {\n    \"allowlist\": {\n      \"window\": {\n        \"all\": true, // enable all window APIs\n        \"create\": true // enable window creation\n      }\n    }\n  }\n}\n```\nIt is recommended to allowlist only the APIs you use for optimal bundle size and security.\n\n# Window events\n\nEvents can be listened using `appWindow.listen`:\n```typescript\nimport { appWindow } from '@tauri-apps/api/window'\nappWindow.listen('tauri://move', ({ event, payload }) => {\n  const { x, y } = payload // payload here is a `PhysicalPosition`\n})\n```\n\nWindow-specific events emitted by the backend:\n\n#### 'tauri://resize'\nEmitted when the size of the window has changed.\n*EventPayload*:\n```typescript\ntype ResizePayload = PhysicalSize\n```\n\n#### 'tauri://move'\nEmitted when the position of the window has changed.\n*EventPayload*:\n```typescript\ntype MovePayload = PhysicalPosition\n```\n\n#### 'tauri://close-requested'\nEmitted when the user requests the window to be closed.\nIf a listener is registered for this event, Tauri won't close the window so you must call `appWindow.close()` manually.\n\n#### 'tauri://focus'\nEmitted when the window gains focus.\n\n#### 'tauri://blur'\nEmitted when the window loses focus.\n\n#### 'tauri://scale-change'\nEmitted when the window's scale factor has changed.\nThe following user actions can cause DPI changes:\n- Changing the display's resolution.\n- Changing the display's scale factor (e.g. in Control Panel on Windows).\n- Moving the window to a display with a different scale factor.\n*Event payload*:\n```typescript\ninterface ScaleFactorChanged {\n  scaleFactor: number\n  size: PhysicalSize\n}\n```\n\n#### 'tauri://menu'\nEmitted when a menu item is clicked.\n*EventPayload*:\n```typescript\ntype MenuClicked = string\n```\n"
			},
			"children": [
				{
					"id": 750,
					"name": "UserAttentionType",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Attention type to request on a window."
					},
					"children": [
						{
							"id": 751,
							"name": "Critical",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "#### Platform-specific\n - **macOS:** Bounces the dock icon until the application is in focus.\n- **Windows:** Flashes both the window and the taskbar button until the application is in focus."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 181,
									"character": 2
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 752,
							"name": "Informational",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "#### Platform-specific\n- **macOS:** Bounces the dock icon once.\n- **Windows:** Flashes the taskbar button until the application is in focus."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 187,
									"character": 2
								}
							],
							"defaultValue": "2"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								751,
								752
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 175,
							"character": 5
						}
					]
				},
				{
					"id": 731,
					"name": "LogicalPosition",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A position represented in logical pixels."
					},
					"children": [
						{
							"id": 732,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 136,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 733,
									"name": "new LogicalPosition",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 734,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 735,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 731,
										"name": "LogicalPosition"
									}
								}
							]
						},
						{
							"id": 736,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 132,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Logical'"
						},
						{
							"id": 737,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 133,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 738,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 134,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								732
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								736,
								737,
								738
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 131,
							"character": 6
						}
					]
				},
				{
					"id": 712,
					"name": "LogicalSize",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A size represented in logical pixels."
					},
					"children": [
						{
							"id": 713,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 107,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 714,
									"name": "new LogicalSize",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 715,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 716,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 712,
										"name": "LogicalSize"
									}
								}
							]
						},
						{
							"id": 719,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 105,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 717,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 103,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Logical'"
						},
						{
							"id": 718,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 104,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								713
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								719,
								717,
								718
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 102,
							"character": 6
						}
					]
				},
				{
					"id": 739,
					"name": "PhysicalPosition",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A position represented in physical pixels."
					},
					"children": [
						{
							"id": 740,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 148,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 741,
									"name": "new PhysicalPosition",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 742,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 743,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 739,
										"name": "PhysicalPosition"
									}
								}
							]
						},
						{
							"id": 744,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 144,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Physical'"
						},
						{
							"id": 745,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 145,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 746,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 146,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 747,
							"name": "toLogical",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 154,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 748,
									"name": "toLogical",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the physical position to a logical one."
									},
									"parameters": [
										{
											"id": 749,
											"name": "scaleFactor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 731,
										"name": "LogicalPosition"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								740
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								744,
								745,
								746
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								747
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 143,
							"character": 6
						}
					]
				},
				{
					"id": 720,
					"name": "PhysicalSize",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A size represented in physical pixels."
					},
					"children": [
						{
							"id": 721,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 119,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 722,
									"name": "new PhysicalSize",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 723,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 724,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 720,
										"name": "PhysicalSize"
									}
								}
							]
						},
						{
							"id": 727,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 117,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 725,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 115,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Physical'"
						},
						{
							"id": 726,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 116,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 728,
							"name": "toLogical",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 125,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 729,
									"name": "toLogical",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the physical size to a logical one."
									},
									"parameters": [
										{
											"id": 730,
											"name": "scaleFactor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 712,
										"name": "LogicalSize"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								721
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								727,
								725,
								726
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								728
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 114,
							"character": 6
						}
					]
				},
				{
					"id": 463,
					"name": "WebviewWindow",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Create new webview windows and get a handle to existing ones.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\n// loading embedded asset:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'path/to/page.html'\n})\n// alternatively, load a remote URL:\nconst webview = new WebviewWindow('theUniqueLabel', {\n  url: 'https://github.com/tauri-apps/tauri'\n})\n\nwebview.once('tauri://created', function () {\n // webview window successfully created\n})\nwebview.once('tauri://error', function (e) {\n // an error happened creating the webview window\n})\n\n// emit an event to the backend\nawait webview.emit(\"some event\", \"data\")\n// listen to an event from the backend\nconst unlisten = await webview.listen(\"event name\", e => {})\nunlisten()\n```\n"
							}
						]
					},
					"children": [
						{
							"id": 467,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1097,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 468,
									"name": "new WebviewWindow",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 469,
											"name": "label",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 470,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 764,
												"name": "WindowOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"id": 463,
										"name": "WebviewWindow"
									},
									"overwrites": {
										"type": "reference",
										"id": 603,
										"name": "WindowManager.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 602,
								"name": "WindowManager.constructor"
							}
						},
						{
							"id": 549,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Window label."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 227,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 683,
								"name": "WindowManager.label"
							}
						},
						{
							"id": 550,
							"name": "listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Local event listeners."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 229,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 551,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 552,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 553,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "EventCallback"
											}
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 684,
								"name": "WindowManager.listeners"
							}
						},
						{
							"id": 568,
							"name": "_handleTauriEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 297,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 569,
									"name": "_handleTauriEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 570,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 571,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 572,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 570,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 703,
										"name": "WindowManager._handleTauriEvent"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 702,
								"name": "WindowManager._handleTauriEvent"
							}
						},
						{
							"id": 491,
							"name": "center",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 491,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 492,
									"name": "center",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Centers the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 626,
										"name": "WindowManager.center"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 625,
								"name": "WindowManager.center"
							}
						},
						{
							"id": 516,
							"name": "close",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 736,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 517,
									"name": "close",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 651,
										"name": "WindowManager.close"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 650,
								"name": "WindowManager.close"
							}
						},
						{
							"id": 564,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 286,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 565,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits an event to the backend, tied to the webview window."
									},
									"parameters": [
										{
											"id": 566,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 567,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Event payload.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 699,
										"name": "WindowManager.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 698,
								"name": "WindowManager.emit"
							}
						},
						{
							"id": 514,
							"name": "hide",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 716,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 515,
									"name": "hide",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window visibility to false.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 649,
										"name": "WindowManager.hide"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 648,
								"name": "WindowManager.hide"
							}
						},
						{
							"id": 473,
							"name": "innerPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 334,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 474,
									"name": "innerPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 739,
												"name": "PhysicalPosition"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 608,
										"name": "WindowManager.innerPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 607,
								"name": "WindowManager.innerPosition"
							}
						},
						{
							"id": 477,
							"name": "innerSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 369,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 478,
									"name": "innerSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The physical size of the window's client area.\nThe client area is the content of the window, excluding the title bar and borders."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 720,
												"name": "PhysicalSize"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 612,
										"name": "WindowManager.innerSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 611,
								"name": "WindowManager.innerSize"
							}
						},
						{
							"id": 485,
							"name": "isDecorated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 436,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 486,
									"name": "isDecorated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current decorated state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 620,
										"name": "WindowManager.isDecorated"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 619,
								"name": "WindowManager.isDecorated"
							}
						},
						{
							"id": 481,
							"name": "isFullscreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 404,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 482,
									"name": "isFullscreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current fullscreen state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 616,
										"name": "WindowManager.isFullscreen"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 615,
								"name": "WindowManager.isFullscreen"
							}
						},
						{
							"id": 483,
							"name": "isMaximized",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 420,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 484,
									"name": "isMaximized",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current maximized state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 618,
										"name": "WindowManager.isMaximized"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 617,
								"name": "WindowManager.isMaximized"
							}
						},
						{
							"id": 487,
							"name": "isResizable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 452,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 488,
									"name": "isResizable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current resizable state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 622,
										"name": "WindowManager.isResizable"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 621,
								"name": "WindowManager.isResizable"
							}
						},
						{
							"id": 489,
							"name": "isVisible",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 468,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 490,
									"name": "isVisible",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current visible state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 624,
										"name": "WindowManager.isVisible"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 623,
								"name": "WindowManager.isVisible"
							}
						},
						{
							"id": 554,
							"name": "listen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 248,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 555,
									"name": "listen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 556,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 557,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "reference",
												"id": 64,
												"name": "EventName"
											}
										},
										{
											"id": 558,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 556,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 689,
										"name": "WindowManager.listen"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 688,
								"name": "WindowManager.listen"
							}
						},
						{
							"id": 502,
							"name": "maximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 596,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 503,
									"name": "maximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 637,
										"name": "WindowManager.maximize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 636,
								"name": "WindowManager.maximize"
							}
						},
						{
							"id": 508,
							"name": "minimize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 656,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 509,
									"name": "minimize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Minimizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 643,
										"name": "WindowManager.minimize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 642,
								"name": "WindowManager.minimize"
							}
						},
						{
							"id": 559,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 269,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 560,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an one-off event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 561,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 562,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 563,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 561,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 694,
										"name": "WindowManager.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 693,
								"name": "WindowManager.once"
							}
						},
						{
							"id": 475,
							"name": "outerPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 350,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 476,
									"name": "outerPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 739,
												"name": "PhysicalPosition"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 610,
										"name": "WindowManager.outerPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 609,
								"name": "WindowManager.outerPosition"
							}
						},
						{
							"id": 479,
							"name": "outerSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 388,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 480,
									"name": "outerSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The physical size of the entire window.\nThese dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 720,
												"name": "PhysicalSize"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 614,
										"name": "WindowManager.outerSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 613,
								"name": "WindowManager.outerSize"
							}
						},
						{
							"id": 493,
							"name": "requestUserAttention",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 521,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 494,
									"name": "requestUserAttention",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": " Requests user attention to the window, this has no effect if the application\nis already focused. How requesting for user attention manifests is platform dependent,\nsee `UserAttentionType` for details.",
										"text": "Providing `null` will unset the request for user attention. Unsetting the request for\nuser attention might not be done automatically by the WM when the window receives input.\n\n#### Platform-specific\n\n- **macOS:** `null` has no effect.\n",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 495,
											"name": "requestType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 750,
														"name": "UserAttentionType"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 628,
										"name": "WindowManager.requestUserAttention"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 627,
								"name": "WindowManager.requestUserAttention"
							}
						},
						{
							"id": 471,
							"name": "scaleFactor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 318,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 472,
									"name": "scaleFactor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The scale factor that can be used to map physical pixels to logical pixels."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 606,
										"name": "WindowManager.scaleFactor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 605,
								"name": "WindowManager.scaleFactor"
							}
						},
						{
							"id": 521,
							"name": "setAlwaysOnTop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 779,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 522,
									"name": "setAlwaysOnTop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether the window should always be on top of other windows.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 523,
											"name": "alwaysOnTop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should always be on top of other windows or not."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 656,
										"name": "WindowManager.setAlwaysOnTop"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 655,
								"name": "WindowManager.setAlwaysOnTop"
							}
						},
						{
							"id": 518,
							"name": "setDecorations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 757,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 519,
									"name": "setDecorations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether the window should have borders and bars.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 520,
											"name": "decorations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should have borders and bars."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 653,
										"name": "WindowManager.setDecorations"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 652,
								"name": "WindowManager.setDecorations"
							}
						},
						{
							"id": 539,
							"name": "setFocus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 987,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 540,
									"name": "setFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the window to front and focus.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 674,
										"name": "WindowManager.setFocus"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 673,
								"name": "WindowManager.setFocus"
							}
						},
						{
							"id": 536,
							"name": "setFullscreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 966,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 537,
									"name": "setFullscreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window fullscreen state.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 538,
											"name": "fullscreen",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should go to fullscreen or not."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 671,
										"name": "WindowManager.setFullscreen"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 670,
								"name": "WindowManager.setFullscreen"
							}
						},
						{
							"id": 541,
							"name": "setIcon",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1008,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 542,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window icon.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 543,
											"name": "icon",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Icon bytes or path to the icon file."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 676,
										"name": "WindowManager.setIcon"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 675,
								"name": "WindowManager.setIcon"
							}
						},
						{
							"id": 530,
							"name": "setMaxSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 886,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 531,
									"name": "setMaxSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMaxSize(new LogicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 532,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size, or `null` to unset the constraint."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 665,
										"name": "WindowManager.setMaxSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 664,
								"name": "WindowManager.setMaxSize"
							}
						},
						{
							"id": 527,
							"name": "setMinSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 844,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 528,
									"name": "setMinSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, PhysicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMinSize(new PhysicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 529,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size, or `null` to unset the constraint."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 662,
										"name": "WindowManager.setMinSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 661,
								"name": "WindowManager.setMinSize"
							}
						},
						{
							"id": 533,
							"name": "setPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 928,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 534,
									"name": "setPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window outer position.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalPosition } from '@tauri-apps/api/window'\nawait appWindow.setPosition(new LogicalPosition(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 535,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The new position, in logical or physical pixels."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 739,
														"name": "PhysicalPosition"
													},
													{
														"type": "reference",
														"id": 731,
														"name": "LogicalPosition"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 668,
										"name": "WindowManager.setPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 667,
								"name": "WindowManager.setPosition"
							}
						},
						{
							"id": 496,
							"name": "setResizable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 553,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 497,
									"name": "setResizable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the window resizable flag.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 498,
											"name": "resizable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "WindowManager.setResizable"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "WindowManager.setResizable"
							}
						},
						{
							"id": 524,
							"name": "setSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 806,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 525,
									"name": "setSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resizes the window with a new inner size.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setSize(new LogicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 526,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 659,
										"name": "WindowManager.setSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 658,
								"name": "WindowManager.setSize"
							}
						},
						{
							"id": 544,
							"name": "setSkipTaskbar",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1032,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 545,
									"name": "setSkipTaskbar",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether to show the window icon in the task bar or not.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 546,
											"name": "skip",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "true to hide window icon, false to show it."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 679,
										"name": "WindowManager.setSkipTaskbar"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 678,
								"name": "WindowManager.setSkipTaskbar"
							}
						},
						{
							"id": 499,
							"name": "setTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 575,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 500,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window title.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 501,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The new title"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 634,
										"name": "WindowManager.setTitle"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 633,
								"name": "WindowManager.setTitle"
							}
						},
						{
							"id": 512,
							"name": "show",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 696,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 513,
									"name": "show",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window visibility to true.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 647,
										"name": "WindowManager.show"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 646,
								"name": "WindowManager.show"
							}
						},
						{
							"id": 547,
							"name": "startDragging",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1053,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 548,
									"name": "startDragging",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts dragging the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 682,
										"name": "WindowManager.startDragging"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 681,
								"name": "WindowManager.startDragging"
							}
						},
						{
							"id": 506,
							"name": "toggleMaximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 636,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 507,
									"name": "toggleMaximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Toggles the window maximized state.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 641,
										"name": "WindowManager.toggleMaximize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 640,
								"name": "WindowManager.toggleMaximize"
							}
						},
						{
							"id": 504,
							"name": "unmaximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 616,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 505,
									"name": "unmaximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unmaximizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 639,
										"name": "WindowManager.unmaximize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 638,
								"name": "WindowManager.unmaximize"
							}
						},
						{
							"id": 510,
							"name": "unminimize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 676,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 511,
									"name": "unminimize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unminimizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 645,
										"name": "WindowManager.unminimize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 644,
								"name": "WindowManager.unminimize"
							}
						},
						{
							"id": 464,
							"name": "getByLabel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1127,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 465,
									"name": "getByLabel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the WebviewWindow for the webview associated with the given label.",
										"returns": "The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n"
									},
									"parameters": [
										{
											"id": 466,
											"name": "label",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The webview window label."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 463,
												"name": "WebviewWindow"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								467
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								549,
								550
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								568,
								491,
								516,
								564,
								514,
								473,
								477,
								485,
								481,
								483,
								487,
								489,
								554,
								502,
								508,
								559,
								475,
								479,
								493,
								471,
								521,
								518,
								539,
								536,
								541,
								530,
								527,
								533,
								496,
								524,
								544,
								499,
								512,
								547,
								506,
								504,
								510,
								464
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1096,
							"character": 6
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 601,
							"name": "WindowManager"
						}
					]
				},
				{
					"id": 573,
					"name": "WebviewWindowHandle",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A webview window handle allows emitting and listening to events from the backend that are tied to the window."
					},
					"children": [
						{
							"id": 574,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 231,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 575,
									"name": "new WebviewWindowHandle",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 576,
											"name": "label",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 573,
										"name": "WebviewWindowHandle"
									}
								}
							]
						},
						{
							"id": 577,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Window label."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 227,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 578,
							"name": "listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Local event listeners."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 229,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 579,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 580,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 581,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "EventCallback"
											}
										}
									}
								}
							}
						},
						{
							"id": 596,
							"name": "_handleTauriEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 297,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 597,
									"name": "_handleTauriEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 598,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 599,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 600,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 570,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 592,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 286,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 593,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits an event to the backend, tied to the webview window."
									},
									"parameters": [
										{
											"id": 594,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 595,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Event payload.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 582,
							"name": "listen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 248,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 583,
									"name": "listen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 584,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 585,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "reference",
												"id": 64,
												"name": "EventName"
											}
										},
										{
											"id": 586,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 556,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 587,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 269,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 588,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an one-off event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 589,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 590,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 591,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 561,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								574
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								577,
								578
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								596,
								592,
								582,
								587
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 225,
							"character": 6
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 601,
							"name": "WindowManager"
						}
					]
				},
				{
					"id": 601,
					"name": "WindowManager",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manage the current window object."
					},
					"children": [
						{
							"id": 602,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 603,
									"name": "new WindowManager",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 604,
											"name": "label",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 601,
										"name": "WindowManager"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 575,
										"name": "WebviewWindowHandle.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 574,
								"name": "WebviewWindowHandle.constructor"
							}
						},
						{
							"id": 683,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Window label."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 227,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 577,
								"name": "WebviewWindowHandle.label"
							}
						},
						{
							"id": 684,
							"name": "listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Local event listeners."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 229,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 685,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 686,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 687,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "EventCallback"
											}
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 578,
								"name": "WebviewWindowHandle.listeners"
							}
						},
						{
							"id": 702,
							"name": "_handleTauriEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 297,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 703,
									"name": "_handleTauriEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 704,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 705,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 706,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 570,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 597,
										"name": "WebviewWindowHandle._handleTauriEvent"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 596,
								"name": "WebviewWindowHandle._handleTauriEvent"
							}
						},
						{
							"id": 625,
							"name": "center",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 491,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 626,
									"name": "center",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Centers the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 650,
							"name": "close",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 736,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 651,
									"name": "close",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 698,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 286,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 699,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits an event to the backend, tied to the webview window."
									},
									"parameters": [
										{
											"id": 700,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 701,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Event payload.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 593,
										"name": "WebviewWindowHandle.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 592,
								"name": "WebviewWindowHandle.emit"
							}
						},
						{
							"id": 648,
							"name": "hide",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 716,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 649,
									"name": "hide",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window visibility to false.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 607,
							"name": "innerPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 334,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 608,
									"name": "innerPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 739,
												"name": "PhysicalPosition"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 611,
							"name": "innerSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 369,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 612,
									"name": "innerSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The physical size of the window's client area.\nThe client area is the content of the window, excluding the title bar and borders."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 720,
												"name": "PhysicalSize"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 619,
							"name": "isDecorated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 436,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 620,
									"name": "isDecorated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current decorated state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 615,
							"name": "isFullscreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 404,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 616,
									"name": "isFullscreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current fullscreen state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 617,
							"name": "isMaximized",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 420,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 618,
									"name": "isMaximized",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current maximized state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 621,
							"name": "isResizable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 452,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 622,
									"name": "isResizable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current resizable state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 623,
							"name": "isVisible",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 468,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 624,
									"name": "isVisible",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the window's current visible state."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 688,
							"name": "listen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 248,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 689,
									"name": "listen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 690,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 691,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "reference",
												"id": 64,
												"name": "EventName"
											}
										},
										{
											"id": 692,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 556,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 583,
										"name": "WebviewWindowHandle.listen"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 582,
								"name": "WebviewWindowHandle.listen"
							}
						},
						{
							"id": 636,
							"name": "maximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 596,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 637,
									"name": "maximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 642,
							"name": "minimize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 656,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 643,
									"name": "minimize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Minimizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 693,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 269,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 694,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to an one-off event emitted by the backend that is tied to the webview window.",
										"returns": "A promise resolving to a function to unlisten to the event.\n"
									},
									"typeParameter": [
										{
											"id": 695,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 696,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 697,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Event handler."
											},
											"type": {
												"type": "reference",
												"id": 65,
												"typeArguments": [
													{
														"type": "reference",
														"id": 561,
														"name": "T"
													}
												],
												"name": "EventCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 70,
												"name": "UnlistenFn"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 588,
										"name": "WebviewWindowHandle.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 587,
								"name": "WebviewWindowHandle.once"
							}
						},
						{
							"id": 609,
							"name": "outerPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 350,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 610,
									"name": "outerPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 739,
												"name": "PhysicalPosition"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 613,
							"name": "outerSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 388,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 614,
									"name": "outerSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The physical size of the entire window.\nThese dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 720,
												"name": "PhysicalSize"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 627,
							"name": "requestUserAttention",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 521,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 628,
									"name": "requestUserAttention",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": " Requests user attention to the window, this has no effect if the application\nis already focused. How requesting for user attention manifests is platform dependent,\nsee `UserAttentionType` for details.",
										"text": "Providing `null` will unset the request for user attention. Unsetting the request for\nuser attention might not be done automatically by the WM when the window receives input.\n\n#### Platform-specific\n\n- **macOS:** `null` has no effect.\n",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 629,
											"name": "requestType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 750,
														"name": "UserAttentionType"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 605,
							"name": "scaleFactor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 318,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 606,
									"name": "scaleFactor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The scale factor that can be used to map physical pixels to logical pixels."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 655,
							"name": "setAlwaysOnTop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 779,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 656,
									"name": "setAlwaysOnTop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether the window should always be on top of other windows.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 657,
											"name": "alwaysOnTop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should always be on top of other windows or not."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 652,
							"name": "setDecorations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 757,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 653,
									"name": "setDecorations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether the window should have borders and bars.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 654,
											"name": "decorations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should have borders and bars."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 673,
							"name": "setFocus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 987,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 674,
									"name": "setFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Bring the window to front and focus.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 670,
							"name": "setFullscreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 966,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 671,
									"name": "setFullscreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window fullscreen state.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 672,
											"name": "fullscreen",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether the window should go to fullscreen or not."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 675,
							"name": "setIcon",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1008,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 676,
									"name": "setIcon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window icon.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 677,
											"name": "icon",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Icon bytes or path to the icon file."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 664,
							"name": "setMaxSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 886,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 665,
									"name": "setMaxSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMaxSize(new LogicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 666,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size, or `null` to unset the constraint."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 661,
							"name": "setMinSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 844,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 662,
									"name": "setMinSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, PhysicalSize } from '@tauri-apps/api/window'\nawait appWindow.setMinSize(new PhysicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 663,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size, or `null` to unset the constraint."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 667,
							"name": "setPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 928,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 668,
									"name": "setPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window outer position.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalPosition } from '@tauri-apps/api/window'\nawait appWindow.setPosition(new LogicalPosition(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 669,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The new position, in logical or physical pixels."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 739,
														"name": "PhysicalPosition"
													},
													{
														"type": "reference",
														"id": 731,
														"name": "LogicalPosition"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 630,
							"name": "setResizable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 553,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 631,
									"name": "setResizable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the window resizable flag.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 632,
											"name": "resizable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 658,
							"name": "setSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 806,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 659,
									"name": "setSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resizes the window with a new inner size.",
										"returns": "A promise indicating the success or failure of the operation.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\nimport { appWindow, LogicalSize } from '@tauri-apps/api/window'\nawait appWindow.setSize(new LogicalSize(600, 500))\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 660,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The logical or physical inner size."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 720,
														"name": "PhysicalSize"
													},
													{
														"type": "reference",
														"id": 712,
														"name": "LogicalSize"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 678,
							"name": "setSkipTaskbar",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1032,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 679,
									"name": "setSkipTaskbar",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Whether to show the window icon in the task bar or not.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 680,
											"name": "skip",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "true to hide window icon, false to show it."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 633,
							"name": "setTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 575,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 634,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window title.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"parameters": [
										{
											"id": 635,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The new title"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 646,
							"name": "show",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 696,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 647,
									"name": "show",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the window visibility to true.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 681,
							"name": "startDragging",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1053,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 682,
									"name": "startDragging",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts dragging the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 640,
							"name": "toggleMaximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 636,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 641,
									"name": "toggleMaximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Toggles the window maximized state.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 638,
							"name": "unmaximize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 616,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 639,
									"name": "unmaximize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unmaximizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 644,
							"name": "unminimize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 676,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 645,
									"name": "unminimize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unminimizes the window.",
										"returns": "A promise indicating the success or failure of the operation.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								602
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								683,
								684
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								702,
								625,
								650,
								698,
								648,
								607,
								611,
								619,
								615,
								617,
								621,
								623,
								688,
								636,
								642,
								693,
								609,
								613,
								627,
								605,
								655,
								652,
								673,
								670,
								675,
								664,
								661,
								667,
								630,
								658,
								678,
								633,
								646,
								681,
								640,
								638,
								644
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 315,
							"character": 6
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 573,
							"name": "WebviewWindowHandle"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 463,
							"name": "WebviewWindow"
						}
					]
				},
				{
					"id": 759,
					"name": "Monitor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Allows you to retrieve information about a given monitor."
					},
					"children": [
						{
							"id": 760,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Human-readable name of the monitor"
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 92,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 762,
							"name": "position",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "the Top-left corner position of the monitor relative to the larger full screen area."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 96,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 739,
								"name": "PhysicalPosition"
							}
						},
						{
							"id": 763,
							"name": "scaleFactor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The scale factor that can be used to map physical pixels to logical pixels."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 98,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 761,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The monitor's resolution."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 94,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 720,
								"name": "PhysicalSize"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								760,
								762,
								763,
								761
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 90,
							"character": 10
						}
					]
				},
				{
					"id": 764,
					"name": "WindowOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration for the window to create."
					},
					"children": [
						{
							"id": 783,
							"name": "alwaysOnTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window should always be on top of other windows or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1183,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 766,
							"name": "center",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Show window in the center of the screen.."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1149,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 782,
							"name": "decorations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window should have borders and bars or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1181,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 785,
							"name": "fileDropEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the file drop is enabled or not on the webview. By default it is enabled.",
								"text": "Disabling it is required to use drag and drop on the frontend on Windows.\n"
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1191,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 778,
							"name": "focus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window will be initially hidden or focused."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1173,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 777,
							"name": "fullscreen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window is in fullscreen mode or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1171,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 770,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial height."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1157,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 774,
							"name": "maxHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The maximum height. Only applies if `maxWidth` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1165,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 773,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The maximum width. Only applies if `maxHeight` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1163,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 780,
							"name": "maximized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window should be maximized upon creation or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1177,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 772,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The minimum height. Only applies if `minWidth` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1161,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 771,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The minimum width. Only applies if `minHeight` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1159,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 775,
							"name": "resizable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window is resizable or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1167,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 784,
							"name": "skipTaskbar",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether or not the window icon should be added to the taskbar."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1185,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 776,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Window title."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1169,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 779,
							"name": "transparent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window is transparent or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1175,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 765,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Remote URL or local file path to open, e.g. `https://github.com/tauri-apps` or `path/to/page.html`."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1147,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 781,
							"name": "visible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the window should be immediately visible upon creation or not."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1179,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 769,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial width."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1155,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 767,
							"name": "x",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial vertical position. Only applies if `y` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1151,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 768,
							"name": "y",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The initial horizontal position. Only applies if `x` is also set."
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 1153,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								783,
								766,
								782,
								785,
								778,
								777,
								770,
								774,
								773,
								780,
								772,
								771,
								775,
								784,
								776,
								779,
								765,
								781,
								769,
								767,
								768
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1143,
							"character": 10
						}
					]
				},
				{
					"id": 711,
					"name": "appWindow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "The WebviewWindow for the current window."
					},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1137,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"id": 463,
						"name": "WebviewWindow"
					},
					"defaultValue": "..."
				},
				{
					"id": 757,
					"name": "availableMonitors",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1231,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 758,
							"name": "availableMonitors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the list of all the monitors available on the system."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 759,
											"name": "Monitor"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 753,
					"name": "currentMonitor",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1198,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 754,
							"name": "currentMonitor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the monitor on which the window currently resides.\nReturns `null` if current monitor can't be detected."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 759,
												"name": "Monitor"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 709,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 207,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 710,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets an instance of `WebviewWindow` for all available webview windows.",
								"returns": "The list of WebviewWindow.\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 463,
									"name": "WebviewWindow"
								}
							}
						}
					]
				},
				{
					"id": 707,
					"name": "getCurrent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 195,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 708,
							"name": "getCurrent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get an instance of `WebviewWindow` for the current webview window.",
								"returns": "The current WebviewWindow.\n"
							},
							"type": {
								"type": "reference",
								"id": 463,
								"name": "WebviewWindow"
							}
						}
					]
				},
				{
					"id": 755,
					"name": "primaryMonitor",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "window.ts",
							"line": 1216,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 756,
							"name": "primaryMonitor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the primary monitor of the system.\nReturns `null` if it can't identify any monitor as a primary one."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 759,
												"name": "Monitor"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						750
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						731,
						712,
						739,
						720,
						463,
						573,
						601
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						759,
						764
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						711
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						757,
						753,
						709,
						707,
						755
					]
				}
			],
			"sources": [
				{
					"fileName": "window.ts",
					"line": 85,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				1,
				8,
				23,
				29,
				58,
				87,
				167,
				188,
				284,
				786,
				297,
				363,
				369,
				426,
				445,
				461
			]
		}
	],
	"sources": [
		{
			"fileName": "index.ts",
			"line": 16,
			"character": 0
		}
	]
}